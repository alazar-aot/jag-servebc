{"ast":null,"code":"/* istanbul ignore file */\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport { BPM_BASE_URL_SOCKET_IO } from \"../apiManager/endpoints/config\";\nimport UserService from \"./UserService\";\nimport { WEBSOCKET_ENCRYPT_KEY } from \"../constants/socketIOConstants\";\nimport AES from 'crypto-js/aes';\nvar stompClient = null;\nvar reconnectTimeOut = null;\n\nvar connect = function connect(reloadCallback) {\n  var accessToken = AES.encrypt(UserService.getToken(), WEBSOCKET_ENCRYPT_KEY).toString();\n  var socketUrl = \"\".concat(BPM_BASE_URL_SOCKET_IO, \"?accesstoken=\").concat(accessToken);\n  var socket = new SockJS(socketUrl);\n  stompClient = Stomp.over(socket);\n  stompClient.debug = null;\n  stompClient.connect({}, function () {\n    if (isConnected()) {\n      stompClient.subscribe('/topic/task-event', function (output) {\n        var taskUpdate = JSON.parse(output.body);\n        /* taskUpdate format\r\n           {id:\"taskId\", eventName:\"complete/update/create\"}\r\n           On Complete/ create the pagination can change so Would need a refresh\r\n           For update can assume with current filter only if the same list has the taskId available of the updated one then only Refresh.\r\n           (Would fail in filter/Search on the Same params)\r\n        */\n\n        var forceReload = taskUpdate.eventName === \"complete\";\n        var isUpdateEvent = taskUpdate.eventName === \"update\";\n        reloadCallback(taskUpdate.id, forceReload, isUpdateEvent);\n      });\n    }\n  }, function (error) {\n    console.log(error);\n    /* Try reconnect the websocket connection again after 5 seconds only if still in task page\r\n     and failure happens due to network/rebuilding time. */\n\n    if (window.location.pathname.includes('task')) {\n      reconnectTimeOut = setTimeout(function () {\n        connect(reloadCallback);\n      }, 5000);\n    }\n  });\n};\n\nvar isConnected = function isConnected() {\n  var _stompClient;\n\n  return ((_stompClient = stompClient) === null || _stompClient === void 0 ? void 0 : _stompClient.connected) || null;\n};\n\nvar disconnect = function disconnect() {\n  stompClient.disconnect();\n  clearTimeout(reconnectTimeOut);\n};\n\nvar SocketIOService = {\n  connect: connect,\n  disconnect: disconnect,\n  isConnected: isConnected\n};\nexport default SocketIOService;","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/services/SocketIOService.js"],"names":["SockJS","Stomp","BPM_BASE_URL_SOCKET_IO","UserService","WEBSOCKET_ENCRYPT_KEY","AES","stompClient","reconnectTimeOut","connect","reloadCallback","accessToken","encrypt","getToken","toString","socketUrl","socket","over","debug","isConnected","subscribe","output","taskUpdate","JSON","parse","body","forceReload","eventName","isUpdateEvent","id","error","console","log","window","location","pathname","includes","setTimeout","connected","disconnect","clearTimeout","SocketIOService"],"mappings":"AAAC;AACD,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,sBAAR,QAAqC,gCAArC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,qBAAR,QAAoC,gCAApC;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,gBAAgB,GAAC,IAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,cAAD,EAAkB;AAChC,MAAMC,WAAW,GAAEL,GAAG,CAACM,OAAJ,CAAYR,WAAW,CAACS,QAAZ,EAAZ,EAAmCR,qBAAnC,EAA0DS,QAA1D,EAAnB;AACA,MAAMC,SAAS,aAAIZ,sBAAJ,0BAA0CQ,WAA1C,CAAf;AACA,MAAMK,MAAM,GAAG,IAAIf,MAAJ,CAAWc,SAAX,CAAf;AACAR,EAAAA,WAAW,GAAGL,KAAK,CAACe,IAAN,CAAWD,MAAX,CAAd;AACAT,EAAAA,WAAW,CAACW,KAAZ,GAAoB,IAApB;AACAX,EAAAA,WAAW,CAACE,OAAZ,CAAoB,EAApB,EAAwB,YAAU;AAChC,QAAGU,WAAW,EAAd,EAAiB;AACfZ,MAAAA,WAAW,CAACa,SAAZ,CAAsB,mBAAtB,EAA2C,UAASC,MAAT,EAAgB;AACzD,YAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAAnB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,YAAMC,WAAW,GAACJ,UAAU,CAACK,SAAX,KAAuB,UAAzC;AACA,YAAMC,aAAa,GAAGN,UAAU,CAACK,SAAX,KAAuB,QAA7C;AACAjB,QAAAA,cAAc,CAACY,UAAU,CAACO,EAAZ,EAAeH,WAAf,EAA2BE,aAA3B,CAAd;AACD,OAXD;AAYD;AACF,GAfD,EAeE,UAAUE,KAAV,EAAgB;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACJ;;AACI,QAAGG,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,MAAlC,CAAH,EAA6C;AAC3C5B,MAAAA,gBAAgB,GAAG6B,UAAU,CAAC,YAAI;AAChC5B,QAAAA,OAAO,CAACC,cAAD,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD;AACF,GAxBD;AAyBD,CA/BD;;AAiCA,IAAMS,WAAW,GAAG,SAAdA,WAAc,GAAI;AAAA;;AACvB,SAAO,iBAAAZ,WAAW,UAAX,oDAAa+B,SAAb,KAAwB,IAA/B;AACA,CAFD;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAI;AACrBhC,EAAAA,WAAW,CAACgC,UAAZ;AACAC,EAAAA,YAAY,CAAChC,gBAAD,CAAZ;AACD,CAHD;;AAKA,IAAMiC,eAAe,GAAG;AACtBhC,EAAAA,OAAO,EAAPA,OADsB;AAEtB8B,EAAAA,UAAU,EAAVA,UAFsB;AAGtBpB,EAAAA,WAAW,EAAXA;AAHsB,CAAxB;AAMA,eAAesB,eAAf","sourcesContent":[" /* istanbul ignore file */\r\nimport SockJS from 'sockjs-client'\r\nimport Stomp from 'stompjs'\r\nimport {BPM_BASE_URL_SOCKET_IO} from \"../apiManager/endpoints/config\";\r\nimport UserService from \"./UserService\";\r\nimport {WEBSOCKET_ENCRYPT_KEY} from \"../constants/socketIOConstants\";\r\nimport AES from 'crypto-js/aes';\r\n\r\nlet stompClient = null;\r\nlet reconnectTimeOut=null;\r\n\r\nconst connect = (reloadCallback)=>{\r\n  const accessToken= AES.encrypt(UserService.getToken(),WEBSOCKET_ENCRYPT_KEY).toString();\r\n  const socketUrl=`${BPM_BASE_URL_SOCKET_IO}?accesstoken=${accessToken}`;\r\n  const socket = new SockJS(socketUrl);\r\n  stompClient = Stomp.over(socket);\r\n  stompClient.debug = null;\r\n  stompClient.connect({}, function(){\r\n    if(isConnected()){\r\n      stompClient.subscribe('/topic/task-event', function(output){\r\n        const taskUpdate = JSON.parse(output.body);\r\n        /* taskUpdate format\r\n           {id:\"taskId\", eventName:\"complete/update/create\"}\r\n           On Complete/ create the pagination can change so Would need a refresh\r\n           For update can assume with current filter only if the same list has the taskId available of the updated one then only Refresh.\r\n           (Would fail in filter/Search on the Same params)\r\n        */\r\n        const forceReload=taskUpdate.eventName===\"complete\";\r\n        const isUpdateEvent = taskUpdate.eventName===\"update\";\r\n        reloadCallback(taskUpdate.id,forceReload,isUpdateEvent);\r\n      });\r\n    }\r\n  },function (error){\r\n    console.log(error);\r\n    /* Try reconnect the websocket connection again after 5 seconds only if still in task page\r\n     and failure happens due to network/rebuilding time. */\r\n    if(window.location.pathname.includes('task')){\r\n      reconnectTimeOut = setTimeout(()=>{\r\n        connect(reloadCallback);\r\n      }, 5000);\r\n    }\r\n  });\r\n}\r\n\r\nconst isConnected = ()=>{\r\n return stompClient?.connected||null;\r\n};\r\n\r\nconst disconnect = ()=>{\r\n  stompClient.disconnect();\r\n  clearTimeout(reconnectTimeOut);\r\n}\r\n\r\nconst SocketIOService = {\r\n  connect,\r\n  disconnect,\r\n  isConnected\r\n};\r\n\r\nexport default SocketIOService;\r\n"]},"metadata":{},"sourceType":"module"}