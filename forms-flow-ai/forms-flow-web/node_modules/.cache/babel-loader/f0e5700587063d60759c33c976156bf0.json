{"ast":null,"code":"/* istanbul ignore file */\nimport { httpGETRequest, httpPOSTRequest, httpPOSTRequestWithoutToken } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport { setApplicationListByFormId, serviceActionError, setApplicationList, setApplicationDetail, setApplicationDetailLoader, setApplicationProcess, setApplicationListCount, setApplicationDetailStatusCode, setApplicationStatusList, setApplicationError } from \"../../actions/applicationActions\";\nimport { replaceUrl } from \"../../helper/helper\";\nimport moment from 'moment';\nimport { getFormattedProcess } from \"./formatterService\";\nimport { setPublicFormStatus } from '../../actions/formActions';\nexport var getAllApplicationsByFormId = function getAllApplicationsByFormId(formId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    //TODO remove the pageNo and limit currently its mandatory from api\n    httpGETRequest(\"\".concat(API.GET_ALL_APPLICATIONS_FROM_FORM_ID, \"/\").concat(formId)).then(function (res) {\n      if (res.data) {\n        var applications = res.data.applications || [];\n        dispatch(setApplicationListByFormId(applications));\n        done(null, applications);\n      } else {\n        console.log(\"Error\", res);\n        dispatch(serviceActionError(res));\n      }\n\n      done(null, res.data);\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var getAllApplications = function getAllApplications() {\n  var pageNo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  return function (dispatch) {\n    //TODO remove the pageNo and limit currently its mandatory from api\n    //`${API.GET_ALL_APPLICATIONS}?pageNo=${pageNo}&limit=${limit}`\n    httpGETRequest(\"\".concat(API.GET_ALL_APPLICATIONS, \"?pageNo=\").concat(pageNo, \"&limit=\").concat(limit)).then(function (res) {\n      if (res.data) {\n        var applications = res.data.applications || [];\n        dispatch(setApplicationListCount(res.data.totalCount || 0));\n        dispatch(setApplicationList(applications));\n        done(null, applications);\n      } else {\n        dispatch(setApplicationError(\"Applications not found\"));\n      }\n\n      done(null, res.data);\n    }).catch(function (error) {\n      dispatch(setApplicationError(\"Failed to fetch applications\"));\n      done(error);\n    });\n  };\n};\nexport var getApplicationById = function getApplicationById(applicationId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlgetApplication = replaceUrl(API.GET_APPLICATION, \"<application_id>\", applicationId);\n  return function (dispatch) {\n    //TODO remove the pageNo and limit currently its mandatory from api\n    httpGETRequest(apiUrlgetApplication).then(function (res) {\n      if (res.data && Object.keys(res.data).length) {\n        var application = res.data;\n        var processData = getFormattedProcess(application);\n        dispatch(setApplicationDetail(application));\n        dispatch(setApplicationProcess(processData));\n        dispatch(setApplicationDetailStatusCode(res.status));\n        done(null, application);\n      } else {\n        dispatch(serviceActionError(res));\n        dispatch(setApplicationDetail({}));\n        dispatch(setApplicationDetailStatusCode(403));\n        done('No data');\n        dispatch(setApplicationDetailLoader(false));\n      }\n\n      done(null, res.data);\n      dispatch(setApplicationDetailLoader(false));\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      dispatch(setApplicationDetail({}));\n      dispatch(setApplicationDetailStatusCode(403));\n      done(error);\n      dispatch(setApplicationDetailLoader(false));\n    });\n  };\n};\nexport var applicationCreate = function applicationCreate(data) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var URL = API.APPLICATION_START;\n  return function (dispatch) {\n    httpPOSTRequest(URL, data).then(function (res) {\n      if (res.data) {\n        done(null, res.data);\n      } else {\n        dispatch(serviceActionError(res));\n        done(\"Error Posting data\");\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var publicApplicationCreate = function publicApplicationCreate(data) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var URL = API.PUBLIC_APPLICATION_START;\n  return function (dispatch) {\n    httpPOSTRequestWithoutToken(URL, data).then(function (res) {\n      if (res.data) {\n        done(null, res.data);\n      } else {\n        dispatch(serviceActionError(res));\n        done(\"Error Posting data\");\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var publicApplicationStatus = function publicApplicationStatus(formId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var URL = \"\".concat(API.PUBLIC_APPLICATION_STATUS, \"/\").concat(formId);\n  return function (dispatch) {\n    httpGETRequest(URL).then(function (res) {\n      if (res.data) {\n        dispatch(setPublicFormStatus({\n          anonymous: res.data.is_anonymous,\n          status: res.data.status\n        }));\n        done(null, res.data);\n      } else {\n        dispatch(setPublicFormStatus(null));\n        dispatch(serviceActionError(res));\n        done(\"Error Fetching Data\");\n      }\n    }).catch(function (error) {\n      dispatch(setPublicFormStatus(null));\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var updateApplicationEvent = function updateApplicationEvent(data) {\n  /* * Data Format\r\n  {\r\n  \"messageName\" : \"application_resubmitted\",\r\n  \"processInstanceId\":\"a8dad78e-fa3b-11ea-a119-0242ac1f0003\"\r\n  }\r\n  * */\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    httpPOSTRequest(API.APPLICATION_EVENT_UPDATE, data).then(function (res) {\n      if (res.data) {\n        done(null, res.data);\n      } else {\n        dispatch(serviceActionError(res));\n        done(\"Error Posting data\");\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n}; // filter endpoint\n\nexport var FilterApplications = function FilterApplications(params) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    var _modified$filterVal;\n\n    var _params$filters = params.filters,\n        applicationName = _params$filters.applicationName,\n        id = _params$filters.id,\n        modified = _params$filters.modified,\n        applicationStatus = _params$filters.applicationStatus;\n    var url = \"\".concat(API.GET_ALL_APPLICATIONS, \"?pageNo=\").concat(params.page, \"&limit=\").concat(params.sizePerPage);\n\n    if (applicationName && applicationName !== \"\") {\n      url += \"&applicationName=\".concat(applicationName === null || applicationName === void 0 ? void 0 : applicationName.filterVal);\n    }\n\n    if (id && id !== \"\") {\n      url += \"&Id=\".concat(id.filterVal);\n    }\n\n    if (applicationStatus && applicationStatus !== \"\") {\n      url += \"&applicationStatus=\".concat(applicationStatus === null || applicationStatus === void 0 ? void 0 : applicationStatus.filterVal);\n    }\n\n    if (modified && (modified === null || modified === void 0 ? void 0 : (_modified$filterVal = modified.filterVal) === null || _modified$filterVal === void 0 ? void 0 : _modified$filterVal.length) === 2) {\n      var modifiedFrom = moment.utc(modified.filterVal[0]).format(\"YYYY-MM-DDTHH:mm:ssZ\").replace(\"+\", \"%2B\");\n      var modifiedTo = moment.utc(modified.filterVal[1]).format(\"YYYY-MM-DDTHH:mm:ssZ\").replace(\"+\", \"%2B\");\n      url += \"&modifiedFrom=\".concat(modifiedFrom, \"&modifiedTo=\").concat(modifiedTo);\n    }\n\n    if (params.sortField !== null) {\n      url += \"&sortBy=\".concat(params.sortField, \"&sortOrder=\").concat(params.sortOrder);\n    }\n\n    httpGETRequest(url).then(function (res) {\n      if (res.data) {\n        var applications = res.data.applications || [];\n        dispatch(setApplicationListCount(res.data.totalCount || 0));\n        dispatch(setApplicationList(applications));\n        done(null, applications);\n      } else {\n        dispatch(serviceActionError(res));\n      }\n\n      done(null, res.data);\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\n_c = FilterApplications;\nexport var getAllApplicationStatus = function getAllApplicationStatus(params) {\n  //console.log(\"hai\",params)\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    //TODO remove the pageNo and limit currently its mandatory from api\n    //`${API.GET_ALL_APPLICATIONS}?pageNo=${pageNo}&limit=${limit}`\n    httpGETRequest(\"\".concat(API.GET_ALL_APPLICATIONS_STATUS)).then(function (res) {\n      if (res.data) {\n        dispatch(setApplicationStatusList(res.data.applicationStatus)); //done(null, applications);\n      } else {\n        dispatch(setApplicationError(\"Application status not found\"));\n      }\n\n      done(null, res.data);\n    }).catch(function (error) {\n      dispatch(setApplicationError(\"Failed to fetch application status\"));\n      done(error);\n    });\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterApplications\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/apiManager/services/applicationServices.js"],"names":["httpGETRequest","httpPOSTRequest","httpPOSTRequestWithoutToken","API","setApplicationListByFormId","serviceActionError","setApplicationList","setApplicationDetail","setApplicationDetailLoader","setApplicationProcess","setApplicationListCount","setApplicationDetailStatusCode","setApplicationStatusList","setApplicationError","replaceUrl","moment","getFormattedProcess","setPublicFormStatus","getAllApplicationsByFormId","formId","done","dispatch","GET_ALL_APPLICATIONS_FROM_FORM_ID","then","res","data","applications","console","log","catch","error","getAllApplications","pageNo","limit","GET_ALL_APPLICATIONS","totalCount","getApplicationById","applicationId","apiUrlgetApplication","GET_APPLICATION","Object","keys","length","application","processData","status","applicationCreate","URL","APPLICATION_START","publicApplicationCreate","PUBLIC_APPLICATION_START","publicApplicationStatus","PUBLIC_APPLICATION_STATUS","anonymous","is_anonymous","updateApplicationEvent","APPLICATION_EVENT_UPDATE","FilterApplications","params","filters","applicationName","id","modified","applicationStatus","url","page","sizePerPage","filterVal","modifiedFrom","utc","format","replace","modifiedTo","sortField","sortOrder","getAllApplicationStatus","GET_ALL_APPLICATIONS_STATUS"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport {httpGETRequest, httpPOSTRequest,httpPOSTRequestWithoutToken} from \"../httpRequestHandler\";\r\nimport API from \"../endpoints\";\r\nimport {\r\n  setApplicationListByFormId,\r\n  serviceActionError,\r\n  setApplicationList,\r\n  setApplicationDetail,\r\n  setApplicationDetailLoader,\r\n  setApplicationProcess, setApplicationListCount, setApplicationDetailStatusCode, setApplicationStatusList,setApplicationError\r\n} from \"../../actions/applicationActions\";\r\nimport {replaceUrl} from \"../../helper/helper\";\r\nimport moment from 'moment';\r\nimport {getFormattedProcess} from \"./formatterService\";\r\nimport {setPublicFormStatus} from '../../actions/formActions';\r\n\r\nexport const getAllApplicationsByFormId = (formId,...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    //TODO remove the pageNo and limit currently its mandatory from api\r\n    httpGETRequest(`${API.GET_ALL_APPLICATIONS_FROM_FORM_ID}/${formId}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          const applications = res.data.applications || [];\r\n          dispatch(setApplicationListByFormId(applications));\r\n          done(null, applications);\r\n        } else {\r\n          console.log(\"Error\", res);\r\n          dispatch(serviceActionError(res));\r\n        }\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const getAllApplications = (pageNo=1, limit=5,...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    //TODO remove the pageNo and limit currently its mandatory from api\r\n    //`${API.GET_ALL_APPLICATIONS}?pageNo=${pageNo}&limit=${limit}`\r\n    httpGETRequest(`${API.GET_ALL_APPLICATIONS}?pageNo=${pageNo}&limit=${limit}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          const applications = res.data.applications || [];\r\n          dispatch(setApplicationListCount(res.data.totalCount || 0))\r\n          dispatch(setApplicationList(applications));\r\n          done(null, applications);\r\n        } else {\r\n          dispatch(setApplicationError(\"Applications not found\"));\r\n        }\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setApplicationError(\"Failed to fetch applications\"));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const getApplicationById = (applicationId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlgetApplication = replaceUrl(\r\n    API.GET_APPLICATION,\r\n    \"<application_id>\",\r\n    applicationId\r\n  );\r\n  return (dispatch) => {\r\n    //TODO remove the pageNo and limit currently its mandatory from api\r\n    httpGETRequest(apiUrlgetApplication)\r\n      .then((res) => {\r\n        if (res.data && Object.keys(res.data).length) {\r\n          const application = res.data;\r\n          const processData = getFormattedProcess(application);\r\n          dispatch(setApplicationDetail(application));\r\n          dispatch(setApplicationProcess(processData));\r\n          dispatch(setApplicationDetailStatusCode(res.status));\r\n          done(null, application);\r\n        } else {\r\n          dispatch(serviceActionError(res));\r\n          dispatch(setApplicationDetail({}));\r\n          dispatch(setApplicationDetailStatusCode(403));\r\n          done('No data');\r\n          dispatch(setApplicationDetailLoader(false));\r\n        }\r\n        done(null, res.data);\r\n        dispatch(setApplicationDetailLoader(false));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setApplicationDetail({}));\r\n        dispatch(setApplicationDetailStatusCode(403));\r\n        done(error);\r\n        dispatch(setApplicationDetailLoader(false));\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const applicationCreate = (data, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const URL = API.APPLICATION_START;\r\n  return (dispatch) => {\r\n    httpPOSTRequest(URL, data)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          done(null, res.data);\r\n        } else {\r\n          dispatch(serviceActionError(res));\r\n          done(\"Error Posting data\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const publicApplicationCreate = (data, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const URL = API.PUBLIC_APPLICATION_START;\r\n  return (dispatch) => {\r\n    httpPOSTRequestWithoutToken(URL, data)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          done(null, res.data);\r\n        } else {\r\n          dispatch(serviceActionError(res));\r\n          done(\"Error Posting data\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const publicApplicationStatus = (formId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const URL = `${API.PUBLIC_APPLICATION_STATUS}/${formId}`;\r\n  return (dispatch) => {\r\n    httpGETRequest(URL)\r\n      .then((res) => {\r\n        if (res.data) {\r\n            dispatch(setPublicFormStatus({anonymous:res.data.is_anonymous,status:res.data.status}));\r\n            done(null, res.data);\r\n        } else {\r\n          dispatch(setPublicFormStatus(null));\r\n          dispatch(serviceActionError(res));\r\n          done(\"Error Fetching Data\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setPublicFormStatus(null));\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const updateApplicationEvent = (data,...rest) => {\r\n  /* * Data Format\r\n {\r\n  \"messageName\" : \"application_resubmitted\",\r\n  \"processInstanceId\":\"a8dad78e-fa3b-11ea-a119-0242ac1f0003\"\r\n}\r\n* */\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    httpPOSTRequest(API.APPLICATION_EVENT_UPDATE, data)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          done(null, res.data);\r\n        } else {\r\n          dispatch(serviceActionError(res));\r\n          done(\"Error Posting data\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n// filter endpoint\r\n\r\nexport const FilterApplications = (params,...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch)=>{\r\n    const {applicationName,id,modified,applicationStatus} = params.filters;\r\n    let url =`${API.GET_ALL_APPLICATIONS}?pageNo=${params.page}&limit=${params.sizePerPage}`;\r\n    if(applicationName && applicationName !==\"\"){\r\n      url+=`&applicationName=${applicationName?.filterVal}`\r\n    }\r\n    if(id && id !==\"\"){\r\n      url+=`&Id=${id.filterVal}`\r\n    }\r\n\r\n    if(applicationStatus && applicationStatus !==\"\"){\r\n      url+=`&applicationStatus=${applicationStatus?.filterVal}`\r\n    }\r\n\r\n    if(modified && modified?.filterVal?.length === 2){\r\n      let modifiedFrom = moment.utc(modified.filterVal[0]).format(\"YYYY-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\r\n      let modifiedTo = moment.utc(modified.filterVal[1]).format(\"YYYY-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\r\n      url+=`&modifiedFrom=${modifiedFrom}&modifiedTo=${modifiedTo}`\r\n  }\r\n\r\n    if(params.sortField !== null){\r\n      url+=`&sortBy=${params.sortField}&sortOrder=${params.sortOrder}`\r\n    }\r\n\r\n    httpGETRequest(url)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          const applications = res.data.applications || [];\r\n          dispatch(setApplicationListCount(res.data.totalCount || 0))\r\n          dispatch(setApplicationList(applications));\r\n          done(null, applications);\r\n        } else {\r\n          dispatch(serviceActionError(res));\r\n        }\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  }\r\n};\r\n\r\nexport const getAllApplicationStatus = (params,...rest) => {\r\n  //console.log(\"hai\",params)\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    //TODO remove the pageNo and limit currently its mandatory from api\r\n    //`${API.GET_ALL_APPLICATIONS}?pageNo=${pageNo}&limit=${limit}`\r\n    httpGETRequest(`${API.GET_ALL_APPLICATIONS_STATUS}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setApplicationStatusList(res.data.applicationStatus))\r\n          //done(null, applications);\r\n        } else {\r\n          dispatch(setApplicationError(\"Application status not found\"));\r\n        }\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setApplicationError(\"Failed to fetch application status\"));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}