{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\n\n/* istanbul ignore file */\nimport { httpGETRequest, httpPOSTRequest, httpPUTRequest, httpPOSTRequestWithHAL } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport UserService from \"../../services/UserService\";\nimport { setBPMTaskLoader, setBPMTaskList, serviceActionError, setBPMTaskDetailLoader, setBPMTaskDetail, setBPMProcessList, setBPMUserList, setBPMTaskDetailUpdating, setBPMFilterList, setBPMFilterLoader, updateBPMTaskGroups, setBPMTaskGroupsLoading, setBPMTaskCount } from \"../../actions/bpmTaskActions\";\nimport { replaceUrl } from \"../../helper/helper\";\nimport axios from \"axios\";\nimport { taskDetailVariableDataFormatter } from \"./formatterService\";\nimport { REVIEWER_GROUP } from \"../../constants/userContants\";\nimport { MAX_RESULTS } from \"../../components/ServiceFlow/constants/taskConstants\";\nexport var fetchServiceTaskList = function fetchServiceTaskList(filterId, firstResult, reqData, taskIdToRemove) {\n  var done = (arguments.length <= 4 ? 0 : arguments.length - 4) ? arguments.length <= 4 ? undefined : arguments[4] : function () {};\n  var apiUrlgetTaskList = replaceUrl(API.GET_BPM_TASK_LIST_WITH_FILTER, \"<filter_id>\", filterId);\n  apiUrlgetTaskList = \"\".concat(apiUrlgetTaskList, \"?firstResult=\").concat(firstResult, \"&maxResults=\").concat(MAX_RESULTS);\n  return function (dispatch) {\n    httpPOSTRequestWithHAL(apiUrlgetTaskList, reqData, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        var responseData = res.data;\n        var _embedded = responseData['_embedded']; // data._embedded.task is where the task list is.\n\n        if (!_embedded || !_embedded['task'] || !responseData['count']) {\n          // Display error if the necessary values are unavailable.\n          // console.log(\"Error\", res);\n          dispatch(setBPMTaskList([]));\n          dispatch(setBPMTaskCount(0));\n          dispatch(serviceActionError(res));\n          dispatch(setBPMTaskLoader(false));\n        } else {\n          var taskListFromResponse = _embedded['task']; // Gets the task array\n\n          var taskCount = {\n            count: responseData['count']\n          };\n          var taskData = taskListFromResponse;\n\n          if (taskIdToRemove) {\n            // console.log(\"task----\",taskIdToRemove);\n            //if the list has the task with taskIdToRemove remove that task and decrement\n            if (taskListFromResponse.find(function (task) {\n              return task.id === taskIdToRemove;\n            })) {\n              taskData = taskListFromResponse.filter(function (task) {\n                return task.id !== taskIdToRemove;\n              });\n              taskCount['count']--; // Count has to be decreased since one task id is removed.\n            }\n          }\n\n          dispatch(setBPMTaskCount(taskCount));\n          dispatch(setBPMTaskList(taskData));\n          dispatch(setBPMTaskLoader(false));\n          done(null, taskData);\n        }\n      } else {\n        // console.log(\"Error\", res);\n        dispatch(setBPMTaskList([]));\n        dispatch(setBPMTaskCount(0));\n        dispatch(serviceActionError(res));\n        dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      // console.log(\"Error\", error);\n      dispatch(setBPMTaskList([]));\n      dispatch(setBPMTaskCount(0));\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskLoader(false));\n      done(error);\n    });\n  };\n};\nexport var fetchProcessDefinitionList = function fetchProcessDefinitionList() {\n  var done = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : function () {};\n  return function (dispatch) {\n    httpGETRequest(API.GET_BPM_PROCESS_LIST, {}, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        dispatch(setBPMProcessList(res.data)); //dispatch(setBPMLoader(false));\n\n        done(null, res.data);\n      } else {\n        console.log(\"Error\", res);\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};\nexport var fetchUserList = function fetchUserList() {\n  var done = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : function () {};\n  /*TODO search with query /user?lastNameLike=%${lastName}%&memberOfGroup=${group}*/\n\n  var getReviewerUserListApi = \"\".concat(API.GET_BPM_USER_LIST, \"?memberOfGroup=\").concat(REVIEWER_GROUP);\n  return function (dispatch) {\n    httpGETRequest(getReviewerUserListApi, {}, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        dispatch(setBPMUserList(res.data)); //dispatch(setBPMLoader(false));\n\n        done(null, res.data);\n      } else {\n        console.log(\"Error\", res);\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};\nexport var fetchUserListWithSearch = function fetchUserListWithSearch(_ref) {\n  var searchType = _ref.searchType,\n      query = _ref.query;\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var paramData = {\n    memberOfGroup: REVIEWER_GROUP\n  };\n  /*TODO search with query /user?lastNameLike=%${lastName}%&memberOfGroup=${group}*/\n  //let getReviewerUserListApi = `${API.GET_BPM_USER_LIST}?memberOfGroup=${REVIEWER_GROUP}`;\n\n  if (searchType && query) {\n    //getReviewerUserListApi = `${getReviewerUserListApi}&${searchType}=%${query||\"\"}%`\n    paramData[searchType] = \"%\".concat(query, \"%\");\n  }\n\n  return function (dispatch) {\n    httpGETRequest(API.GET_BPM_USER_LIST, paramData, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        dispatch(setBPMUserList(res.data)); //dispatch(setBPMLoader(false));\n\n        done(null, res.data);\n      } else {\n        done(null, []);\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};\nexport var fetchFilterList = function fetchFilterList() {\n  var done = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : function () {};\n  var getTaskFiltersAPI = \"\".concat(API.GET_BPM_FILTERS, \"?resourceType=Task&itemCount=true\");\n  return function (dispatch) {\n    httpGETRequest(getTaskFiltersAPI, {}, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        dispatch(setBPMFilterList(res.data));\n        dispatch(setBPMFilterLoader(false)); //dispatch(setBPMLoader(false));\n\n        done(null, res.data);\n      } else {\n        console.log(\"Error\", res);\n        dispatch(setBPMFilterLoader(false));\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(setBPMFilterLoader(false));\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};\nexport var getBPMTaskDetail = function getBPMTaskDetail(taskId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlgetTaskDetail = replaceUrl(API.GET_BPM_TASK_DETAIL, \"<task_id>\", taskId);\n  var apiUrlgetTaskVariables = replaceUrl(API.GET_BPM_TASK_VARIABLES, \"<task_id>\", taskId);\n  var taskDetailReq = httpGETRequest(apiUrlgetTaskDetail);\n  var taskDetailsWithVariableReq = httpGETRequest(apiUrlgetTaskVariables);\n  return function (dispatch) {\n    axios.all([taskDetailReq, taskDetailsWithVariableReq]).then(axios.spread(function () {\n      var _responses$;\n\n      for (var _len = arguments.length, responses = new Array(_len), _key = 0; _key < _len; _key++) {\n        responses[_key] = arguments[_key];\n      }\n\n      if ((_responses$ = responses[0]) !== null && _responses$ !== void 0 && _responses$.data) {\n        var _responses$2;\n\n        var taskDetail = responses[0].data;\n\n        if ((_responses$2 = responses[1]) !== null && _responses$2 !== void 0 && _responses$2.data) {\n          var _responses$3;\n\n          var taskDetailUpdates = (_responses$3 = responses[1]) === null || _responses$3 === void 0 ? void 0 : _responses$3.data;\n          taskDetail = _objectSpread(_objectSpread({}, taskDetail), taskDetailVariableDataFormatter(taskDetailUpdates));\n        }\n\n        dispatch(setBPMTaskDetail(taskDetail));\n        dispatch(setBPMTaskDetailLoader(false));\n        dispatch(setBPMTaskDetailUpdating(false));\n        done(null, taskDetail);\n      }\n    })).catch(function (error) {\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskDetailLoader(false));\n      dispatch(setBPMTaskDetailUpdating(false));\n      done(error);\n    });\n  };\n};\nexport var getBPMGroups = function getBPMGroups(taskId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlgetGroups = replaceUrl(API.BPM_GROUP, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpGETRequest(\"\".concat(apiUrlgetGroups, \"?type=candidate\")).then(function (responses) {\n      if (responses !== null && responses !== void 0 && responses.data) {\n        var groups = responses.data;\n        dispatch(updateBPMTaskGroups(groups));\n        done(null, groups);\n      } else {\n        dispatch(setBPMTaskGroupsLoading(false));\n        done(null, []);\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskGroupsLoading(false));\n      done(error);\n    });\n  };\n};\nexport var removeBPMGroup = function removeBPMGroup(taskId, group) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var apiUrlDeleteGroup = replaceUrl(API.DELETE_BPM_GROUP, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlDeleteGroup, group).then(function (responses) {\n      if (responses !== null && responses !== void 0 && responses.data) {\n        dispatch(setBPMTaskDetailLoader(false));\n        dispatch(setBPMTaskDetailUpdating(false));\n        done(null, responses === null || responses === void 0 ? void 0 : responses.data);\n      } else {\n        dispatch(setBPMTaskDetailLoader(false));\n        dispatch(setBPMTaskDetailUpdating(false));\n        done(null, []);\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskDetailLoader(false));\n      dispatch(setBPMTaskDetailUpdating(false));\n      done(error);\n    });\n  };\n};\nexport var addBPMGroup = function addBPMGroup(taskId, group) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var apiUrlAddGroup = replaceUrl(API.BPM_GROUP, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlAddGroup, group).then(function (responses) {\n      if (responses !== null && responses !== void 0 && responses.data) {\n        dispatch(setBPMTaskDetailLoader(false));\n        dispatch(setBPMTaskDetailUpdating(false));\n        done(null, responses === null || responses === void 0 ? void 0 : responses.data);\n      } else {\n        dispatch(setBPMTaskDetailLoader(false));\n        dispatch(setBPMTaskDetailUpdating(false));\n        done(null, []);\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskDetailLoader(false));\n      dispatch(setBPMTaskDetailUpdating(false));\n      done(error);\n    });\n  };\n};\nexport var claimBPMTask = function claimBPMTask(taskId, user) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var apiUrlClaimTask = replaceUrl(API.CLAIM_BPM_TASK, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlClaimTask, {\n      userId: user\n    }).then(function (res) {\n      done(null, res.data);\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskDetailUpdating(false));\n      done(error);\n    });\n  };\n};\nexport var updateAssigneeBPMTask = function updateAssigneeBPMTask(taskId, user) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var apiUrlClaimTask = replaceUrl(API.UPDATE_ASSIGNEE_BPM_TASK, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlClaimTask, {\n      userId: user\n    }).then(function (res) {\n      done(null, res.data);\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      dispatch(setBPMTaskDetailUpdating(false));\n      done(error);\n    });\n  };\n};\nexport var updateBPMTask = function updateBPMTask(taskId, task) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var taskDetailAPI = replaceUrl(API.GET_BPM_TASK_DETAIL, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPUTRequest(taskDetailAPI, task).then(function (res) {\n      // if (res.status === 200) {\n      //TODO REMOVE\n      done(null, res.data); // }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var unClaimBPMTask = function unClaimBPMTask(taskId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlUnClaimTask = replaceUrl(API.UNCLAIM_BPM_TASK, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlUnClaimTask).then(function (res) {\n      // if (res.status === 204) {\n      //TODO REMOVE\n      done(null, res.data); // }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};\nexport var onBPMTaskFormSubmit = function onBPMTaskFormSubmit(taskId, formReq) {\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  var apiUrlOnFormSubmit = replaceUrl(API.BPM_FORM_SUBMIT, \"<task_id>\", taskId);\n  return function (dispatch) {\n    httpPOSTRequest(apiUrlOnFormSubmit, formReq).then(function (res) {\n      // if (res.status === 204) {\n      //TODO REMOVE\n      done(null, res.data); // }\n    }).catch(function (error) {\n      console.log(\"Error\", error);\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/apiManager/services/bpmTaskServices.js"],"names":["httpGETRequest","httpPOSTRequest","httpPUTRequest","httpPOSTRequestWithHAL","API","UserService","setBPMTaskLoader","setBPMTaskList","serviceActionError","setBPMTaskDetailLoader","setBPMTaskDetail","setBPMProcessList","setBPMUserList","setBPMTaskDetailUpdating","setBPMFilterList","setBPMFilterLoader","updateBPMTaskGroups","setBPMTaskGroupsLoading","setBPMTaskCount","replaceUrl","axios","taskDetailVariableDataFormatter","REVIEWER_GROUP","MAX_RESULTS","fetchServiceTaskList","filterId","firstResult","reqData","taskIdToRemove","done","apiUrlgetTaskList","GET_BPM_TASK_LIST_WITH_FILTER","dispatch","getToken","then","res","data","responseData","_embedded","taskListFromResponse","taskCount","count","taskData","find","task","id","filter","catch","error","fetchProcessDefinitionList","length","GET_BPM_PROCESS_LIST","console","log","fetchUserList","getReviewerUserListApi","GET_BPM_USER_LIST","fetchUserListWithSearch","searchType","query","paramData","memberOfGroup","fetchFilterList","getTaskFiltersAPI","GET_BPM_FILTERS","getBPMTaskDetail","taskId","apiUrlgetTaskDetail","GET_BPM_TASK_DETAIL","apiUrlgetTaskVariables","GET_BPM_TASK_VARIABLES","taskDetailReq","taskDetailsWithVariableReq","all","spread","responses","taskDetail","taskDetailUpdates","getBPMGroups","apiUrlgetGroups","BPM_GROUP","groups","removeBPMGroup","group","apiUrlDeleteGroup","DELETE_BPM_GROUP","addBPMGroup","apiUrlAddGroup","claimBPMTask","user","apiUrlClaimTask","CLAIM_BPM_TASK","userId","updateAssigneeBPMTask","UPDATE_ASSIGNEE_BPM_TASK","updateBPMTask","taskDetailAPI","unClaimBPMTask","apiUrlUnClaimTask","UNCLAIM_BPM_TASK","onBPMTaskFormSubmit","formReq","apiUrlOnFormSubmit","BPM_FORM_SUBMIT"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport {httpGETRequest, httpPOSTRequest, httpPUTRequest, httpPOSTRequestWithHAL } from \"../httpRequestHandler\";\r\nimport API from \"../endpoints\";\r\nimport UserService from \"../../services/UserService\";\r\nimport {\r\n  setBPMTaskLoader,\r\n  setBPMTaskList,\r\n  serviceActionError,\r\n  setBPMTaskDetailLoader,\r\n  setBPMTaskDetail,\r\n  setBPMProcessList,\r\n  setBPMUserList,\r\n  setBPMTaskDetailUpdating,\r\n  setBPMFilterList, setBPMFilterLoader, updateBPMTaskGroups, setBPMTaskGroupsLoading, setBPMTaskCount\r\n} from \"../../actions/bpmTaskActions\";\r\nimport {replaceUrl} from \"../../helper/helper\";\r\nimport axios from \"axios\";\r\nimport {taskDetailVariableDataFormatter} from \"./formatterService\";\r\nimport {REVIEWER_GROUP} from \"../../constants/userContants\";\r\nimport {MAX_RESULTS} from \"../../components/ServiceFlow/constants/taskConstants\";\r\n\r\nexport const fetchServiceTaskList = (filterId,firstResult,reqData,taskIdToRemove,...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  let apiUrlgetTaskList = replaceUrl(\r\n    API.GET_BPM_TASK_LIST_WITH_FILTER,\r\n    \"<filter_id>\",\r\n    filterId\r\n  );\r\n\r\n  apiUrlgetTaskList=`${apiUrlgetTaskList}?firstResult=${firstResult}&maxResults=${MAX_RESULTS}`\r\n\r\n  return (dispatch) => {\r\n    httpPOSTRequestWithHAL(apiUrlgetTaskList, reqData, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          let responseData = res.data;\r\n          const _embedded = responseData['_embedded']; // data._embedded.task is where the task list is.\r\n          if (!_embedded || !_embedded['task'] || !responseData['count']) {\r\n            // Display error if the necessary values are unavailable.\r\n            // console.log(\"Error\", res);\r\n            dispatch(setBPMTaskList([]));\r\n            dispatch(setBPMTaskCount(0));\r\n            dispatch(serviceActionError(res));\r\n            dispatch(setBPMTaskLoader(false));\r\n          } else {\r\n            const taskListFromResponse = _embedded['task']; // Gets the task array\r\n            const taskCount = {\r\n              count: responseData['count']\r\n            };\r\n            let taskData = taskListFromResponse;\r\n            if(taskIdToRemove){\r\n              // console.log(\"task----\",taskIdToRemove);\r\n              //if the list has the task with taskIdToRemove remove that task and decrement\r\n              if(taskListFromResponse.find((task)=>task.id===taskIdToRemove)){\r\n                taskData=taskListFromResponse.filter( (task)=>task.id!==taskIdToRemove);\r\n                taskCount['count']--; // Count has to be decreased since one task id is removed.\r\n              }\r\n            }\r\n            dispatch(setBPMTaskCount(taskCount));\r\n            dispatch(setBPMTaskList(taskData));\r\n            dispatch(setBPMTaskLoader(false));\r\n            done(null, taskData);\r\n          }\r\n        } else {\r\n          // console.log(\"Error\", res);\r\n          dispatch(setBPMTaskList([]));\r\n          dispatch(setBPMTaskCount(0));\r\n          dispatch(serviceActionError(res));\r\n          dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.log(\"Error\", error);\r\n        dispatch(setBPMTaskList([]));\r\n        dispatch(setBPMTaskCount(0));\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchProcessDefinitionList = (...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    httpGETRequest(API.GET_BPM_PROCESS_LIST, {}, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setBPMProcessList(res.data));\r\n          //dispatch(setBPMLoader(false));\r\n          done(null, res.data);\r\n        } else {\r\n          console.log(\"Error\", res);\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUserList = (...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  /*TODO search with query /user?lastNameLike=%${lastName}%&memberOfGroup=${group}*/\r\n  const getReviewerUserListApi = `${API.GET_BPM_USER_LIST}?memberOfGroup=${REVIEWER_GROUP}`;\r\n  return (dispatch) => {\r\n    httpGETRequest(getReviewerUserListApi, {}, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setBPMUserList(res.data));\r\n          //dispatch(setBPMLoader(false));\r\n          done(null, res.data);\r\n        } else {\r\n          console.log(\"Error\", res);\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUserListWithSearch = ({searchType,query},...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const paramData={memberOfGroup:REVIEWER_GROUP};\r\n  /*TODO search with query /user?lastNameLike=%${lastName}%&memberOfGroup=${group}*/\r\n  //let getReviewerUserListApi = `${API.GET_BPM_USER_LIST}?memberOfGroup=${REVIEWER_GROUP}`;\r\n  if(searchType && query){\r\n    //getReviewerUserListApi = `${getReviewerUserListApi}&${searchType}=%${query||\"\"}%`\r\n    paramData[searchType]=`%${query}%`;\r\n  }\r\n\r\n  return (dispatch) => {\r\n    httpGETRequest(API.GET_BPM_USER_LIST, paramData, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setBPMUserList(res.data));\r\n          //dispatch(setBPMLoader(false));\r\n          done(null, res.data);\r\n        } else {\r\n          done(null, []);\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchFilterList = (...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const getTaskFiltersAPI = `${API.GET_BPM_FILTERS}?resourceType=Task&itemCount=true`\r\n  return (dispatch) => {\r\n    httpGETRequest(getTaskFiltersAPI, {}, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setBPMFilterList(res.data));\r\n          dispatch(setBPMFilterLoader(false));\r\n          //dispatch(setBPMLoader(false));\r\n          done(null, res.data);\r\n        } else {\r\n          console.log(\"Error\", res);\r\n          dispatch(setBPMFilterLoader(false));\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(setBPMFilterLoader(false));\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const getBPMTaskDetail = (taskId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlgetTaskDetail = replaceUrl(\r\n    API.GET_BPM_TASK_DETAIL,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n\r\n  const apiUrlgetTaskVariables = replaceUrl(\r\n    API.GET_BPM_TASK_VARIABLES,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n\r\n  const taskDetailReq =   httpGETRequest(apiUrlgetTaskDetail);\r\n  const taskDetailsWithVariableReq =   httpGETRequest(apiUrlgetTaskVariables);\r\n\r\n  return (dispatch) => {\r\n    axios.all([taskDetailReq,taskDetailsWithVariableReq])\r\n      .then(axios.spread(\r\n        (...responses) => {\r\n        if (responses[0]?.data) {\r\n          let taskDetail=responses[0].data;\r\n          if(responses[1]?.data){\r\n            let taskDetailUpdates = responses[1]?.data;\r\n            taskDetail = {...taskDetail,...taskDetailVariableDataFormatter(taskDetailUpdates)};\r\n          }\r\n\r\n          dispatch(setBPMTaskDetail(taskDetail));\r\n          dispatch(setBPMTaskDetailLoader(false));\r\n          dispatch(setBPMTaskDetailUpdating(false));\r\n          done(null, taskDetail);\r\n        }\r\n      }))\r\n      .catch((error) => {\r\n         dispatch(serviceActionError(error));\r\n         dispatch(setBPMTaskDetailLoader(false));\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const getBPMGroups = (taskId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n\r\n  const apiUrlgetGroups = replaceUrl(\r\n    API.BPM_GROUP,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n\r\n  return (dispatch) => {\r\n    httpGETRequest(`${apiUrlgetGroups}?type=candidate`)\r\n      .then(responses => {\r\n            if (responses?.data){\r\n              const groups = responses.data;\r\n              dispatch(updateBPMTaskGroups(groups));\r\n              done(null, groups);\r\n            }else{\r\n              dispatch(setBPMTaskGroupsLoading(false));\r\n              done(null,[]);\r\n            }\r\n          }\r\n        )\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskGroupsLoading(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const removeBPMGroup = (taskId, group, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n\r\n  const apiUrlDeleteGroup = replaceUrl(\r\n    API.DELETE_BPM_GROUP,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlDeleteGroup, group)\r\n      .then(responses => {\r\n          if (responses?.data){\r\n            dispatch(setBPMTaskDetailLoader(false));\r\n            dispatch(setBPMTaskDetailUpdating(false));\r\n            done(null, responses?.data);\r\n          }else{\r\n            dispatch(setBPMTaskDetailLoader(false));\r\n            dispatch(setBPMTaskDetailUpdating(false));\r\n            done(null,[]);\r\n          }\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskDetailLoader(false));\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const addBPMGroup = (taskId, group, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n\r\n  const apiUrlAddGroup = replaceUrl(\r\n    API.BPM_GROUP,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlAddGroup, group)\r\n      .then(responses => {\r\n          if (responses?.data){\r\n            dispatch(setBPMTaskDetailLoader(false));\r\n            dispatch(setBPMTaskDetailUpdating(false));\r\n            done(null, responses?.data);\r\n          }else{\r\n            dispatch(setBPMTaskDetailLoader(false));\r\n            dispatch(setBPMTaskDetailUpdating(false));\r\n            done(null,[]);\r\n          }\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskDetailLoader(false));\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const claimBPMTask = (taskId, user, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlClaimTask = replaceUrl(\r\n    API.CLAIM_BPM_TASK,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlClaimTask, { userId: user })\r\n      .then((res) => {\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const updateAssigneeBPMTask = (taskId, user, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlClaimTask = replaceUrl(\r\n    API.UPDATE_ASSIGNEE_BPM_TASK,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlClaimTask, { userId: user })\r\n      .then((res) => {\r\n        done(null, res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const updateBPMTask = (taskId, task, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const taskDetailAPI = replaceUrl(\r\n    API.GET_BPM_TASK_DETAIL,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n  return (dispatch) => {\r\n    httpPUTRequest(taskDetailAPI, task)\r\n      .then((res) => {\r\n        // if (res.status === 200) {\r\n        //TODO REMOVE\r\n        done(null, res.data);\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const unClaimBPMTask = (taskId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlUnClaimTask = replaceUrl(\r\n    API.UNCLAIM_BPM_TASK,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlUnClaimTask)\r\n      .then((res) => {\r\n        // if (res.status === 204) {\r\n        //TODO REMOVE\r\n        done(null, res.data);\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const onBPMTaskFormSubmit = (taskId, formReq, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  const apiUrlOnFormSubmit = replaceUrl(\r\n    API.BPM_FORM_SUBMIT,\r\n    \"<task_id>\",\r\n    taskId\r\n  );\r\n  return (dispatch) => {\r\n    httpPOSTRequest(apiUrlOnFormSubmit,formReq)\r\n      .then((res) => {\r\n        // if (res.status === 204) {\r\n        //TODO REMOVE\r\n        done(null, res.data);\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}