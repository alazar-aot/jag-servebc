{"ast":null,"code":"/* istanbul ignore file */\nimport { httpGETRequest } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport UserService from \"../../services/UserService\";\nimport { serviceActionError } from \"../../actions/bpmTaskActions\";\nimport { setBPMFormList, setBPMFormListLoading } from \"../../actions/formActions\";\nimport { replaceUrl } from \"../../helper/helper\";\nexport var fetchBPMFormList = function fetchBPMFormList() {\n  var done = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : function () {};\n  return function (dispatch) {\n    httpGETRequest(API.GET_BPM_FORM_LIST, {}, UserService.getToken()).then(function (res) {\n      if (res.data) {\n        dispatch(setBPMFormList(res.data));\n        dispatch(setBPMFormListLoading(false)); //dispatch(setBPMLoader(false));\n\n        done(null, res.data);\n      } else {\n        dispatch(setBPMFormListLoading(false)); //console.log(\"Error\", res);\n\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      //console.log(\"Error\", error);\n      dispatch(setBPMFormListLoading(false));\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};\nexport var fetchFormByAlias = function fetchFormByAlias(path) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlGetFormByAlias = replaceUrl(API.GET_FORM_BY_ALIAS, \"<form_path>\", path);\n  return function (dispatch) {\n    httpGETRequest(apiUrlGetFormByAlias, {}, '', false, {\n      'x-jwt-token': UserService.getFormioToken()\n    }).then(function (res) {\n      //console.log(\"formData\",res);\n      if (res.data) {\n        done(null, res.data);\n      } else {\n        //console.log(\"Error\", res);\n        dispatch(serviceActionError(res)); //dispatch(setBPMTaskLoader(false));\n      }\n    }).catch(function (error) {\n      //console.log(\"Error\", error);\n      dispatch(serviceActionError(error)); //dispatch(setBPMTaskLoader(false));\n\n      done(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/apiManager/services/bpmFormServices.js"],"names":["httpGETRequest","API","UserService","serviceActionError","setBPMFormList","setBPMFormListLoading","replaceUrl","fetchBPMFormList","done","length","dispatch","GET_BPM_FORM_LIST","getToken","then","res","data","catch","error","fetchFormByAlias","path","apiUrlGetFormByAlias","GET_FORM_BY_ALIAS","getFormioToken"],"mappings":"AAAC;AACD,SAAQA,cAAR,QAA6B,uBAA7B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SACEC,kBADF,QAEO,8BAFP;AAIA,SAAQC,cAAR,EAAwBC,qBAAxB,QAAoD,2BAApD;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAa;AAC3C,MAAMC,IAAI,GAAG,UAAKC,MAAL,sDAAwB,YAAM,CAAE,CAA7C;AACA,SAAO,UAACC,QAAD,EAAc;AACnBV,IAAAA,cAAc,CAACC,GAAG,CAACU,iBAAL,EAAwB,EAAxB,EAA4BT,WAAW,CAACU,QAAZ,EAA5B,CAAd,CACGC,IADH,CACQ,UAACC,GAAD,EAAS;AACb,UAAIA,GAAG,CAACC,IAAR,EAAc;AACZL,QAAAA,QAAQ,CAACN,cAAc,CAACU,GAAG,CAACC,IAAL,CAAf,CAAR;AACAL,QAAAA,QAAQ,CAACL,qBAAqB,CAAC,KAAD,CAAtB,CAAR,CAFY,CAGZ;;AACAG,QAAAA,IAAI,CAAC,IAAD,EAAOM,GAAG,CAACC,IAAX,CAAJ;AACD,OALD,MAKO;AACLL,QAAAA,QAAQ,CAACL,qBAAqB,CAAC,KAAD,CAAtB,CAAR,CADK,CAEL;;AACAK,QAAAA,QAAQ,CAACP,kBAAkB,CAACW,GAAD,CAAnB,CAAR,CAHK,CAIL;AACD;AACF,KAbH,EAcGE,KAdH,CAcS,UAACC,KAAD,EAAW;AAChB;AACAP,MAAAA,QAAQ,CAACL,qBAAqB,CAAC,KAAD,CAAtB,CAAR;AACAK,MAAAA,QAAQ,CAACP,kBAAkB,CAACc,KAAD,CAAnB,CAAR,CAHgB,CAIhB;;AACAT,MAAAA,IAAI,CAACS,KAAD,CAAJ;AACD,KApBH;AAqBD,GAtBD;AAuBD,CAzBM;AA4BP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAkB;AAChD,MAAMX,IAAI,GAAG,wGAAwB,YAAM,CAAE,CAA7C;AAEA,MAAMY,oBAAoB,GAAGd,UAAU,CACrCL,GAAG,CAACoB,iBADiC,EAErC,aAFqC,EAGrCF,IAHqC,CAAvC;AAMA,SAAO,UAACT,QAAD,EAAc;AACnBV,IAAAA,cAAc,CAACoB,oBAAD,EAAuB,EAAvB,EAA2B,EAA3B,EAA8B,KAA9B,EAAoC;AAAC,qBAAclB,WAAW,CAACoB,cAAZ;AAAf,KAApC,CAAd,CACGT,IADH,CACQ,UAACC,GAAD,EAAS;AACb;AACA,UAAIA,GAAG,CAACC,IAAR,EAAc;AACZP,QAAAA,IAAI,CAAC,IAAD,EAAOM,GAAG,CAACC,IAAX,CAAJ;AACD,OAFD,MAEO;AACL;AACAL,QAAAA,QAAQ,CAACP,kBAAkB,CAACW,GAAD,CAAnB,CAAR,CAFK,CAGL;AACD;AACF,KAVH,EAWGE,KAXH,CAWS,UAACC,KAAD,EAAW;AAChB;AACAP,MAAAA,QAAQ,CAACP,kBAAkB,CAACc,KAAD,CAAnB,CAAR,CAFgB,CAGhB;;AACAT,MAAAA,IAAI,CAACS,KAAD,CAAJ;AACD,KAhBH;AAiBD,GAlBD;AAmBD,CA5BM","sourcesContent":[" /* istanbul ignore file */\r\nimport {httpGETRequest} from \"../httpRequestHandler\";\r\nimport API from \"../endpoints\";\r\nimport UserService from \"../../services/UserService\";\r\nimport {\r\n  serviceActionError,\r\n} from \"../../actions/bpmTaskActions\";\r\n\r\nimport {setBPMFormList, setBPMFormListLoading} from \"../../actions/formActions\";\r\nimport {replaceUrl} from \"../../helper/helper\";\r\n\r\nexport const fetchBPMFormList = (...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    httpGETRequest(API.GET_BPM_FORM_LIST, {}, UserService.getToken())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setBPMFormList(res.data));\r\n          dispatch(setBPMFormListLoading(false));\r\n          //dispatch(setBPMLoader(false));\r\n          done(null, res.data);\r\n        } else {\r\n          dispatch(setBPMFormListLoading(false));\r\n          //console.log(\"Error\", res);\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(\"Error\", error);\r\n        dispatch(setBPMFormListLoading(false));\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchFormByAlias = (path,...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n\r\n  const apiUrlGetFormByAlias = replaceUrl(\r\n    API.GET_FORM_BY_ALIAS,\r\n    \"<form_path>\",\r\n    path\r\n  );\r\n\r\n  return (dispatch) => {\r\n    httpGETRequest(apiUrlGetFormByAlias, {}, '',false,{'x-jwt-token':UserService.getFormioToken()} )\r\n      .then((res) => {\r\n        //console.log(\"formData\",res);\r\n        if (res.data) {\r\n          done(null, res.data);\r\n        } else {\r\n          //console.log(\"Error\", res);\r\n          dispatch(serviceActionError(res));\r\n          //dispatch(setBPMTaskLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(\"Error\", error);\r\n        dispatch(serviceActionError(error));\r\n        //dispatch(setBPMTaskLoader(false));\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}