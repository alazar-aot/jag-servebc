{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _xhr = require(\"./xhr\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar googledrive = function googledrive(formio) {\n  return {\n    uploadFile: function uploadFile(file, fileName, dir, progressCallback, url, options, fileKey, groupPermissions, groupId, abortCallback) {\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        // Send the file with data.\n        var xhr = new XMLHttpRequest();\n\n        if (typeof progressCallback === 'function') {\n          xhr.upload.onprogress = progressCallback;\n        }\n\n        if (typeof abortCallback === 'function') {\n          abortCallback(function () {\n            return xhr.abort();\n          });\n        }\n\n        var fd = new FormData();\n        fd.append('name', fileName);\n        fd.append('dir', dir);\n        fd.append('file', file); // Fire on network error.\n\n        xhr.onerror = function (err) {\n          err.networkError = true;\n          reject(err);\n        };\n\n        xhr.onload = function () {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            var response = JSON.parse(xhr.response);\n            response.storage = 'googledrive';\n            response.size = file.size;\n            response.type = file.type;\n            response.groupId = groupId;\n            response.groupPermissions = groupPermissions;\n            resolve(response);\n          } else {\n            reject(xhr.response || 'Unable to upload file');\n          }\n        };\n\n        xhr.onabort = reject;\n        xhr.open('POST', \"\".concat(formio.formUrl, \"/storage/gdrive\"));\n        (0, _xhr.setXhrHeaders)(formio, xhr);\n        var token = formio.getToken();\n\n        if (token) {\n          xhr.setRequestHeader('x-jwt-token', token);\n        }\n\n        xhr.send(fd);\n      });\n    },\n    downloadFile: function downloadFile(file) {\n      var token = formio.getToken();\n      file.url = \"\".concat(formio.formUrl, \"/storage/gdrive?fileId=\").concat(file.id, \"&fileName=\").concat(file.originalName).concat(token ? \"&x-jwt-token=\".concat(token) : '');\n      return _nativePromiseOnly.default.resolve(file);\n    }\n  };\n};\n\ngoogledrive.title = 'Google Drive';\nvar _default = googledrive;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/node_modules/formiojs/providers/storage/googleDrive.js"],"names":["Object","defineProperty","exports","value","default","require","_nativePromiseOnly","_interopRequireDefault","_xhr","obj","__esModule","googledrive","formio","uploadFile","file","fileName","dir","progressCallback","url","options","fileKey","groupPermissions","groupId","abortCallback","resolve","reject","xhr","XMLHttpRequest","upload","onprogress","abort","fd","FormData","append","onerror","err","networkError","onload","status","response","JSON","parse","storage","size","type","onabort","open","concat","formUrl","setXhrHeaders","token","getToken","setRequestHeader","send","downloadFile","id","originalName","title","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _xhr = require(\"./xhr\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar googledrive = function googledrive(formio) {\n  return {\n    uploadFile: function uploadFile(file, fileName, dir, progressCallback, url, options, fileKey, groupPermissions, groupId, abortCallback) {\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        // Send the file with data.\n        var xhr = new XMLHttpRequest();\n\n        if (typeof progressCallback === 'function') {\n          xhr.upload.onprogress = progressCallback;\n        }\n\n        if (typeof abortCallback === 'function') {\n          abortCallback(function () {\n            return xhr.abort();\n          });\n        }\n\n        var fd = new FormData();\n        fd.append('name', fileName);\n        fd.append('dir', dir);\n        fd.append('file', file); // Fire on network error.\n\n        xhr.onerror = function (err) {\n          err.networkError = true;\n          reject(err);\n        };\n\n        xhr.onload = function () {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            var response = JSON.parse(xhr.response);\n            response.storage = 'googledrive';\n            response.size = file.size;\n            response.type = file.type;\n            response.groupId = groupId;\n            response.groupPermissions = groupPermissions;\n            resolve(response);\n          } else {\n            reject(xhr.response || 'Unable to upload file');\n          }\n        };\n\n        xhr.onabort = reject;\n        xhr.open('POST', \"\".concat(formio.formUrl, \"/storage/gdrive\"));\n        (0, _xhr.setXhrHeaders)(formio, xhr);\n        var token = formio.getToken();\n\n        if (token) {\n          xhr.setRequestHeader('x-jwt-token', token);\n        }\n\n        xhr.send(fd);\n      });\n    },\n    downloadFile: function downloadFile(file) {\n      var token = formio.getToken();\n      file.url = \"\".concat(formio.formUrl, \"/storage/gdrive?fileId=\").concat(file.id, \"&fileName=\").concat(file.originalName).concat(token ? \"&x-jwt-token=\".concat(token) : '');\n      return _nativePromiseOnly.default.resolve(file);\n    }\n  };\n};\n\ngoogledrive.title = 'Google Drive';\nvar _default = googledrive;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}