{"ast":null,"code":"import { STAFF_REVIEWER, STAFF_DESIGNER } from \"../constants/constants\";\nimport { GROUPS } from \"../constants/groupConstants\";\n/****\r\n * Default value of REACT_APP_USER_ACCESS_PERMISSIONS is {accessAllowApplications:false, accessAllowSubmissions:false}\r\n * This is to check if the view Submissions/view Application is to be shown with respect to group info or not\r\n *\r\n * Currently added groups for the purpose are applicationsAccess:[\"/formsflow/formsflow-reviewer/access-allow-applications\",\"/formsflow/formsflow-client/access-allow-applications\"],\r\n viewSubmissionsAccess:[\"/formsflow/formsflow-reviewer/access-allow-submissions\"]\r\n *  ****/\n\nexport var defaultUserAccessGroupCheck = {\n  accessAllowApplications: false,\n  accessAllowSubmissions: false\n};\nvar userAccessGroupCheck = window._env_ && window._env_.REACT_APP_USER_ACCESS_PERMISSIONS || process.env.REACT_APP_USER_ACCESS_PERMISSIONS || defaultUserAccessGroupCheck;\n\nif (typeof userAccessGroupCheck === \"string\") {\n  userAccessGroupCheck = JSON.parse(userAccessGroupCheck);\n}\n\nvar getUserRoleName = function getUserRoleName(userRoles) {\n  var role = \"\";\n\n  if (userRoles.includes(STAFF_REVIEWER)) {\n    role = \"REVIEWER\";\n  } else if (userRoles.includes(STAFF_DESIGNER)) {\n    role = \"DESIGNER\";\n  } else {\n    role = \"CLIENT\";\n  }\n\n  return role;\n};\n\nvar getNameFromEmail = function getNameFromEmail(email) {\n  return email ? email.substring(0, email.lastIndexOf(\"@\")) : \"\";\n};\n\nvar getUserRolePermission = function getUserRolePermission(userRoles, role) {\n  return userRoles && userRoles.includes(role);\n};\n\nvar setShowApplications = function setShowApplications(userGroups) {\n  if (!userAccessGroupCheck.accessAllowApplications) {\n    return true;\n  } else if (userGroups !== null && userGroups !== void 0 && userGroups.length) {\n    var applicationAccess = GROUPS.applicationsAccess.some(function (group) {\n      return userGroups.includes(group);\n    });\n    return applicationAccess;\n  } else {\n    return false;\n  }\n};\n\nvar setShowViewSubmissions = function setShowViewSubmissions(userGroups) {\n  if (!userAccessGroupCheck.accessAllowSubmissions) {\n    return true;\n  } else if (userGroups !== null && userGroups !== void 0 && userGroups.length) {\n    var viewSubmissionAccess = GROUPS.viewSubmissionsAccess.some(function (group) {\n      return userGroups.includes(group);\n    });\n    return viewSubmissionAccess;\n  } else {\n    return false;\n  }\n};\n\nvar getUserInsightsPermission = function getUserInsightsPermission() {\n  var _user;\n\n  var user = localStorage.getItem(\"UserDetails\");\n\n  if (!user) {\n    return false;\n  }\n\n  user = JSON.parse(user);\n\n  if (!((_user = user) !== null && _user !== void 0 && _user.dashboards)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport { getUserRoleName, getUserRolePermission, getNameFromEmail, setShowApplications, setShowViewSubmissions, getUserInsightsPermission };","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/helper/user.js"],"names":["STAFF_REVIEWER","STAFF_DESIGNER","GROUPS","defaultUserAccessGroupCheck","accessAllowApplications","accessAllowSubmissions","userAccessGroupCheck","window","_env_","REACT_APP_USER_ACCESS_PERMISSIONS","process","env","JSON","parse","getUserRoleName","userRoles","role","includes","getNameFromEmail","email","substring","lastIndexOf","getUserRolePermission","setShowApplications","userGroups","length","applicationAccess","applicationsAccess","some","group","setShowViewSubmissions","viewSubmissionAccess","viewSubmissionsAccess","getUserInsightsPermission","user","localStorage","getItem","dashboards"],"mappings":"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","sourcesContent":["import { STAFF_REVIEWER, STAFF_DESIGNER } from \"../constants/constants\";\r\nimport {GROUPS} from \"../constants/groupConstants\";\r\n\r\n\r\n/****\r\n * Default value of REACT_APP_USER_ACCESS_PERMISSIONS is {accessAllowApplications:false, accessAllowSubmissions:false}\r\n * This is to check if the view Submissions/view Application is to be shown with respect to group info or not\r\n *\r\n * Currently added groups for the purpose are applicationsAccess:[\"/formsflow/formsflow-reviewer/access-allow-applications\",\"/formsflow/formsflow-client/access-allow-applications\"],\r\n viewSubmissionsAccess:[\"/formsflow/formsflow-reviewer/access-allow-submissions\"]\r\n *  ****/\r\nexport const defaultUserAccessGroupCheck={accessAllowApplications:false,accessAllowSubmissions:false};\r\nlet userAccessGroupCheck = (window._env_ && window._env_.REACT_APP_USER_ACCESS_PERMISSIONS) ||\r\nprocess.env.REACT_APP_USER_ACCESS_PERMISSIONS || defaultUserAccessGroupCheck;\r\n\r\nif(typeof(userAccessGroupCheck)===\"string\"){\r\n  userAccessGroupCheck=JSON.parse(userAccessGroupCheck);\r\n}\r\n\r\nconst getUserRoleName = (userRoles) => {\r\n  let role = \"\";\r\n  if (userRoles.includes(STAFF_REVIEWER)) {\r\n    role = \"REVIEWER\";\r\n  } else if (userRoles.includes(STAFF_DESIGNER)) {\r\n    role = \"DESIGNER\";\r\n  } else {\r\n    role = \"CLIENT\";\r\n  }\r\n  return role;\r\n};\r\n\r\nconst getNameFromEmail = (email) => email?email.substring(0, email.lastIndexOf(\"@\")) : \"\" ;\r\n\r\nconst getUserRolePermission = (userRoles, role) => {\r\n  return userRoles && userRoles.includes(role);\r\n};\r\n\r\nconst setShowApplications = (userGroups)=>{\r\n  if(!userAccessGroupCheck.accessAllowApplications){\r\n    return true;\r\n  }else if(userGroups?.length){\r\n    const applicationAccess = GROUPS.applicationsAccess.some((group)=> userGroups.includes(group));\r\n    return applicationAccess;\r\n  }else{\r\n    return false;\r\n  }\r\n}\r\n\r\nconst setShowViewSubmissions = (userGroups)=>{\r\n  if(!userAccessGroupCheck.accessAllowSubmissions){\r\n    return true;\r\n  }else if(userGroups?.length){\r\n    const viewSubmissionAccess = GROUPS.viewSubmissionsAccess.some((group)=> userGroups.includes(group));\r\n    return viewSubmissionAccess;\r\n  }else{\r\n    return false;\r\n  }\r\n}\r\n\r\nconst getUserInsightsPermission = ()=>{\r\n  let user = localStorage.getItem(\"UserDetails\");\r\n  if(!user){\r\n    return false\r\n  }\r\n  user = JSON.parse(user);\r\n  if(!user?.dashboards){\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nexport { getUserRoleName, getUserRolePermission, getNameFromEmail, setShowApplications, setShowViewSubmissions, getUserInsightsPermission };\r\n"]},"metadata":{},"sourceType":"module"}