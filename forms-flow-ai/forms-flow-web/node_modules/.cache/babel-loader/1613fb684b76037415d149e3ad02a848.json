{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\TaskView\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ServiceFlowTaskDetails from \"./details/ServiceTaskDetails\";\nimport { fetchFilterList, fetchProcessDefinitionList, fetchServiceTaskList, getBPMGroups, getBPMTaskDetail } from \"../../apiManager/services/bpmTaskServices\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ALL_TASKS } from \"./constants/taskConstants\";\nimport { reloadTaskFormSubmission, setBPMFilterLoader, setBPMTaskDetailLoader, setFilterListParams, setSelectedBPMFilter, setSelectedTaskID } from \"../../actions/bpmTaskActions\";\nimport TaskSortSelectedList from \"./list/sort/TaskSortSelectedList\";\nimport SocketIOService from \"../../services/SocketIOService\";\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { push } from \"connected-react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TaskView = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var dispatch = useDispatch();\n  var selectedFilterId = useSelector(function (state) {\n    var _state$bpmTasks$selec;\n\n    return ((_state$bpmTasks$selec = state.bpmTasks.selectedFilter) === null || _state$bpmTasks$selec === void 0 ? void 0 : _state$bpmTasks$selec.id) || null;\n  });\n  var bpmTaskId = useSelector(function (state) {\n    return state.bpmTasks.taskId;\n  });\n  var reqData = useSelector(function (state) {\n    return state.bpmTasks.listReqParams;\n  });\n  var sortParams = useSelector(function (state) {\n    return state.bpmTasks.filterListSortParams;\n  });\n  var searchParams = useSelector(function (state) {\n    return state.bpmTasks.filterListSearchParams;\n  });\n  var listReqParams = useSelector(function (state) {\n    return state.bpmTasks.listReqParams;\n  });\n  var currentUser = useSelector(function (state) {\n    var _state$user, _state$user$userDetai;\n\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$userDetai = _state$user.userDetail) === null || _state$user$userDetai === void 0 ? void 0 : _state$user$userDetai.preferred_username) || '';\n  });\n  var firstResult = useSelector(function (state) {\n    return state.bpmTasks.firstResult;\n  });\n  var taskList = useSelector(function (state) {\n    return state.bpmTasks.tasksList;\n  });\n  var selectedFilterIdRef = useRef(selectedFilterId);\n  var bpmTaskIdRef = useRef(bpmTaskId);\n  var reqDataRef = useRef(reqData);\n  var firstResultsRef = useRef(firstResult);\n  var taskListRef = useRef(taskList);\n  useEffect(function () {\n    selectedFilterIdRef.current = selectedFilterId;\n    bpmTaskIdRef.current = bpmTaskId;\n    reqDataRef.current = reqData;\n    firstResultsRef.current = firstResult;\n    taskListRef.current = taskList;\n  });\n  useEffect(function () {\n    var reqParamData = _objectSpread(_objectSpread({}, {\n      sorting: _toConsumableArray(sortParams.sorting)\n    }), searchParams);\n\n    if (!isEqual(reqParamData, listReqParams)) {\n      dispatch(setFilterListParams(cloneDeep(reqParamData)));\n    }\n  }, [searchParams, sortParams, dispatch, listReqParams]);\n  useEffect(function () {\n    dispatch(setBPMFilterLoader(true));\n    dispatch(fetchFilterList());\n    dispatch(fetchProcessDefinitionList()); // dispatch(fetchUserList());\n  }, [dispatch]);\n\n  var checkIfTaskIDExistsInList = function checkIfTaskIDExistsInList(list, id) {\n    return list.some(function (task) {\n      return task.id === id;\n    });\n  };\n\n  var SocketIOCallback = useCallback(function (refreshedTaskId, forceReload, isUpdateEvent) {\n    if (forceReload) {\n      dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current, refreshedTaskId)); //Refreshes the Tasks\n\n      if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) {\n        dispatch(setBPMTaskDetailLoader(true));\n        dispatch(setSelectedTaskID(null)); // unSelect the Task Selected\n\n        dispatch(push(\"/task/\"));\n      }\n    } else {\n      if (selectedFilterIdRef.current) {\n        if (isUpdateEvent) {\n          /* Check if the taskId exists in the loaded Task List */\n          if (checkIfTaskIDExistsInList(taskListRef.current, refreshedTaskId) === true) {\n            dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\n          }\n        } else {\n          dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\n        }\n      }\n\n      if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) {\n        //Refreshes task if its selected\n        dispatch(getBPMTaskDetail(bpmTaskIdRef.current, function (err, resTask) {\n          // Should dispatch When task claimed user  is not the logged in User\n          if ((resTask === null || resTask === void 0 ? void 0 : resTask.assignee) !== currentUser) {\n            dispatch(reloadTaskFormSubmission(true));\n          }\n        }));\n        dispatch(getBPMGroups(bpmTaskIdRef.current));\n      }\n    }\n  }, [dispatch, currentUser]);\n  useEffect(function () {\n    if (!SocketIOService.isConnected()) {\n      SocketIOService.connect(function (refreshedTaskId, forceReload, isUpdateEvent) {\n        return SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent);\n      });\n    } else {\n      SocketIOService.disconnect();\n      SocketIOService.connect(function (refreshedTaskId, forceReload, isUpdateEvent) {\n        return SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent);\n      });\n    }\n\n    return function () {\n      if (SocketIOService.isConnected()) SocketIOService.disconnect();\n    };\n  }, [SocketIOCallback, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    id: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-item-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Hello world\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/task/:taskId?\",\n          children: /*#__PURE__*/_jsxDEV(ServiceFlowTaskDetails, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 52\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/task/:taskId/:notAvailable\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Redirect, {\n            exact: true,\n            to: \"/404\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 66\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, _this);\n}, \"1PC67stLsCuPd2znti8P3G0b6oo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n}));\n_c2 = TaskView;\nexport default TaskView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskView$React.memo\");\n$RefreshReg$(_c2, \"TaskView\");","map":{"version":3,"names":["React","ServiceFlowTaskDetails","fetchFilterList","fetchProcessDefinitionList","fetchServiceTaskList","getBPMGroups","getBPMTaskDetail","useDispatch","useSelector","ALL_TASKS","reloadTaskFormSubmission","setBPMFilterLoader","setBPMTaskDetailLoader","setFilterListParams","setSelectedBPMFilter","setSelectedTaskID","TaskSortSelectedList","SocketIOService","isEqual","cloneDeep","Route","Redirect","push","TaskView","memo","dispatch","selectedFilterId","state","bpmTasks","selectedFilter","id","bpmTaskId","taskId","reqData","listReqParams","sortParams","filterListSortParams","searchParams","filterListSearchParams","currentUser","user","userDetail","preferred_username","firstResult","taskList","tasksList","selectedFilterIdRef","useRef","bpmTaskIdRef","reqDataRef","firstResultsRef","taskListRef","useEffect","current","reqParamData","sorting","checkIfTaskIDExistsInList","list","some","task","SocketIOCallback","useCallback","refreshedTaskId","forceReload","isUpdateEvent","err","resTask","assignee","isConnected","connect","disconnect"],"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/components/TaskView/index.js"],"sourcesContent":["import React from \"react\";\r\nimport ServiceFlowTaskDetails from \"./details/ServiceTaskDetails\";\r\nimport {\r\n    fetchFilterList,\r\n    fetchProcessDefinitionList,\r\n    fetchServiceTaskList,\r\n    getBPMGroups, getBPMTaskDetail\r\n} from \"../../apiManager/services/bpmTaskServices\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ALL_TASKS } from \"./constants/taskConstants\";\r\nimport {\r\n    reloadTaskFormSubmission,\r\n    setBPMFilterLoader,\r\n    setBPMTaskDetailLoader,\r\n    setFilterListParams,\r\n    setSelectedBPMFilter, setSelectedTaskID\r\n} from \"../../actions/bpmTaskActions\";\r\nimport TaskSortSelectedList from \"./list/sort/TaskSortSelectedList\";\r\nimport SocketIOService from \"../../services/SocketIOService\";\r\nimport isEqual from 'lodash/isEqual';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {push} from \"connected-react-router\";\r\n\r\n\r\nconst TaskView = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n    const selectedFilterId = useSelector(state => state.bpmTasks.selectedFilter?.id || null);\r\n    const bpmTaskId = useSelector(state => state.bpmTasks.taskId);\r\n    const reqData = useSelector((state) => state.bpmTasks.listReqParams);\r\n    const sortParams = useSelector((state) => state.bpmTasks.filterListSortParams);\r\n    const searchParams = useSelector((state) => state.bpmTasks.filterListSearchParams);\r\n    const listReqParams = useSelector((state) => state.bpmTasks.listReqParams);\r\n    const currentUser = useSelector((state) => state.user?.userDetail?.preferred_username || '');\r\n    const firstResult = useSelector(state => state.bpmTasks.firstResult);\r\n    const taskList = useSelector((state) => state.bpmTasks.tasksList);\r\n    const selectedFilterIdRef = useRef(selectedFilterId);\r\n    const bpmTaskIdRef = useRef(bpmTaskId);\r\n    const reqDataRef = useRef(reqData);\r\n    const firstResultsRef = useRef(firstResult);\r\n    const taskListRef = useRef(taskList);\r\n\r\n    useEffect(() => {\r\n        selectedFilterIdRef.current = selectedFilterId;\r\n        bpmTaskIdRef.current = bpmTaskId;\r\n        reqDataRef.current = reqData;\r\n        firstResultsRef.current = firstResult;\r\n        taskListRef.current = taskList;\r\n    });\r\n\r\n    useEffect(() => {\r\n        const reqParamData = { ...{ sorting: [...sortParams.sorting] }, ...searchParams };\r\n        if (!isEqual(reqParamData, listReqParams)) {\r\n            dispatch(setFilterListParams(cloneDeep(reqParamData)))\r\n        }\r\n    }, [searchParams, sortParams, dispatch, listReqParams])\r\n\r\n    useEffect(() => {\r\n        dispatch(setBPMFilterLoader(true));\r\n        dispatch(fetchFilterList());\r\n        dispatch(fetchProcessDefinitionList());\r\n        // dispatch(fetchUserList());\r\n    }, [dispatch]);\r\n\r\n\r\n    const checkIfTaskIDExistsInList = (list, id) => {\r\n        return list.some(task => task.id === id);\r\n    }\r\n    const SocketIOCallback = useCallback((refreshedTaskId, forceReload, isUpdateEvent) => {\r\n        if (forceReload) {\r\n            dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current, refreshedTaskId)); //Refreshes the Tasks\r\n            if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) {\r\n                dispatch(setBPMTaskDetailLoader(true));\r\n                dispatch(setSelectedTaskID(null)); // unSelect the Task Selected\r\n                dispatch(push(`/task/`));\r\n            }\r\n        } else {\r\n            if (selectedFilterIdRef.current) {\r\n                if (isUpdateEvent) {\r\n                    /* Check if the taskId exists in the loaded Task List */\r\n                    if (checkIfTaskIDExistsInList(taskListRef.current, refreshedTaskId) === true) {\r\n                        dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\r\n                    }\r\n                } else {\r\n                    dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\r\n                }\r\n            }\r\n            if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) { //Refreshes task if its selected\r\n                dispatch(getBPMTaskDetail(bpmTaskIdRef.current, (err, resTask) => {\r\n                    // Should dispatch When task claimed user  is not the logged in User\r\n                    if (resTask?.assignee !== currentUser) {\r\n                        dispatch(reloadTaskFormSubmission(true));\r\n                    }\r\n                }));\r\n                dispatch(getBPMGroups(bpmTaskIdRef.current));\r\n            }\r\n        }\r\n    }\r\n        , [dispatch, currentUser]);\r\n\r\n    useEffect(() => {\r\n        if (!SocketIOService.isConnected()) {\r\n            SocketIOService.connect((refreshedTaskId, forceReload, isUpdateEvent) => SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent));\r\n        } else {\r\n            SocketIOService.disconnect();\r\n            SocketIOService.connect((refreshedTaskId, forceReload, isUpdateEvent) => SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent));\r\n        }\r\n        return () => {\r\n            if (SocketIOService.isConnected())\r\n                SocketIOService.disconnect();\r\n        }\r\n    }, [SocketIOCallback, dispatch]);\r\n\r\n    return (\r\n        <div className=\"container\" id=\"main\">\r\n\r\n            <div className=\"flex-container\">\r\n                <div className=\"flex-item-left\">\r\n                    <h2>Hello world</h2>\r\n                    <Route path={\"/task/:taskId?\"}><ServiceFlowTaskDetails/></Route>\r\n                    <Route path={\"/task/:taskId/:notAvailable\"}> <Redirect exact to='/404'/></Route>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n);\r\nexport default TaskView;\r\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,SACIC,eADJ,EAEIC,0BAFJ,EAGIC,oBAHJ,EAIIC,YAJJ,EAIkBC,gBAJlB,QAKO,2CALP;AAMA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SACIC,wBADJ,EAEIC,kBAFJ,EAGIC,sBAHJ,EAIIC,mBAJJ,EAKIC,oBALJ,EAK0BC,iBAL1B,QAMO,8BANP;AAOA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;;AAGA,IAAMC,QAAQ,gBAAGvB,KAAK,CAACwB,IAAN,SAAW,YAAM;EAAA;;EAC9B,IAAMC,QAAQ,GAAGlB,WAAW,EAA5B;EACA,IAAMmB,gBAAgB,GAAGlB,WAAW,CAAC,UAAAmB,KAAK;IAAA;;IAAA,OAAI,0BAAAA,KAAK,CAACC,QAAN,CAAeC,cAAf,gFAA+BC,EAA/B,KAAqC,IAAzC;EAAA,CAAN,CAApC;EACA,IAAMC,SAAS,GAAGvB,WAAW,CAAC,UAAAmB,KAAK;IAAA,OAAIA,KAAK,CAACC,QAAN,CAAeI,MAAnB;EAAA,CAAN,CAA7B;EACA,IAAMC,OAAO,GAAGzB,WAAW,CAAC,UAACmB,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeM,aAA1B;EAAA,CAAD,CAA3B;EACA,IAAMC,UAAU,GAAG3B,WAAW,CAAC,UAACmB,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeQ,oBAA1B;EAAA,CAAD,CAA9B;EACA,IAAMC,YAAY,GAAG7B,WAAW,CAAC,UAACmB,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeU,sBAA1B;EAAA,CAAD,CAAhC;EACA,IAAMJ,aAAa,GAAG1B,WAAW,CAAC,UAACmB,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeM,aAA1B;EAAA,CAAD,CAAjC;EACA,IAAMK,WAAW,GAAG/B,WAAW,CAAC,UAACmB,KAAD;IAAA;;IAAA,OAAW,gBAAAA,KAAK,CAACa,IAAN,qFAAYC,UAAZ,gFAAwBC,kBAAxB,KAA8C,EAAzD;EAAA,CAAD,CAA/B;EACA,IAAMC,WAAW,GAAGnC,WAAW,CAAC,UAAAmB,KAAK;IAAA,OAAIA,KAAK,CAACC,QAAN,CAAee,WAAnB;EAAA,CAAN,CAA/B;EACA,IAAMC,QAAQ,GAAGpC,WAAW,CAAC,UAACmB,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeiB,SAA1B;EAAA,CAAD,CAA5B;EACA,IAAMC,mBAAmB,GAAGC,MAAM,CAACrB,gBAAD,CAAlC;EACA,IAAMsB,YAAY,GAAGD,MAAM,CAAChB,SAAD,CAA3B;EACA,IAAMkB,UAAU,GAAGF,MAAM,CAACd,OAAD,CAAzB;EACA,IAAMiB,eAAe,GAAGH,MAAM,CAACJ,WAAD,CAA9B;EACA,IAAMQ,WAAW,GAAGJ,MAAM,CAACH,QAAD,CAA1B;EAEAQ,SAAS,CAAC,YAAM;IACZN,mBAAmB,CAACO,OAApB,GAA8B3B,gBAA9B;IACAsB,YAAY,CAACK,OAAb,GAAuBtB,SAAvB;IACAkB,UAAU,CAACI,OAAX,GAAqBpB,OAArB;IACAiB,eAAe,CAACG,OAAhB,GAA0BV,WAA1B;IACAQ,WAAW,CAACE,OAAZ,GAAsBT,QAAtB;EACH,CANQ,CAAT;EAQAQ,SAAS,CAAC,YAAM;IACZ,IAAME,YAAY,mCAAQ;MAAEC,OAAO,qBAAMpB,UAAU,CAACoB,OAAjB;IAAT,CAAR,GAAiDlB,YAAjD,CAAlB;;IACA,IAAI,CAACnB,OAAO,CAACoC,YAAD,EAAepB,aAAf,CAAZ,EAA2C;MACvCT,QAAQ,CAACZ,mBAAmB,CAACM,SAAS,CAACmC,YAAD,CAAV,CAApB,CAAR;IACH;EACJ,CALQ,EAKN,CAACjB,YAAD,EAAeF,UAAf,EAA2BV,QAA3B,EAAqCS,aAArC,CALM,CAAT;EAOAkB,SAAS,CAAC,YAAM;IACZ3B,QAAQ,CAACd,kBAAkB,CAAC,IAAD,CAAnB,CAAR;IACAc,QAAQ,CAACvB,eAAe,EAAhB,CAAR;IACAuB,QAAQ,CAACtB,0BAA0B,EAA3B,CAAR,CAHY,CAIZ;EACH,CALQ,EAKN,CAACsB,QAAD,CALM,CAAT;;EAQA,IAAM+B,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,IAAD,EAAO3B,EAAP,EAAc;IAC5C,OAAO2B,IAAI,CAACC,IAAL,CAAU,UAAAC,IAAI;MAAA,OAAIA,IAAI,CAAC7B,EAAL,KAAYA,EAAhB;IAAA,CAAd,CAAP;EACH,CAFD;;EAGA,IAAM8B,gBAAgB,GAAGC,WAAW,CAAC,UAACC,eAAD,EAAkBC,WAAlB,EAA+BC,aAA/B,EAAiD;IAClF,IAAID,WAAJ,EAAiB;MACbtC,QAAQ,CAACrB,oBAAoB,CAAC0C,mBAAmB,CAACO,OAArB,EAA8BH,eAAe,CAACG,OAA9C,EAAuDJ,UAAU,CAACI,OAAlE,EAA2ES,eAA3E,CAArB,CAAR,CADa,CAC8G;;MAC3H,IAAId,YAAY,CAACK,OAAb,IAAwBS,eAAe,KAAKd,YAAY,CAACK,OAA7D,EAAsE;QAClE5B,QAAQ,CAACb,sBAAsB,CAAC,IAAD,CAAvB,CAAR;QACAa,QAAQ,CAACV,iBAAiB,CAAC,IAAD,CAAlB,CAAR,CAFkE,CAE/B;;QACnCU,QAAQ,CAACH,IAAI,UAAL,CAAR;MACH;IACJ,CAPD,MAOO;MACH,IAAIwB,mBAAmB,CAACO,OAAxB,EAAiC;QAC7B,IAAIW,aAAJ,EAAmB;UACf;UACA,IAAIR,yBAAyB,CAACL,WAAW,CAACE,OAAb,EAAsBS,eAAtB,CAAzB,KAAoE,IAAxE,EAA8E;YAC1ErC,QAAQ,CAACrB,oBAAoB,CAAC0C,mBAAmB,CAACO,OAArB,EAA8BH,eAAe,CAACG,OAA9C,EAAuDJ,UAAU,CAACI,OAAlE,CAArB,CAAR,CAD0E,CACgC;UAC7G;QACJ,CALD,MAKO;UACH5B,QAAQ,CAACrB,oBAAoB,CAAC0C,mBAAmB,CAACO,OAArB,EAA8BH,eAAe,CAACG,OAA9C,EAAuDJ,UAAU,CAACI,OAAlE,CAArB,CAAR,CADG,CACuG;QAC7G;MACJ;;MACD,IAAIL,YAAY,CAACK,OAAb,IAAwBS,eAAe,KAAKd,YAAY,CAACK,OAA7D,EAAsE;QAAE;QACpE5B,QAAQ,CAACnB,gBAAgB,CAAC0C,YAAY,CAACK,OAAd,EAAuB,UAACY,GAAD,EAAMC,OAAN,EAAkB;UAC9D;UACA,IAAI,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,QAAT,MAAsB5B,WAA1B,EAAuC;YACnCd,QAAQ,CAACf,wBAAwB,CAAC,IAAD,CAAzB,CAAR;UACH;QACJ,CALwB,CAAjB,CAAR;QAMAe,QAAQ,CAACpB,YAAY,CAAC2C,YAAY,CAACK,OAAd,CAAb,CAAR;MACH;IACJ;EACJ,CA7BmC,EA8B9B,CAAC5B,QAAD,EAAWc,WAAX,CA9B8B,CAApC;EAgCAa,SAAS,CAAC,YAAM;IACZ,IAAI,CAACnC,eAAe,CAACmD,WAAhB,EAAL,EAAoC;MAChCnD,eAAe,CAACoD,OAAhB,CAAwB,UAACP,eAAD,EAAkBC,WAAlB,EAA+BC,aAA/B;QAAA,OAAiDJ,gBAAgB,CAACE,eAAD,EAAkBC,WAAlB,EAA+BC,aAA/B,CAAjE;MAAA,CAAxB;IACH,CAFD,MAEO;MACH/C,eAAe,CAACqD,UAAhB;MACArD,eAAe,CAACoD,OAAhB,CAAwB,UAACP,eAAD,EAAkBC,WAAlB,EAA+BC,aAA/B;QAAA,OAAiDJ,gBAAgB,CAACE,eAAD,EAAkBC,WAAlB,EAA+BC,aAA/B,CAAjE;MAAA,CAAxB;IACH;;IACD,OAAO,YAAM;MACT,IAAI/C,eAAe,CAACmD,WAAhB,EAAJ,EACInD,eAAe,CAACqD,UAAhB;IACP,CAHD;EAIH,CAXQ,EAWN,CAACV,gBAAD,EAAmBnC,QAAnB,CAXM,CAAT;EAaA,oBACI;IAAK,SAAS,EAAC,WAAf;IAA2B,EAAE,EAAC,MAA9B;IAAA,uBAEI;MAAK,SAAS,EAAC,gBAAf;MAAA,uBACI;QAAK,SAAS,EAAC,gBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,SADJ,eAEI,QAAC,KAAD;UAAO,IAAI,EAAE,gBAAb;UAAA,uBAA+B,QAAC,sBAAD;YAAA;YAAA;YAAA;UAAA;QAA/B;UAAA;UAAA;UAAA;QAAA,SAFJ,eAGI,QAAC,KAAD;UAAO,IAAI,EAAE,6BAAb;UAAA,6BAA6C,QAAC,QAAD;YAAU,KAAK,MAAf;YAAgB,EAAE,EAAC;UAAnB;YAAA;YAAA;YAAA;UAAA,SAA7C;QAAA;UAAA;UAAA;UAAA;QAAA,SAHJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EAFJ;IAAA;IAAA;IAAA;EAAA,SADJ;AAaH,CArGgB;EAAA,QACIlB,WADJ,EAEYC,WAFZ,EAGKA,WAHL,EAIGA,WAJH,EAKMA,WALN,EAMQA,WANR,EAOSA,WAPT,EAQOA,WARP,EASOA,WATP,EAUIA,WAVJ;AAAA,GAAjB;MAAMe,Q;AAuGN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}