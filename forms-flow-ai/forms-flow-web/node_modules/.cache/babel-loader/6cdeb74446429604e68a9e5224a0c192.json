{"ast":null,"code":"/* istanbul ignore file */\nimport FormioExport from 'aot-formio-export';\nimport moment from \"moment\";\n\nvar getPdf = function getPdf(formResponse, submissionData, callback) {\n  var component = formResponse;\n  var hasSubmission = submissionData !== null;\n  var submission = hasSubmission ? submissionData : null;\n  var emptyValue = hasSubmission ? '-' : '';\n  var willDownload = callback === null || callback === undefined;\n  var options = {\n    formio: {\n      // component specific configuration\n      ignoreLayout: true,\n      // should html render respect formio layouts (columns, lables positions, etc)\n      emptyValue: emptyValue // default empty value for rendered components\n\n    },\n    component: component,\n    data: submission,\n    config: {\n      // pdf export configuration\n      download: willDownload,\n      // should the pdf file be downloaded once rendered\n      filename: \"\".concat(component.title, \"-\").concat(Date.now(), \".pdf\"),\n      // the pdf file name\n      margin: 10,\n      // the pdf file margins\n      html2canvas: {\n        scale: 5,\n        // scale factor for rendering the canvas (overall resolution of the canvas image)\n        logging: false // should console logging be enable during rendering\n\n      },\n      jsPDF: {\n        orientation: 'p',\n        // PDF orientation - potrait / landscape\n        unit: 'mm',\n        // measurement units used\n        format: 'letter' // paper size - can also accept custom (i.e. A4 - [210, 297])\n\n      }\n    },\n    meta: {\n      generatedOn: moment(submissionData.modified).format(\"DD-MM-YYYY hh:mm:ss\"),\n      generatedBy: submissionData.owner\n    }\n  };\n  var exporter = new FormioExport(component, submission, options);\n\n  if (willDownload) {\n    exporter.toPdf(options.config);\n  } else if (callback) {\n    exporter.toPdf(options.config).then(callback);\n  }\n};\n\nvar PdfDownloadService = {\n  getPdf: getPdf\n};\nexport default PdfDownloadService;","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/services/PdfDownloadService.js"],"names":["FormioExport","moment","getPdf","formResponse","submissionData","callback","component","hasSubmission","submission","emptyValue","willDownload","undefined","options","formio","ignoreLayout","data","config","download","filename","title","Date","now","margin","html2canvas","scale","logging","jsPDF","orientation","unit","format","meta","generatedOn","modified","generatedBy","owner","exporter","toPdf","then","PdfDownloadService"],"mappings":"AAAC;AACD,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,YAAD,EAAeC,cAAf,EAA+BC,QAA/B,EAA4C;AACvD,MAAIC,SAAS,GAAGH,YAAhB;AAEA,MAAII,aAAa,GAAGH,cAAc,KAAK,IAAvC;AACA,MAAII,UAAU,GAAGD,aAAa,GAAGH,cAAH,GAAoB,IAAlD;AACA,MAAIK,UAAU,GAAGF,aAAa,GAAG,GAAH,GAAS,EAAvC;AAEA,MAAIG,YAAY,GAAGL,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKM,SAArD;AAEA,MAAIC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AAAE;AACRC,MAAAA,YAAY,EAAE,IADR;AACc;AACpBL,MAAAA,UAAU,EAAEA,UAFN,CAEiB;;AAFjB,KADI;AAKZH,IAAAA,SAAS,EAAEA,SALC;AAMZS,IAAAA,IAAI,EAAEP,UANM;AAOZQ,IAAAA,MAAM,EAAE;AAAE;AACRC,MAAAA,QAAQ,EAAEP,YADJ;AACkB;AACxBQ,MAAAA,QAAQ,YAAKZ,SAAS,CAACa,KAAf,cAAwBC,IAAI,CAACC,GAAL,EAAxB,SAFF;AAE4C;AAClDC,MAAAA,MAAM,EAAE,EAHF;AAGM;AACZC,MAAAA,WAAW,EAAE;AACXC,QAAAA,KAAK,EAAE,CADI;AACD;AACVC,QAAAA,OAAO,EAAE,KAFE,CAEI;;AAFJ,OAJP;AAQNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAE,GADR;AACa;AAClBC,QAAAA,IAAI,EAAE,IAFD;AAEO;AACZC,QAAAA,MAAM,EAAE,QAHH,CAGY;;AAHZ;AARD,KAPI;AAsBfC,IAAAA,IAAI,EAAE;AACDC,MAAAA,WAAW,EAAE9B,MAAM,CAACG,cAAc,CAAC4B,QAAhB,CAAN,CAAgCH,MAAhC,CAAuC,qBAAvC,CADZ;AAEDI,MAAAA,WAAW,EAAE7B,cAAc,CAAC8B;AAF3B;AAtBS,GAAd;AA6BA,MAAMC,QAAQ,GAAG,IAAInC,YAAJ,CAAiBM,SAAjB,EAA4BE,UAA5B,EAAwCI,OAAxC,CAAjB;;AAEA,MAAIF,YAAJ,EAAkB;AAChByB,IAAAA,QAAQ,CAACC,KAAT,CAAexB,OAAO,CAACI,MAAvB;AACD,GAFD,MAEO,IAAIX,QAAJ,EAAc;AACnB8B,IAAAA,QAAQ,CAACC,KAAT,CAAexB,OAAO,CAACI,MAAvB,EAA+BqB,IAA/B,CAAoChC,QAApC;AACD;AACJ,CA7CD;;AA+CA,IAAMiC,kBAAkB,GAAE;AACxBpC,EAAAA,MAAM,EAANA;AADwB,CAA1B;AAIA,eAAeoC,kBAAf","sourcesContent":[" /* istanbul ignore file */\r\nimport FormioExport from 'aot-formio-export';\r\nimport moment from \"moment\";\r\n\r\nconst getPdf = (formResponse, submissionData, callback) => {\r\n    let component = formResponse;\r\n\r\n    let hasSubmission = submissionData !== null;\r\n    let submission = hasSubmission ? submissionData : null;\r\n    let emptyValue = hasSubmission ? '-' : '';\r\n\r\n    let willDownload = callback === null || callback === undefined;\r\n\r\n    let options = {\r\n      formio: { // component specific configuration\r\n        ignoreLayout: true, // should html render respect formio layouts (columns, lables positions, etc)\r\n        emptyValue: emptyValue // default empty value for rendered components\r\n      },\r\n      component: component,\r\n      data: submission,\r\n      config: { // pdf export configuration\r\n        download: willDownload, // should the pdf file be downloaded once rendered\r\n        filename: `${component.title}-${Date.now()}.pdf`, // the pdf file name\r\n        margin: 10, // the pdf file margins\r\n        html2canvas: {\r\n          scale: 5, // scale factor for rendering the canvas (overall resolution of the canvas image)\r\n          logging: false // should console logging be enable during rendering\r\n        },\r\n        jsPDF: {\r\n          orientation: 'p', // PDF orientation - potrait / landscape\r\n          unit: 'mm', // measurement units used\r\n          format: 'letter' // paper size - can also accept custom (i.e. A4 - [210, 297])\r\n        },\r\n      },\r\n\r\n   meta: {\r\n        generatedOn: moment(submissionData.modified).format(\"DD-MM-YYYY hh:mm:ss\"),\r\n        generatedBy: submissionData.owner\r\n      }\r\n\r\n    };\r\n\r\n    const exporter = new FormioExport(component, submission, options);\r\n\r\n    if (willDownload) {\r\n      exporter.toPdf(options.config);\r\n    } else if (callback) {\r\n      exporter.toPdf(options.config).then(callback);\r\n    }\r\n}\r\n\r\nconst PdfDownloadService ={\r\n  getPdf\r\n};\r\n\r\nexport default PdfDownloadService;\r\n\r\n"]},"metadata":{},"sourceType":"module"}