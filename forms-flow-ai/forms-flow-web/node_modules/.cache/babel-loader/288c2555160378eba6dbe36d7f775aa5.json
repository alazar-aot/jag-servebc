{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\ServiceFlow\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport ServiceFlowTaskList from \"./list/ServiceTaskList\";\nimport ServiceFlowTaskDetails from \"./details/ServiceTaskDetails\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport \"./ServiceFlow.scss\";\nimport { fetchFilterList, fetchProcessDefinitionList, fetchServiceTaskList, getBPMGroups, getBPMTaskDetail } from \"../../apiManager/services/bpmTaskServices\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ALL_TASKS } from \"./constants/taskConstants\";\nimport { reloadTaskFormSubmission, setBPMFilterLoader, setBPMTaskDetailLoader, setFilterListParams, setSelectedBPMFilter, setSelectedTaskID } from \"../../actions/bpmTaskActions\";\nimport TaskSortSelectedList from \"./list/sort/TaskSortSelectedList\";\nimport SocketIOService from \"../../services/SocketIOService\";\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { push } from \"connected-react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var dispatch = useDispatch();\n  var filterList = useSelector(function (state) {\n    return state.bpmTasks.filterList;\n  });\n  var isFilterLoading = useSelector(function (state) {\n    return state.bpmTasks.isFilterLoading;\n  });\n  var selectedFilter = useSelector(function (state) {\n    return state.bpmTasks.selectedFilter;\n  });\n  var selectedFilterId = useSelector(function (state) {\n    var _state$bpmTasks$selec;\n\n    return ((_state$bpmTasks$selec = state.bpmTasks.selectedFilter) === null || _state$bpmTasks$selec === void 0 ? void 0 : _state$bpmTasks$selec.id) || null;\n  });\n  var bpmTaskId = useSelector(function (state) {\n    return state.bpmTasks.taskId;\n  });\n  var reqData = useSelector(function (state) {\n    return state.bpmTasks.listReqParams;\n  });\n  var sortParams = useSelector(function (state) {\n    return state.bpmTasks.filterListSortParams;\n  });\n  var searchParams = useSelector(function (state) {\n    return state.bpmTasks.filterListSearchParams;\n  });\n  var listReqParams = useSelector(function (state) {\n    return state.bpmTasks.listReqParams;\n  });\n  var currentUser = useSelector(function (state) {\n    var _state$user, _state$user$userDetai;\n\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$userDetai = _state$user.userDetail) === null || _state$user$userDetai === void 0 ? void 0 : _state$user$userDetai.preferred_username) || '';\n  });\n  var firstResult = useSelector(function (state) {\n    return state.bpmTasks.firstResult;\n  });\n  var taskList = useSelector(function (state) {\n    return state.bpmTasks.tasksList;\n  });\n  var selectedFilterIdRef = useRef(selectedFilterId);\n  var bpmTaskIdRef = useRef(bpmTaskId);\n  var reqDataRef = useRef(reqData);\n  var firstResultsRef = useRef(firstResult);\n  var taskListRef = useRef(taskList);\n  useEffect(function () {\n    selectedFilterIdRef.current = selectedFilterId;\n    bpmTaskIdRef.current = bpmTaskId;\n    reqDataRef.current = reqData;\n    firstResultsRef.current = firstResult;\n    taskListRef.current = taskList;\n  });\n  useEffect(function () {\n    var reqParamData = _objectSpread(_objectSpread({}, {\n      sorting: _toConsumableArray(sortParams.sorting)\n    }), searchParams);\n\n    if (!isEqual(reqParamData, listReqParams)) {\n      dispatch(setFilterListParams(cloneDeep(reqParamData)));\n    }\n  }, [searchParams, sortParams, dispatch, listReqParams]);\n  useEffect(function () {\n    dispatch(setBPMFilterLoader(true));\n    dispatch(fetchFilterList());\n    dispatch(fetchProcessDefinitionList()); // dispatch(fetchUserList());\n  }, [dispatch]);\n  useEffect(function () {\n    if (!isFilterLoading && filterList.length && !selectedFilter) {\n      var filterSelected;\n\n      if (filterList.length > 1) {\n        filterSelected = filterList.find(function (filter) {\n          return filter.name === ALL_TASKS;\n        });\n\n        if (!filterSelected) {\n          filterSelected = filterList[0];\n        }\n      } else {\n        filterSelected = filterList[0];\n      }\n\n      dispatch(setSelectedBPMFilter(filterSelected));\n    }\n  }, [filterList, isFilterLoading, selectedFilter, dispatch]);\n\n  var checkIfTaskIDExistsInList = function checkIfTaskIDExistsInList(list, id) {\n    return list.some(function (task) {\n      return task.id === id;\n    });\n  };\n\n  var SocketIOCallback = useCallback(function (refreshedTaskId, forceReload, isUpdateEvent) {\n    if (forceReload) {\n      dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current, refreshedTaskId)); //Refreshes the Tasks\n\n      if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) {\n        dispatch(setBPMTaskDetailLoader(true));\n        dispatch(setSelectedTaskID(null)); // unSelect the Task Selected\n\n        dispatch(push(\"/task/\"));\n      }\n    } else {\n      if (selectedFilterIdRef.current) {\n        if (isUpdateEvent) {\n          /* Check if the taskId exists in the loaded Task List */\n          if (checkIfTaskIDExistsInList(taskListRef.current, refreshedTaskId) === true) {\n            dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\n          }\n        } else {\n          dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\n        }\n      }\n\n      if (bpmTaskIdRef.current && refreshedTaskId === bpmTaskIdRef.current) {\n        //Refreshes task if its selected\n        dispatch(getBPMTaskDetail(bpmTaskIdRef.current, function (err, resTask) {\n          // Should dispatch When task claimed user  is not the logged in User\n          if ((resTask === null || resTask === void 0 ? void 0 : resTask.assignee) !== currentUser) {\n            dispatch(reloadTaskFormSubmission(true));\n          }\n        }));\n        dispatch(getBPMGroups(bpmTaskIdRef.current));\n      }\n    }\n  }, [dispatch, currentUser]);\n  useEffect(function () {\n    if (!SocketIOService.isConnected()) {\n      SocketIOService.connect(function (refreshedTaskId, forceReload, isUpdateEvent) {\n        return SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent);\n      });\n    } else {\n      SocketIOService.disconnect();\n      SocketIOService.connect(function (refreshedTaskId, forceReload, isUpdateEvent) {\n        return SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent);\n      });\n    }\n\n    return function () {\n      if (SocketIOService.isConnected()) SocketIOService.disconnect();\n    };\n  }, [SocketIOCallback, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    id: \"main\",\n    className: \"pt-0\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: 3,\n        xs: 12,\n        sm: 12,\n        md: 4,\n        xl: 3,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            className: \"task-section-top\",\n            children: /*#__PURE__*/_jsxDEV(TaskSortSelectedList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(ServiceFlowTaskList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"pl-0\",\n        lg: 9,\n        xs: 12,\n        sm: 12,\n        md: 8,\n        xl: 9,\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/task/:taskId?\",\n          children: /*#__PURE__*/_jsxDEV(ServiceFlowTaskDetails, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 42\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/task/:taskId/:notAvailable\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Redirect, {\n            exact: true,\n            to: \"/404\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 56\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, _this);\n}, \"zbjuN+kWJB+Ah8g6gpFLiQu2n2Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$React.memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/components/ServiceFlow/index.js"],"names":["React","useCallback","useEffect","useRef","ServiceFlowTaskList","ServiceFlowTaskDetails","Col","Container","Row","fetchFilterList","fetchProcessDefinitionList","fetchServiceTaskList","getBPMGroups","getBPMTaskDetail","useDispatch","useSelector","ALL_TASKS","reloadTaskFormSubmission","setBPMFilterLoader","setBPMTaskDetailLoader","setFilterListParams","setSelectedBPMFilter","setSelectedTaskID","TaskSortSelectedList","SocketIOService","isEqual","cloneDeep","Route","Redirect","push","memo","dispatch","filterList","state","bpmTasks","isFilterLoading","selectedFilter","selectedFilterId","id","bpmTaskId","taskId","reqData","listReqParams","sortParams","filterListSortParams","searchParams","filterListSearchParams","currentUser","user","userDetail","preferred_username","firstResult","taskList","tasksList","selectedFilterIdRef","bpmTaskIdRef","reqDataRef","firstResultsRef","taskListRef","current","reqParamData","sorting","length","filterSelected","find","filter","name","checkIfTaskIDExistsInList","list","some","task","SocketIOCallback","refreshedTaskId","forceReload","isUpdateEvent","err","resTask","assignee","isConnected","connect","disconnect"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useRef} from 'react'\r\nimport ServiceFlowTaskList from \"./list/ServiceTaskList\";\r\nimport ServiceFlowTaskDetails from \"./details/ServiceTaskDetails\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport \"./ServiceFlow.scss\";\r\nimport {\r\n  fetchFilterList,\r\n  fetchProcessDefinitionList,\r\n  fetchServiceTaskList,\r\n  getBPMGroups, getBPMTaskDetail\r\n} from \"../../apiManager/services/bpmTaskServices\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ALL_TASKS} from \"./constants/taskConstants\";\r\nimport {\r\n  reloadTaskFormSubmission,\r\n  setBPMFilterLoader,\r\n  setBPMTaskDetailLoader,\r\n  setFilterListParams,\r\n  setSelectedBPMFilter, setSelectedTaskID\r\n} from \"../../actions/bpmTaskActions\";\r\nimport TaskSortSelectedList from \"./list/sort/TaskSortSelectedList\";\r\nimport SocketIOService from \"../../services/SocketIOService\";\r\nimport isEqual from 'lodash/isEqual';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {push} from \"connected-react-router\";\r\n\r\nexport default React.memo(() => {\r\n  const dispatch= useDispatch();\r\n  const filterList = useSelector(state=> state.bpmTasks.filterList);\r\n  const isFilterLoading = useSelector(state=> state.bpmTasks.isFilterLoading);\r\n  const selectedFilter=useSelector(state=>state.bpmTasks.selectedFilter);\r\n  const selectedFilterId=useSelector(state=>state.bpmTasks.selectedFilter?.id||null);\r\n  const bpmTaskId = useSelector(state => state.bpmTasks.taskId);\r\n  const reqData = useSelector((state) => state.bpmTasks.listReqParams);\r\n  const sortParams = useSelector((state) => state.bpmTasks.filterListSortParams);\r\n  const searchParams = useSelector((state) => state.bpmTasks.filterListSearchParams);\r\n  const listReqParams = useSelector((state) => state.bpmTasks.listReqParams);\r\n  const currentUser = useSelector((state) => state.user?.userDetail?.preferred_username || '');\r\n  const firstResult = useSelector(state=> state.bpmTasks.firstResult);\r\n  const taskList = useSelector((state) => state.bpmTasks.tasksList);\r\n  const selectedFilterIdRef=useRef(selectedFilterId);\r\n  const bpmTaskIdRef=useRef(bpmTaskId);\r\n  const reqDataRef=useRef(reqData);\r\n  const firstResultsRef=useRef(firstResult);\r\n  const taskListRef=useRef(taskList);\r\n\r\n  useEffect(()=>{\r\n    selectedFilterIdRef.current=selectedFilterId;\r\n    bpmTaskIdRef.current=bpmTaskId;\r\n    reqDataRef.current=reqData;\r\n    firstResultsRef.current=firstResult;\r\n    taskListRef.current=taskList;\r\n  });\r\n\r\n  useEffect(()=>{\r\n    const reqParamData={...{sorting:[...sortParams.sorting]},...searchParams};\r\n    if(!isEqual(reqParamData,listReqParams)){\r\n      dispatch(setFilterListParams(cloneDeep(reqParamData)))\r\n    }\r\n  },[searchParams,sortParams,dispatch,listReqParams])\r\n\r\n  useEffect(()=>{\r\n    dispatch(setBPMFilterLoader(true));\r\n    dispatch(fetchFilterList());\r\n    dispatch(fetchProcessDefinitionList());\r\n    // dispatch(fetchUserList());\r\n  },[dispatch]);\r\n\r\n  useEffect(()=>{\r\n    if(!isFilterLoading && filterList.length && !selectedFilter){\r\n      let filterSelected;\r\n      if(filterList.length>1){\r\n        filterSelected = filterList.find(filter=> filter.name===ALL_TASKS);\r\n        if(!filterSelected){\r\n          filterSelected=filterList[0];\r\n        }\r\n      }else {\r\n        filterSelected = filterList[0];\r\n      }\r\n      dispatch(setSelectedBPMFilter(filterSelected));\r\n    }\r\n  },[filterList,isFilterLoading,selectedFilter,dispatch]);\r\n\r\n  const checkIfTaskIDExistsInList = (list,id)=>{\r\n    return list.some(task=>task.id===id);\r\n  }\r\n  const SocketIOCallback = useCallback((refreshedTaskId, forceReload, isUpdateEvent) => {\r\n      if(forceReload){\r\n        dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current,refreshedTaskId)); //Refreshes the Tasks\r\n        if(bpmTaskIdRef.current && refreshedTaskId===bpmTaskIdRef.current){\r\n          dispatch(setBPMTaskDetailLoader(true));\r\n          dispatch(setSelectedTaskID(null)); // unSelect the Task Selected\r\n          dispatch(push(`/task/`));\r\n        }\r\n      } else{\r\n        if(selectedFilterIdRef.current){\r\n          if(isUpdateEvent){\r\n            /* Check if the taskId exists in the loaded Task List */\r\n            if(checkIfTaskIDExistsInList(taskListRef.current,refreshedTaskId)===true){\r\n              dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\r\n            }\r\n          }else{\r\n            dispatch(fetchServiceTaskList(selectedFilterIdRef.current, firstResultsRef.current, reqDataRef.current)); //Refreshes the Task\r\n          }\r\n        }\r\n        if(bpmTaskIdRef.current && refreshedTaskId===bpmTaskIdRef.current) { //Refreshes task if its selected\r\n          dispatch(getBPMTaskDetail(bpmTaskIdRef.current,(err,resTask)=>{\r\n            // Should dispatch When task claimed user  is not the logged in User\r\n            if(resTask?.assignee!==currentUser){\r\n              dispatch(reloadTaskFormSubmission(true));\r\n            }\r\n          }));\r\n          dispatch(getBPMGroups(bpmTaskIdRef.current));\r\n        }\r\n      }\r\n    }\r\n  ,[dispatch,currentUser]);\r\n\r\n  useEffect(()=>{\r\n    if(!SocketIOService.isConnected()){\r\n        SocketIOService.connect((refreshedTaskId, forceReload, isUpdateEvent) => SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent));\r\n    }else{\r\n        SocketIOService.disconnect();\r\n        SocketIOService.connect((refreshedTaskId, forceReload, isUpdateEvent) => SocketIOCallback(refreshedTaskId, forceReload, isUpdateEvent));\r\n    }\r\n    return ()=>{\r\n      if(SocketIOService.isConnected())\r\n        SocketIOService.disconnect();\r\n    }\r\n  },[SocketIOCallback,dispatch]);\r\n\r\n\r\n  return (\r\n    <Container fluid id=\"main\" className=\"pt-0\">\r\n      <Row>\r\n        <Col lg={3} xs={12} sm={12} md={4} xl={3}>\r\n          <section>\r\n            <header className=\"task-section-top\">\r\n              <TaskSortSelectedList/>\r\n            </header>\r\n              <ServiceFlowTaskList/>\r\n          </section>\r\n        </Col>\r\n        <Col className=\"pl-0\" lg={9} xs={12} sm={12} md={8} xl={9}>\r\n          <Route path={\"/task/:taskId?\"}><ServiceFlowTaskDetails/></Route>\r\n          <Route path={\"/task/:taskId/:notAvailable\"}> <Redirect exact to='/404'/></Route>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n});\r\n"]},"metadata":{},"sourceType":"module"}