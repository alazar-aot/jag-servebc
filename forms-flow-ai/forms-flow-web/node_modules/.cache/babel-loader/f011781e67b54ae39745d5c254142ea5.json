{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\ServiceFlow\\\\list\\\\search\\\\TaskIgnoreCaseComponent.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { setIsVariableNameIgnoreCase, setIsVariableValueIgnoreCase } from \"../../../../actions/bpmTaskActions\";\nimport { isVariableTypeAvailable } from \"../../../../apiManager/services/taskSearchParamsFormatterService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar TaskIgnoreCaseComponent = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var variableNameIgnoreCase = useSelector(function (state) {\n    return state.bpmTasks.variableNameIgnoreCase;\n  });\n  var variableValueIgnoreCase = useSelector(function (state) {\n    return state.bpmTasks.variableValueIgnoreCase;\n  });\n  var filterSelections = useSelector(function (state) {\n    return state.bpmTasks.filterSearchSelections;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVariableTypeInFilter = _useState2[0],\n      setIsVariableTypeInFilter = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var setVariableNameIgnoreCase = function setVariableNameIgnoreCase(isIgnoreCase) {\n    dispatch(setIsVariableNameIgnoreCase(isIgnoreCase));\n  };\n\n  var setVariableValueIgnoreCase = function setVariableValueIgnoreCase(isIgnoreCase) {\n    dispatch(setIsVariableValueIgnoreCase(isIgnoreCase));\n  };\n\n  useEffect(function () {\n    setIsVariableTypeInFilter(isVariableTypeAvailable(filterSelections));\n  }, [filterSelections]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: filterSelections.length && isVariableTypeInFilter ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name-value-container\",\n        children: [\"For Variables, ignore case of\", /*#__PURE__*/_jsxDEV(Checkbox, {\n          className: \"check-box-design\",\n          checked: variableNameIgnoreCase,\n          onChange: function onChange() {\n            return setVariableNameIgnoreCase(!variableNameIgnoreCase);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, _this), \"name\", /*#__PURE__*/_jsxDEV(Checkbox, {\n          className: \"check-box-design\",\n          checked: variableValueIgnoreCase,\n          onChange: function onChange() {\n            return setVariableValueIgnoreCase(!variableValueIgnoreCase);\n          },\n          inputProps: {\n            'aria-label': 'primary checkbox'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, _this), \"  value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 65\n    }, _this) : null\n  }, void 0, false);\n}, \"1/eBbKk/bAlzomv7i3Msg6zynOY=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n}));\n_c2 = TaskIgnoreCaseComponent;\nexport default TaskIgnoreCaseComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskIgnoreCaseComponent$React.memo\");\n$RefreshReg$(_c2, \"TaskIgnoreCaseComponent\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/components/ServiceFlow/list/search/TaskIgnoreCaseComponent.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Checkbox","setIsVariableNameIgnoreCase","setIsVariableValueIgnoreCase","isVariableTypeAvailable","TaskIgnoreCaseComponent","memo","variableNameIgnoreCase","state","bpmTasks","variableValueIgnoreCase","filterSelections","filterSearchSelections","isVariableTypeInFilter","setIsVariableTypeInFilter","dispatch","setVariableNameIgnoreCase","isIgnoreCase","setVariableValueIgnoreCase","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAAQC,2BAAR,EAAqCC,4BAArC,QAAwE,oCAAxE;AACA,SAAQC,uBAAR,QAAsC,kEAAtC;;;AAEA,IAAMC,uBAAuB,gBAAGT,KAAK,CAACU,IAAN,SAAW,YAAI;AAAA;;AAC7C,MAAMC,sBAAsB,GAAGP,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAN,CAAeF,sBAAnB;AAAA,GAAN,CAA1C;AACA,MAAMG,uBAAuB,GAAGV,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAN,CAAeC,uBAAnB;AAAA,GAAN,CAA3C;AACA,MAAMC,gBAAgB,GAAGX,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAN,CAAeG,sBAAnB;AAAA,GAAN,CAApC;;AACA,kBAA4Dd,QAAQ,CAAC,KAAD,CAApE;AAAA;AAAA,MAAOe,sBAAP;AAAA,MAA+BC,yBAA/B;;AACA,MAAMC,QAAQ,GAAEhB,WAAW,EAA3B;;AAEA,MAAMiB,yBAAyB,GAAC,SAA1BA,yBAA0B,CAACC,YAAD,EAAgB;AAC9CF,IAAAA,QAAQ,CAACb,2BAA2B,CAACe,YAAD,CAA5B,CAAR;AACD,GAFD;;AAIA,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACD,YAAD,EAAgB;AACjDF,IAAAA,QAAQ,CAACZ,4BAA4B,CAACc,YAAD,CAA7B,CAAR;AACD,GAFD;;AAIApB,EAAAA,SAAS,CAAC,YAAI;AACZiB,IAAAA,yBAAyB,CAACV,uBAAuB,CAACO,gBAAD,CAAxB,CAAzB;AACD,GAFQ,EAEP,CAACA,gBAAD,CAFO,CAAT;AAIA,sBAAO;AAAA,cAAIA,gBAAgB,CAACQ,MAAjB,IAA2BN,sBAA3B,gBAAmD;AAAA,6BACtD;AAAM,QAAA,SAAS,EAAC,sBAAhB;AAAA,iEACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,kBADZ;AAEE,UAAA,OAAO,EAAEN,sBAFX;AAGE,UAAA,QAAQ,EAAE;AAAA,mBAAIS,yBAAyB,CAAC,CAACT,sBAAF,CAA7B;AAAA,WAHZ;AAIE,UAAA,UAAU,EAAE;AAAC,0BAAc;AAAf;AAJd;AAAA;AAAA;AAAA;AAAA,iBADF,uBAQE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,kBADZ;AAEE,UAAA,OAAO,EAAEG,uBAFX;AAGE,UAAA,QAAQ,EAAE;AAAA,mBAAIQ,0BAA0B,CAAC,CAACR,uBAAF,CAA9B;AAAA,WAHZ;AAIE,UAAA,UAAU,EAAE;AAAC,0BAAc;AAAf;AAJd;AAAA;AAAA;AAAA;AAAA,iBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADsD;AAAA;AAAA;AAAA;AAAA,aAAnD,GAgBF;AAhBF,mBAAP;AAkBD,CArC+B;AAAA,UACCV,WADD,EAEEA,WAFF,EAGLA,WAHK,EAKdD,WALc;AAAA,GAAhC;MAAMM,uB;AAuCN,eAAeA,uBAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {setIsVariableNameIgnoreCase, setIsVariableValueIgnoreCase} from \"../../../../actions/bpmTaskActions\";\r\nimport {isVariableTypeAvailable} from \"../../../../apiManager/services/taskSearchParamsFormatterService\";\r\n\r\nconst TaskIgnoreCaseComponent = React.memo(()=>{\r\n  const variableNameIgnoreCase = useSelector(state => state.bpmTasks.variableNameIgnoreCase);\r\n  const variableValueIgnoreCase = useSelector(state => state.bpmTasks.variableValueIgnoreCase);\r\n  const filterSelections = useSelector(state => state.bpmTasks.filterSearchSelections);\r\n  const [isVariableTypeInFilter, setIsVariableTypeInFilter] = useState(false);\r\n  const dispatch= useDispatch();\r\n\r\n  const setVariableNameIgnoreCase=(isIgnoreCase)=>{\r\n    dispatch(setIsVariableNameIgnoreCase(isIgnoreCase))\r\n  }\r\n\r\n  const setVariableValueIgnoreCase = (isIgnoreCase)=>{\r\n    dispatch(setIsVariableValueIgnoreCase(isIgnoreCase))\r\n  }\r\n\r\n  useEffect(()=>{\r\n    setIsVariableTypeInFilter(isVariableTypeAvailable(filterSelections));\r\n  },[filterSelections]);\r\n\r\n  return <>{ filterSelections.length && isVariableTypeInFilter? <div>\r\n          <span className=\"name-value-container\">For Variables, ignore case of\r\n            <Checkbox\r\n              className=\"check-box-design\"\r\n              checked={variableNameIgnoreCase}\r\n              onChange={()=>setVariableNameIgnoreCase(!variableNameIgnoreCase)}\r\n              inputProps={{'aria-label': 'primary checkbox'}}\r\n            />\r\n            name\r\n            <Checkbox\r\n              className=\"check-box-design\"\r\n              checked={variableValueIgnoreCase}\r\n              onChange={()=>setVariableValueIgnoreCase(!variableValueIgnoreCase)}\r\n              inputProps={{'aria-label': 'primary checkbox'}}\r\n            />  value.\r\n          </span>\r\n  </div> : null}</>\r\n\r\n})\r\n\r\nexport default TaskIgnoreCaseComponent;\r\n"]},"metadata":{},"sourceType":"module"}