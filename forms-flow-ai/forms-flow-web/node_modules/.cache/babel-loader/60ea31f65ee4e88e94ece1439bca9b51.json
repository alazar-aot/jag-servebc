{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\n\n/* istanbul ignore file */\nimport { httpGETRequest } from '../httpRequestHandler';\nimport API from '../endpoints';\nimport { serviceActionError } from '../../actions/taskApplicationHistoryActions'; //TODO move to a common action\n\nimport { getDashboards, getDashboardDetail, setInsightDetailLoader, setInsightDashboardListLoader } from '../../actions/insightActions'; // To keep track of the Indexes that were added to prevent duplication\n\nvar addedIdxs = [];\nexport var fetchDashboardsList = function fetchDashboardsList(dashboardsFromRedash) {\n  return function (dispatch) {\n    var result = [];\n    addedIdxs = [];\n    var dashboards = localStorage.getItem(\"UserDetails\");\n\n    if (!dashboards) {\n      dispatch(setInsightDashboardListLoader(false));\n      dispatch(setInsightDetailLoader(false));\n      return dispatch(serviceActionError(\"No Dashboards found\"));\n    }\n\n    dashboards = JSON.parse(dashboards).dashboards;\n\n    var _iterator = _createForOfIteratorHelper(dashboards),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dashboard = _step.value;\n        var entry = fetchCleanedDashboardsFromLocalStorage(dashboard, dashboardsFromRedash);\n        result = [].concat(_toConsumableArray(result), _toConsumableArray(entry));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    dispatch(getDashboards(result));\n  };\n};\nexport var fetchDashboardDetails = function fetchDashboardDetails(id) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    httpGETRequest(\"\".concat(API.GET_DASHBOARDS, \"/\").concat(id)).then(function (res) {\n      if (res.data) {\n        dispatch(getDashboardDetail(res.data));\n        dispatch(setInsightDetailLoader(false));\n        done(null, res);\n      } else {\n        dispatch(setInsightDetailLoader(false));\n        dispatch(serviceActionError(res));\n        done('Error Getting data');\n      }\n    }).catch(function (error) {\n      console.log(error);\n      dispatch(setInsightDetailLoader(false));\n      dispatch(serviceActionError(error));\n      done(error);\n    });\n  };\n}; // retrieves the associated dashboards from the string data\n\nexport var fetchCleanedDashboardsFromLocalStorage = function fetchCleanedDashboardsFromLocalStorage(dashboards, dashboardsFromRedash) {\n  // since the data we need is not a valid json / or stringified json, the approach taken\n  // to extract the data is string manipulation and create the objects from the extracted information.\n  var result = [];\n  var dashboardsString = dashboards.substring(1, dashboards.length - 1);\n  var dashboardsArray = dashboardsString.split(\",\");\n\n  var _iterator2 = _createForOfIteratorHelper(dashboardsArray),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _item$3;\n\n      var dashboard = _step2.value;\n\n      if (dashboard === \"{}\" || dashboard === \"\") {\n        // skip the remaining steps for the above entries\n        continue;\n      } // to identify possible object patterns and to extract the key and value splits the string based on \":\" seperator\n\n\n      var item = dashboard.split(\":\");\n      var id = null; // The data given by the api seems to have consistent patterns which are essential for\n      // a non fragile implmentation. All the entries after the first entry in the string representation of the array have\n      // space before the entry, so need to handle the two cases\n\n      if (dashboardsArray.indexOf(dashboard) === 0) {\n        var _item$;\n\n        id = Number((_item$ = item[0]) === null || _item$ === void 0 ? void 0 : _item$.substring(2, item[0].length - 1));\n      } else {\n        var _item$2;\n\n        id = Number((_item$2 = item[0]) === null || _item$2 === void 0 ? void 0 : _item$2.substring(3, item[0].length - 1));\n      }\n\n      var val = (_item$3 = item[1]) === null || _item$3 === void 0 ? void 0 : _item$3.substring(2, item[1].length - 2);\n      var obj = {}; // check wheather the dashboard is out dated or not by comparing with the redash dashboards api\n\n      var _iterator3 = _createForOfIteratorHelper(dashboardsFromRedash),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var redash = _step3.value;\n\n          if (id === redash.id && val === redash.name) {\n            // avoid possible duplicate entries by keeping track of all the ids that were added\n            if (!addedIdxs.includes(id)) {\n              obj['value'] = id;\n              obj['label'] = val;\n              result.push(obj);\n              addedIdxs.push(id);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/apiManager/services/insightServices.js"],"names":["httpGETRequest","API","serviceActionError","getDashboards","getDashboardDetail","setInsightDetailLoader","setInsightDashboardListLoader","addedIdxs","fetchDashboardsList","dashboardsFromRedash","dispatch","result","dashboards","localStorage","getItem","JSON","parse","dashboard","entry","fetchCleanedDashboardsFromLocalStorage","fetchDashboardDetails","id","done","GET_DASHBOARDS","then","res","data","catch","error","console","log","dashboardsString","substring","length","dashboardsArray","split","item","indexOf","Number","val","obj","redash","name","includes","push"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport {  httpGETRequest } from '../httpRequestHandler';\r\nimport API from '../endpoints';\r\nimport { serviceActionError } from '../../actions/taskApplicationHistoryActions'; //TODO move to a common action\r\nimport {\r\n  getDashboards,\r\n  getDashboardDetail,\r\n  setInsightDetailLoader,\r\n  setInsightDashboardListLoader\r\n} from '../../actions/insightActions';\r\n\r\n// To keep track of the Indexes that were added to prevent duplication\r\nlet addedIdxs = [];\r\n\r\nexport const fetchDashboardsList = (dashboardsFromRedash) =>{\r\n  return dispatch=>{\r\n    let result = [];\r\n        addedIdxs=[];\r\n    let dashboards = localStorage.getItem(\"UserDetails\");\r\n    if(!dashboards){\r\n        dispatch(setInsightDashboardListLoader(false))\r\n        dispatch(setInsightDetailLoader(false));\r\n      return dispatch(serviceActionError(\"No Dashboards found\"))\r\n    }\r\n    dashboards = JSON.parse(dashboards).dashboards;\r\n    for(let dashboard of dashboards){\r\n      let entry = fetchCleanedDashboardsFromLocalStorage(dashboard,dashboardsFromRedash)\r\n      result = [...result,...entry]\r\n    }\r\n    dispatch(getDashboards(result))\r\n  }\r\n}\r\n\r\nexport const fetchDashboardDetails = (id, ...rest) =>{\r\n  const done = rest.length ? rest[0] :  ()=>{};\r\n  return dispatch=>{\r\n    httpGETRequest(`${API.GET_DASHBOARDS}/${id}`).then(res=>{\r\n      if (res.data) {\r\n        dispatch(getDashboardDetail(res.data));\r\n        dispatch(setInsightDetailLoader(false));\r\n        done(null,res);\r\n      } else {\r\n        dispatch(setInsightDetailLoader(false));\r\n        dispatch(serviceActionError(res))\r\n        done('Error Getting data');\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n      dispatch(setInsightDetailLoader(false));\r\n      dispatch(serviceActionError(error))\r\n      done(error);\r\n    })\r\n  }\r\n}\r\n\r\n// retrieves the associated dashboards from the string data\r\nexport const fetchCleanedDashboardsFromLocalStorage = (dashboards,dashboardsFromRedash)=>{\r\n\r\n  // since the data we need is not a valid json / or stringified json, the approach taken\r\n  // to extract the data is string manipulation and create the objects from the extracted information.\r\n\r\n  let result =[];\r\n  let dashboardsString = dashboards.substring(1,dashboards.length-1);\r\n  let dashboardsArray = dashboardsString.split(\",\")\r\n\r\n  for(let dashboard of dashboardsArray){\r\n    if(dashboard === \"{}\" || dashboard === \"\"){\r\n      // skip the remaining steps for the above entries\r\n      continue;\r\n    }\r\n    // to identify possible object patterns and to extract the key and value splits the string based on \":\" seperator\r\n      let item = dashboard.split(\":\");\r\n      let id =null;\r\n    // The data given by the api seems to have consistent patterns which are essential for\r\n    // a non fragile implmentation. All the entries after the first entry in the string representation of the array have\r\n    // space before the entry, so need to handle the two cases\r\n      if(dashboardsArray.indexOf(dashboard) === 0){\r\n          id = Number(item[0]?.substring(2,item[0].length-1))\r\n      }else{\r\n          id = Number(item[0]?.substring(3,item[0].length-1))\r\n      }\r\n      let val = item[1]?.substring(2,item[1].length-2);\r\n      let obj ={};\r\n      // check wheather the dashboard is out dated or not by comparing with the redash dashboards api\r\n      for(let redash of dashboardsFromRedash){\r\n        if(id === redash.id && val === redash.name){\r\n          // avoid possible duplicate entries by keeping track of all the ids that were added\r\n              if(!addedIdxs.includes(id)){\r\n                obj['value'] = id;\r\n                obj['label'] =val;\r\n              result.push(obj)\r\n              addedIdxs.push(id)\r\n              }\r\n        }\r\n      }\r\n  }\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}