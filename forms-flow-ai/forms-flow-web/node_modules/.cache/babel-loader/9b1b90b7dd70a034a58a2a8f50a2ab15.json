{"ast":null,"code":"/* istanbul ignore file */\nimport ACTION_CONSTANTS from \"./actionConstants\";\nexport var setProcessList = function setProcessList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.PROCESS_STATUS_LIST,\n      payload: data\n    });\n  };\n};\nexport var setProcessStatusLoading = function setProcessStatusLoading(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_PROCESS_STATUS_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setProcessLoadError = function setProcessLoadError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_PROCESS_STATUS_LOAD_ERROR,\n      payload: data\n    });\n  };\n};\nexport var setProcessActivityLoadError = function setProcessActivityLoadError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_PROCESS_ACTIVITY_LOAD_ERROR,\n      payload: data\n    });\n  };\n};\nexport var setAllProcessList = function setAllProcessList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.PROCESS_LIST,\n      payload: data\n    });\n  };\n};\nexport var setFormProcessLoadError = function setFormProcessLoadError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_FORM_PROCESS_STATUS_LOAD_ERROR,\n      payload: data\n    });\n  };\n};\nexport var setFormProcessesData = function setFormProcessesData(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.FORM_PROCESS_LIST,\n      payload: data\n    });\n  };\n};\nexport var setProcessActivityData = function setProcessActivityData(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.PROCESS_ACTIVITIES,\n      payload: data\n    });\n  };\n};\nexport var setProcessDiagramXML = function setProcessDiagramXML(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.PROCESS_DIAGRAM_XML,\n      payload: data\n    });\n  };\n};\nexport var setProcessDiagramLoading = function setProcessDiagramLoading(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_PROCESS_DIAGRAM_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setFormPreviosData = function setFormPreviosData(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.FORM_PREVIOUS_DATA,\n      payload: data\n    });\n  };\n};\nexport var setApplicationCount = function setApplicationCount(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.APPLICATION_COUNT,\n      payload: data\n    });\n  };\n};\nexport var setIsApplicationCountLoading = function setIsApplicationCountLoading(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_APPLICATION_COUNT_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setApplicationCountResponse = function setApplicationCountResponse(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.APPLICATION_COUNT_RESPONSE,\n      payload: data\n    });\n  };\n};\nexport var setUnPublishApiError = function setUnPublishApiError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UNPUBLISH_API_ERROR,\n      payload: data\n    });\n  };\n};\nexport var setResetProcess = function setResetProcess(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.RESET_PROCESS,\n      payload: data\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/actions/processActions.js"],"names":["ACTION_CONSTANTS","setProcessList","data","dispatch","type","PROCESS_STATUS_LIST","payload","setProcessStatusLoading","IS_PROCESS_STATUS_LOADING","setProcessLoadError","IS_PROCESS_STATUS_LOAD_ERROR","setProcessActivityLoadError","IS_PROCESS_ACTIVITY_LOAD_ERROR","setAllProcessList","PROCESS_LIST","setFormProcessLoadError","IS_FORM_PROCESS_STATUS_LOAD_ERROR","setFormProcessesData","FORM_PROCESS_LIST","setProcessActivityData","PROCESS_ACTIVITIES","setProcessDiagramXML","PROCESS_DIAGRAM_XML","setProcessDiagramLoading","IS_PROCESS_DIAGRAM_LOADING","setFormPreviosData","FORM_PREVIOUS_DATA","setApplicationCount","APPLICATION_COUNT","setIsApplicationCountLoading","IS_APPLICATION_COUNT_LOADING","setApplicationCountResponse","APPLICATION_COUNT_RESPONSE","setUnPublishApiError","UNPUBLISH_API_ERROR","setResetProcess","RESET_PROCESS"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport ACTION_CONSTANTS from \"./actionConstants\";\r\n\r\nexport const setProcessList = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.PROCESS_STATUS_LIST,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setProcessStatusLoading = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_PROCESS_STATUS_LOADING,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setProcessLoadError = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_PROCESS_STATUS_LOAD_ERROR,\r\n    payload: data,\r\n  });\r\n};\r\n\r\n\r\nexport const setProcessActivityLoadError = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_PROCESS_ACTIVITY_LOAD_ERROR,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setAllProcessList = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.PROCESS_LIST,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setFormProcessLoadError = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_FORM_PROCESS_STATUS_LOAD_ERROR,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setFormProcessesData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.FORM_PROCESS_LIST,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setProcessActivityData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.PROCESS_ACTIVITIES,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setProcessDiagramXML = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.PROCESS_DIAGRAM_XML,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setProcessDiagramLoading = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_PROCESS_DIAGRAM_LOADING,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setFormPreviosData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.FORM_PREVIOUS_DATA,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setApplicationCount = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.APPLICATION_COUNT,\r\n    payload:data\r\n  });\r\n};\r\n\r\nexport const setIsApplicationCountLoading = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_APPLICATION_COUNT_LOADING,\r\n    payload:data\r\n  });\r\n};\r\n\r\nexport const setApplicationCountResponse = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.APPLICATION_COUNT_RESPONSE,\r\n    payload:data\r\n  });\r\n};\r\n\r\nexport const setUnPublishApiError = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UNPUBLISH_API_ERROR,\r\n    payload:data\r\n  });\r\n};\r\n\r\nexport const setResetProcess = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.RESET_PROCESS,\r\n    payload:data\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}