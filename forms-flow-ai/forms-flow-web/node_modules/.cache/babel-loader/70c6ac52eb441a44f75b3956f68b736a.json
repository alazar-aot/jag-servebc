{"ast":null,"code":"/* istanbul ignore file */\nexport var getProcessReq = function getProcessReq(form, submissionId, action, user) {\n  var requestFormat = {\n    formId: form._id,\n    submissionId: submissionId,\n    formUrl: \"\".concat(window.location.origin, \"/form/\").concat(form._id, \"/submission/\").concat(submissionId)\n  };\n  return requestFormat;\n};\nexport var getTaskSubmitFormReq = function getTaskSubmitFormReq(formUrl, applicationId, actionType) {\n  var formRequestFormat = {\n    variables: {\n      formUrl: {\n        value: formUrl\n      },\n      applicationId: {\n        value: applicationId\n      }\n    }\n  };\n\n  if (actionType) {\n    formRequestFormat.variables.action = {\n      value: actionType\n    };\n  }\n\n  return formRequestFormat;\n};\nexport var formatForms = function formatForms(forms) {\n  return forms.map(function (form) {\n    return {\n      \"_id\": form.formId,\n      \"title\": form.formName,\n      processKey: form.processKey\n    };\n  });\n};\n\nvar dynamicSort = function dynamicSort(property) {\n  var sortOrder = 1;\n\n  if (property[0] === \"-\") {\n    sortOrder = -1;\n    property = property.substr(1);\n  }\n\n  return function (a, b) {\n    /* next line works with strings and numbers,\r\n     * and you may want to customize it to your needs\r\n     */\n    var result = a[property].toUpperCase() < b[property].toUpperCase() ? -1 : a[property].toUpperCase() > b[property].toUpperCase() ? 1 : 0;\n    return result * sortOrder;\n  };\n};\n\nexport var getSearchResults = function getSearchResults(forms, searchText) {\n  var searchResult = [];\n\n  if (searchText === \"\") {\n    searchResult = forms;\n  } else {\n    searchResult = forms === null || forms === void 0 ? void 0 : forms.filter(function (e) {\n      var caseInSensitive = e.title.toUpperCase();\n      return caseInSensitive.includes(searchText.toUpperCase());\n    });\n  }\n\n  return searchResult;\n};\nexport var getPaginatedForms = function getPaginatedForms(forms, limit, page, sort, search) {\n  forms.sort(dynamicSort(sort));\n  return forms.slice((page - 1) * limit, (page - 1) * limit + limit);\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/apiManager/services/bpmServices.js"],"names":["getProcessReq","form","submissionId","action","user","requestFormat","formId","_id","formUrl","window","location","origin","getTaskSubmitFormReq","applicationId","actionType","formRequestFormat","variables","value","formatForms","forms","map","formName","processKey","dynamicSort","property","sortOrder","substr","a","b","result","toUpperCase","getSearchResults","searchText","searchResult","filter","e","caseInSensitive","title","includes","getPaginatedForms","limit","page","sort","search","slice"],"mappings":"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","sourcesContent":["\r\n /* istanbul ignore file */\r\nexport const getProcessReq = (form, submissionId, action, user) => {\r\n  const requestFormat = {\r\n    formId: form._id,\r\n    submissionId: submissionId,\r\n    formUrl:`${window.location.origin}/form/${form._id}/submission/${submissionId}`\r\n  };\r\n  return requestFormat;\r\n};\r\n\r\n\r\nexport const getTaskSubmitFormReq = (formUrl,applicationId, actionType) => {\r\n  let formRequestFormat={\r\n    variables: {\r\n      formUrl: {\r\n        value: formUrl\r\n      },\r\n      applicationId: {\r\n        value: applicationId\r\n      }\r\n    }\r\n  };\r\n  if(actionType){\r\n    formRequestFormat.variables.action= {\r\n      value: actionType,\r\n    };\r\n  }\r\n  return formRequestFormat;\r\n}\r\n\r\nexport const formatForms = (forms) => {\r\n  return forms.map(form=> {\r\n    return {\"_id\":form.formId , \"title\": form.formName, processKey:form.processKey}\r\n  });\r\n}\r\nconst dynamicSort = (property) => {\r\n  let sortOrder = 1;\r\n  if(property[0] === \"-\") {\r\n    sortOrder = -1;\r\n    property = property.substr(1);\r\n  }\r\n  return  (a,b)=> {\r\n    /* next line works with strings and numbers,\r\n     * and you may want to customize it to your needs\r\n     */\r\n    const result = (a[property].toUpperCase() < b[property].toUpperCase()) ? -1 : (a[property].toUpperCase() > b[property].toUpperCase()) ? 1 : 0;\r\n    return result * sortOrder;\r\n  }\r\n};\r\n\r\nexport const getSearchResults = (forms,searchText) => {\r\n  let searchResult = [];\r\n  if(searchText === \"\"){\r\n    searchResult = forms;\r\n  }else {\r\n     searchResult = forms?.filter((e)=>{\r\n      const caseInSensitive = e.title.toUpperCase()\r\n      return caseInSensitive.includes(searchText.toUpperCase());\r\n   })\r\n  }\r\n  return searchResult; \r\n}\r\nexport const getPaginatedForms = (forms, limit, page, sort,search) => {\r\n      forms.sort(dynamicSort(sort));\r\n      return  forms.slice((page-1)*limit,((page-1)*limit)+limit);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}