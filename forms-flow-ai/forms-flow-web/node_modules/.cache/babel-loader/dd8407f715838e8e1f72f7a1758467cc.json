{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _slicedToArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\Form\\\\FileUpload\\\\SelectFormForDownload.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Checkbox } from \"@material-ui/core\";\nimport { setFormCheckList } from \"../../../actions/checkListActions\";\nimport { getFormattedForm } from \"../constants/formListConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SelectFormForDownload = /*#__PURE__*/React.memo(_c = _s(function (_ref) {\n  _s();\n\n  var form = _ref.form,\n      type = _ref.type;\n  var formCheckList = useSelector(function (state) {\n    return state.formCheckList.formList;\n  });\n  var forms = useSelector(function (state) {\n    return state.forms.forms;\n  });\n  var formObj = getFormattedForm(form);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFormChecked = _useState2[0],\n      setIsFormChecked = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAllFormChecked = _useState4[0],\n      setIsAllFormChecked = _useState4[1];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (formObj && formCheckList.length) {\n      var isFormAdded = formCheckList.some(function (formData) {\n        return formData.path === formObj.path;\n      });\n      setIsFormChecked(isFormAdded);\n    } else {\n      setIsFormChecked(false);\n    }\n  }, [formCheckList, formObj]);\n  useEffect(function () {\n    if (formCheckList.length) {\n      var pathList = formCheckList.map(function (formData) {\n        return formData.path;\n      });\n      setIsAllFormChecked(forms.every(function (formData) {\n        return pathList.includes(formData.path);\n      }));\n    } else {\n      setIsAllFormChecked(false);\n    }\n  }, [formCheckList, forms]);\n\n  var updateFormCheckList = function updateFormCheckList(formInsert) {\n    var updatedFormCheckList = _toConsumableArray(formCheckList);\n\n    if (formInsert) {\n      updatedFormCheckList.push(_objectSpread({}, formObj));\n    } else {\n      var index = updatedFormCheckList.findIndex(function (formData) {\n        return formData.path === formObj.path;\n      });\n      updatedFormCheckList.splice(index, 1);\n    }\n\n    dispatch(setFormCheckList(updatedFormCheckList));\n  };\n\n  var addAllFormCheckList = function addAllFormCheckList(allFormInsert) {\n    if (!allFormInsert) {\n      dispatch(setFormCheckList([]));\n    } else {\n      var updatedFormCheckList = _toConsumableArray(formCheckList);\n\n      forms.forEach(function (formData) {\n        var isFormAdded = formCheckList.some(function (formCheck) {\n          return formData.path === formCheck.path;\n        });\n\n        if (!isFormAdded) {\n          var formObjToInsert = getFormattedForm(formData);\n          updatedFormCheckList.push(_objectSpread({}, formObjToInsert));\n        }\n      });\n      dispatch(setFormCheckList(updatedFormCheckList));\n    }\n  };\n\n  if (type === \"all\") {\n    return /*#__PURE__*/_jsxDEV(Checkbox, {\n      onChange: function onChange() {\n        return addAllFormCheckList(!isAllFormChecked);\n      },\n      checked: isAllFormChecked,\n      title: \"Select All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    checked: isFormChecked,\n    onChange: function onChange() {\n      return updateFormCheckList(!isFormChecked);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, _this);\n}, \"6kb231K8HGZsbpyJuD9FgHccsyE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n}));\n_c2 = SelectFormForDownload;\nexport default SelectFormForDownload;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectFormForDownload$React.memo\");\n$RefreshReg$(_c2, \"SelectFormForDownload\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/components/Form/FileUpload/SelectFormForDownload.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Checkbox","setFormCheckList","getFormattedForm","SelectFormForDownload","memo","form","type","formCheckList","state","formList","forms","formObj","isFormChecked","setIsFormChecked","isAllFormChecked","setIsAllFormChecked","dispatch","length","isFormAdded","some","formData","path","pathList","map","every","includes","updateFormCheckList","formInsert","updatedFormCheckList","push","index","findIndex","splice","addAllFormCheckList","allFormInsert","forEach","formCheck","formObjToInsert"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport {setFormCheckList} from \"../../../actions/checkListActions\";\r\nimport {getFormattedForm} from \"../constants/formListConstants\";\r\n\r\n\r\nconst SelectFormForDownload = React.memo(({form,type}) => {\r\n  const formCheckList = useSelector(state => state.formCheckList.formList);\r\n  const forms= useSelector(state=>state.forms.forms);\r\n  const formObj = getFormattedForm(form);\r\n  const [isFormChecked,setIsFormChecked]=useState(false);\r\n  const [isAllFormChecked,setIsAllFormChecked]=useState(false);\r\n  const dispatch= useDispatch();\r\n\r\n  useEffect(()=>{\r\n    if(formObj && formCheckList.length){\r\n      const isFormAdded = formCheckList.some(formData=>formData.path===formObj.path);\r\n      setIsFormChecked(isFormAdded);\r\n    }else{\r\n      setIsFormChecked(false);\r\n    }\r\n  },[formCheckList,formObj]);\r\n\r\n  useEffect(()=>{\r\n    if(formCheckList.length){\r\n      const pathList = formCheckList.map(formData=>formData.path)\r\n      setIsAllFormChecked(forms.every(formData => pathList.includes(formData.path)));\r\n    }else{\r\n      setIsAllFormChecked(false)\r\n    }\r\n  },[formCheckList,forms])\r\n\r\n  const updateFormCheckList = (formInsert) => {\r\n    let updatedFormCheckList = [...formCheckList];\r\n   if(formInsert){\r\n     updatedFormCheckList.push({...formObj});\r\n   }else{\r\n     const index = updatedFormCheckList.findIndex(formData=>formData.path===formObj.path);\r\n     updatedFormCheckList.splice(index,1);\r\n   }\r\n    dispatch(setFormCheckList(updatedFormCheckList))\r\n  }\r\n\r\n  const addAllFormCheckList = (allFormInsert) => {\r\n    if(!allFormInsert){\r\n      dispatch(setFormCheckList([]));\r\n    }else {\r\n      let updatedFormCheckList = [...formCheckList];\r\n      forms.forEach(formData => {\r\n        const isFormAdded = formCheckList.some(formCheck => formData.path === formCheck.path);\r\n        if (!isFormAdded) {\r\n          let formObjToInsert = getFormattedForm(formData)\r\n          updatedFormCheckList.push({...formObjToInsert});\r\n        }\r\n      })\r\n      dispatch(setFormCheckList(updatedFormCheckList));\r\n    }\r\n  }\r\n\r\n\r\n  if(type===\"all\"){\r\n    return <Checkbox onChange={()=>addAllFormCheckList(!isAllFormChecked)} checked={isAllFormChecked} title=\"Select All\"/>\r\n  }\r\n\r\n  return <Checkbox\r\n    checked={isFormChecked}\r\n    onChange={()=>updateFormCheckList(!isFormChecked)}/>\r\n})\r\n\r\nexport default SelectFormForDownload;"]},"metadata":{},"sourceType":"module"}