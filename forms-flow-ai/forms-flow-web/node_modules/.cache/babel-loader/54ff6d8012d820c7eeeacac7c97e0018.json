{"ast":null,"code":"/* istanbul ignore file */\nimport { httpGETRequest } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport { setMetricsSubmissionCount, setMetricsLoader, setMetricsStatusLoader, setMetricsSubmissionStatusCount, setSelectedMetricsId, setMetricsLoadError, setMetricsStatusLoadError } from \"../../actions/metricsActions\";\nexport var fetchMetricsSubmissionCount = function fetchMetricsSubmissionCount(fromDate, toDate, setSearchBy) {\n  return function (dispatch) {\n    dispatch(setMetricsLoadError(false));\n    httpGETRequest(\"\".concat(API.METRICS_SUBMISSIONS, \"?from=\").concat(fromDate, \"&to=\").concat(toDate, \"&orderBy=\").concat(setSearchBy)).then(function (res) {\n      if (res.data) {\n        dispatch(setMetricsSubmissionCount(res.data.applications));\n        dispatch(setMetricsLoader(false));\n\n        if (res.data.applications && res.data.applications[0]) {\n          dispatch(fetchMetricsSubmissionStatusCount(res.data.applications[0].mapperId, fromDate, toDate, setSearchBy));\n        } else {\n          dispatch(setMetricsSubmissionStatusCount([]));\n          dispatch(setMetricsStatusLoader(false));\n        }\n      } else {\n        // TODO error handling\n        console.log(\"Error\", res);\n        dispatch(setMetricsStatusLoader(false));\n        dispatch(setMetricsLoadError(true)); // dispatch(setMetricsLoader(false));\n      }\n    }).catch(function (error) {\n      // TODO error handling\n      console.log(\"Error\", error); // dispatch(serviceActionError(error));\n\n      dispatch(setMetricsLoader(false));\n      dispatch(setMetricsLoadError(true));\n    });\n  };\n};\nexport var fetchMetricsSubmissionStatusCount = function fetchMetricsSubmissionStatusCount(id, fromDate, toDate, setSearchBy) {\n  // const done = rest.length ? rest[0] : () => {};\n  // const fdate = moment.utc(fromDate).format(\"yyyy-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\n  // const ldate = moment.utc(toDate).format(\"yyyy-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\n  return function (dispatch) {\n    dispatch(setSelectedMetricsId(id));\n    httpGETRequest(\"\".concat(API.METRICS_SUBMISSIONS, \"/\").concat(id, \"?from=\").concat(fromDate, \"&to=\").concat(toDate, \"&orderBy=\").concat(setSearchBy)).then(function (res) {\n      if (res.data) {\n        dispatch(setMetricsSubmissionStatusCount(res.data.applications));\n        dispatch(setMetricsStatusLoader(false)); // done(null, res.data);\n      } else {\n        dispatch(setMetricsSubmissionStatusCount([])); // TODO error handling\n        // dispatch(serviceActionError(res));\n\n        dispatch(setMetricsStatusLoader(false));\n      }\n    }).catch(function (error) {\n      dispatch(setMetricsStatusLoadError(true)); // TODO error handling\n\n      console.log(\"Error\", error); // dispatch(serviceActionError(error));\n\n      dispatch(setMetricsStatusLoader(false)); // done(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/apiManager/services/metricsServices.js"],"names":["httpGETRequest","API","setMetricsSubmissionCount","setMetricsLoader","setMetricsStatusLoader","setMetricsSubmissionStatusCount","setSelectedMetricsId","setMetricsLoadError","setMetricsStatusLoadError","fetchMetricsSubmissionCount","fromDate","toDate","setSearchBy","dispatch","METRICS_SUBMISSIONS","then","res","data","applications","fetchMetricsSubmissionStatusCount","mapperId","console","log","catch","error","id"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport { httpGETRequest } from \"../httpRequestHandler\";\r\nimport API from \"../endpoints\";\r\nimport {\r\n  setMetricsSubmissionCount,\r\n  setMetricsLoader,\r\n  setMetricsStatusLoader,\r\n  setMetricsSubmissionStatusCount,\r\n  setSelectedMetricsId,\r\n  setMetricsLoadError,\r\n  setMetricsStatusLoadError,\r\n} from \"../../actions/metricsActions\";\r\n\r\nexport const fetchMetricsSubmissionCount = (fromDate, toDate, setSearchBy,...rest) => {\r\n  return (dispatch) => {\r\n    dispatch(setMetricsLoadError(false));\r\n    httpGETRequest(`${API.METRICS_SUBMISSIONS}?from=${fromDate}&to=${toDate}&orderBy=${setSearchBy}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setMetricsSubmissionCount(res.data.applications));\r\n          dispatch(setMetricsLoader(false));\r\n          if (res.data.applications && res.data.applications[0]) {\r\n            dispatch(\r\n              fetchMetricsSubmissionStatusCount(\r\n                res.data.applications[0].mapperId,\r\n                fromDate,\r\n                toDate,\r\n                setSearchBy\r\n              )\r\n            );\r\n          } else {\r\n            dispatch(setMetricsSubmissionStatusCount([]));\r\n            dispatch(setMetricsStatusLoader(false));\r\n          }\r\n        } else {\r\n          // TODO error handling\r\n          console.log(\"Error\", res);\r\n          dispatch(setMetricsStatusLoader(false));\r\n          dispatch(setMetricsLoadError(true));\r\n          // dispatch(setMetricsLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // TODO error handling\r\n        console.log(\"Error\", error);\r\n        // dispatch(serviceActionError(error));\r\n        dispatch(setMetricsLoader(false));\r\n        dispatch(setMetricsLoadError(true));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchMetricsSubmissionStatusCount = (id, fromDate, toDate ,setSearchBy) => {\r\n  // const done = rest.length ? rest[0] : () => {};\r\n  // const fdate = moment.utc(fromDate).format(\"yyyy-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\r\n  // const ldate = moment.utc(toDate).format(\"yyyy-MM-DDTHH:mm:ssZ\").replace(\"+\",\"%2B\");\r\n\r\n  return (dispatch) => {\r\n    dispatch(setSelectedMetricsId(id));\r\n    httpGETRequest(\r\n      `${API.METRICS_SUBMISSIONS}/${id}?from=${fromDate}&to=${toDate}&orderBy=${setSearchBy}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          dispatch(setMetricsSubmissionStatusCount(res.data.applications));\r\n          dispatch(setMetricsStatusLoader(false));\r\n          // done(null, res.data);\r\n        } else {\r\n          dispatch(setMetricsSubmissionStatusCount([]));\r\n          // TODO error handling\r\n          // dispatch(serviceActionError(res));\r\n          dispatch(setMetricsStatusLoader(false));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setMetricsStatusLoadError(true));\r\n        // TODO error handling\r\n        console.log(\"Error\", error);\r\n        // dispatch(serviceActionError(error));\r\n        dispatch(setMetricsStatusLoader(false));\r\n        // done(error);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}