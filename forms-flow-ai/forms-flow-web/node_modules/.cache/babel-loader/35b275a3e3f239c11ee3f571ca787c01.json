{"ast":null,"code":"/* istanbul ignore file */\nimport { ROLES, USER_RESOURCE_FORM_ID, Keycloak_Client, ANONYMOUS_USER, ANONYMOUS_ID, FORMIO_JWT_SECRET } from \"../constants/constants\";\nimport { setUserRole, setUserToken, setUserDetails } from \"../actions/bpmActions\";\nimport { BPM_BASE_URL } from \"../apiManager/endpoints/config\";\nimport { AppConfig } from '../config';\nimport { WEB_BASE_URL, WEB_BASE_CUSTOM_URL } from \"../apiManager/endpoints/config\";\nimport { _kc } from \"../constants/tenantConstant\";\n\nvar jwt = require(\"jsonwebtoken\");\n/**\r\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\r\n *\r\n * @param onAuthenticatedCallback\r\n */\n// const KeycloakData = new Keycloak(tenantDetail);\n\n\nvar initKeycloak = function initKeycloak(store) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  KeycloakData.init({\n    onLoad: \"check-sso\",\n    promiseType: \"native\",\n    silentCheckSsoRedirectUri: window.location.origin + \"/silent-check-sso.html\",\n    pkceMethod: \"S256\",\n    checkLoginIframe: false\n  }).then(function (authenticated) {\n    if (authenticated) {\n      if (KeycloakData.resourceAccess[Keycloak_Client]) {\n        (function () {\n          var UserRoles = KeycloakData.resourceAccess[Keycloak_Client].roles;\n          store.dispatch(setUserRole(UserRoles));\n          store.dispatch(setUserToken(KeycloakData.token)); //Set Cammunda/Formio Base URL\n\n          setApiBaseUrlToLocalStorage();\n          var roles = [];\n\n          var _loop = function _loop(i) {\n            var roleData = ROLES.find(function (x) {\n              return x.title === UserRoles[i];\n            });\n\n            if (roleData) {\n              roles = roles.concat(roleData.id);\n            }\n          };\n\n          for (var i = 0; i < UserRoles.length; i++) {\n            _loop(i);\n          }\n\n          KeycloakData.loadUserInfo().then(function (res) {\n            return store.dispatch(setUserDetails(res));\n          });\n          var email = KeycloakData.tokenParsed.email || \"external\";\n          authenticateFormio(email, roles); // onAuthenticatedCallback();\n\n          done(null, KeycloakData);\n          refreshToken(store);\n        })();\n      } else {\n        doLogout();\n      }\n    } else {\n      console.warn(\"not authenticated!\");\n      doLogin();\n    }\n  });\n};\n\nvar refreshInterval;\n\nvar refreshToken = function refreshToken(store) {\n  refreshInterval = setInterval(function () {\n    KeycloakData && KeycloakData.updateToken(5).then(function (refreshed) {\n      if (refreshed) {\n        store.dispatch(setUserToken(KeycloakData.token));\n      }\n    }).catch(function (error) {\n      console.log(error);\n      userLogout();\n    });\n  }, 6000);\n};\n/**\r\n * Logout function\r\n */\n\n\nvar userLogout = function userLogout() {\n  localStorage.clear();\n  sessionStorage.clear();\n  clearInterval(refreshInterval);\n  doLogout();\n};\n\nvar setApiBaseUrlToLocalStorage = function setApiBaseUrlToLocalStorage() {\n  localStorage.setItem(\"bpmApiUrl\", BPM_BASE_URL);\n  localStorage.setItem(\"formioApiUrl\", AppConfig.projectUrl);\n  localStorage.setItem(\"formsflow.ai.url\", window.location.origin);\n  localStorage.setItem(\"formsflow.ai.api.url\", WEB_BASE_URL);\n  localStorage.setItem(\"customApiUrl\", WEB_BASE_CUSTOM_URL);\n};\n\nvar getFormioToken = function getFormioToken() {\n  return localStorage.getItem(\"formioToken\");\n}; //const getUserEmail = () => KeycloakData.tokenParsed.email;\n\n/*const updateToken = (successCallback) => {\r\n  return KeycloakData.updateToken(5).then(successCallback).catch(doLogin);\r\n};*/\n\n\nvar authenticateAnonymousUser = function authenticateAnonymousUser(store) {\n  var user = ANONYMOUS_USER;\n  var roles = [ANONYMOUS_ID];\n  store.dispatch(setUserRole([user]));\n  authenticateFormio(user, roles);\n};\n\nvar authenticateFormio = function authenticateFormio(user, roles) {\n  var FORMIO_TOKEN = jwt.sign({\n    external: true,\n    form: {\n      _id: USER_RESOURCE_FORM_ID // form.io form Id of user resource\n\n    },\n    user: {\n      _id: user,\n      // keep it like that\n      roles: roles\n    }\n  }, FORMIO_JWT_SECRET); // TODO Move JWT secret key to COME From ENV\n  //TODO remove this token from local Storage on logout and try to move to redux store as well\n\n  localStorage.setItem(\"formioToken\", FORMIO_TOKEN);\n};\n\nvar KeycloakData = _kc;\nvar doLogin = KeycloakData.login;\nvar doLogout = KeycloakData.logout;\n\nvar getToken = function getToken() {\n  return KeycloakData.token;\n};\n\nvar UserService = {\n  initKeycloak: initKeycloak,\n  userLogout: userLogout,\n  getToken: getToken,\n  getFormioToken: getFormioToken,\n  authenticateAnonymousUser: authenticateAnonymousUser\n};\nexport default UserService;","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/services/UserService.js"],"names":["ROLES","USER_RESOURCE_FORM_ID","Keycloak_Client","ANONYMOUS_USER","ANONYMOUS_ID","FORMIO_JWT_SECRET","setUserRole","setUserToken","setUserDetails","BPM_BASE_URL","AppConfig","WEB_BASE_URL","WEB_BASE_CUSTOM_URL","_kc","jwt","require","initKeycloak","store","done","KeycloakData","init","onLoad","promiseType","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","checkLoginIframe","then","authenticated","resourceAccess","UserRoles","roles","dispatch","token","setApiBaseUrlToLocalStorage","i","roleData","find","x","title","concat","id","length","loadUserInfo","res","email","tokenParsed","authenticateFormio","refreshToken","doLogout","console","warn","doLogin","refreshInterval","setInterval","updateToken","refreshed","catch","error","log","userLogout","localStorage","clear","sessionStorage","clearInterval","setItem","projectUrl","getFormioToken","getItem","authenticateAnonymousUser","user","FORMIO_TOKEN","sign","external","form","_id","login","logout","getToken","UserService"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport {\r\n  ROLES,\r\n  USER_RESOURCE_FORM_ID,\r\n  Keycloak_Client,\r\n  ANONYMOUS_USER,\r\n  ANONYMOUS_ID,\r\n  FORMIO_JWT_SECRET\r\n} from \"../constants/constants\";\r\nimport {\r\n  setUserRole,\r\n  setUserToken,\r\n  setUserDetails,\r\n} from \"../actions/bpmActions\";\r\nimport {BPM_BASE_URL} from \"../apiManager/endpoints/config\";\r\nimport {AppConfig} from '../config';\r\nimport {WEB_BASE_URL , WEB_BASE_CUSTOM_URL} from \"../apiManager/endpoints/config\";\r\n\r\nimport {_kc} from \"../constants/tenantConstant\";\r\n\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n/**\r\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\r\n *\r\n * @param onAuthenticatedCallback\r\n */\r\n// const KeycloakData = new Keycloak(tenantDetail);\r\n\r\n\r\nconst initKeycloak = (store, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  KeycloakData\r\n    .init({\r\n      onLoad: \"check-sso\",\r\n      promiseType: \"native\",\r\n      silentCheckSsoRedirectUri:\r\n        window.location.origin + \"/silent-check-sso.html\",\r\n      pkceMethod: \"S256\",\r\n      checkLoginIframe: false\r\n    })\r\n    .then((authenticated) => {\r\n      if (authenticated) {\r\n        if (KeycloakData.resourceAccess[Keycloak_Client]) {\r\n          const UserRoles = KeycloakData.resourceAccess[Keycloak_Client].roles;\r\n          store.dispatch(setUserRole(UserRoles));\r\n          store.dispatch(setUserToken(KeycloakData.token));\r\n          //Set Cammunda/Formio Base URL\r\n          setApiBaseUrlToLocalStorage();\r\n\r\n          let roles = [];\r\n          for (let i = 0; i < UserRoles.length; i++) {\r\n            const roleData = ROLES.find((x) => x.title === UserRoles[i]);\r\n            if (roleData) {\r\n              roles = roles.concat(roleData.id);\r\n            }\r\n          }\r\n          KeycloakData.loadUserInfo().then((res) => store.dispatch(setUserDetails(res)));\r\n          const email = KeycloakData.tokenParsed.email || \"external\";\r\n          authenticateFormio(email, roles);\r\n          // onAuthenticatedCallback();\r\n          done(null, KeycloakData);\r\n          refreshToken(store);\r\n        } else {\r\n          doLogout();\r\n        }\r\n      } else {\r\n        console.warn(\"not authenticated!\");\r\n        doLogin();\r\n      }\r\n    });\r\n};\r\nlet refreshInterval;\r\nconst refreshToken = (store) => {\r\n  refreshInterval = setInterval(() => {\r\n    KeycloakData && KeycloakData.updateToken(5).then((refreshed)=> {\r\n      if (refreshed) {\r\n        store.dispatch(setUserToken(KeycloakData.token));\r\n      }\r\n    }).catch( (error)=> {\r\n      console.log(error);\r\n      userLogout();\r\n    });\r\n  }, 6000);\r\n}\r\n\r\n\r\n/**\r\n * Logout function\r\n */\r\nconst userLogout = () => {\r\n  localStorage.clear();\r\n  sessionStorage.clear();\r\n  clearInterval(refreshInterval);\r\n  doLogout();\r\n};\r\n\r\nconst setApiBaseUrlToLocalStorage = ()=> {\r\n  localStorage.setItem(\"bpmApiUrl\", BPM_BASE_URL);\r\n  localStorage.setItem(\"formioApiUrl\", AppConfig.projectUrl);\r\n  localStorage.setItem(\"formsflow.ai.url\",window.location.origin)\r\n  localStorage.setItem(\"formsflow.ai.api.url\", WEB_BASE_URL);\r\n  localStorage.setItem(\"customApiUrl\", WEB_BASE_CUSTOM_URL);\r\n}\r\n\r\n\r\n\r\nconst getFormioToken = () => localStorage.getItem(\"formioToken\");\r\n\r\n//const getUserEmail = () => KeycloakData.tokenParsed.email;\r\n\r\n/*const updateToken = (successCallback) => {\r\n  return KeycloakData.updateToken(5).then(successCallback).catch(doLogin);\r\n};*/\r\n\r\nconst authenticateAnonymousUser = (store) => {\r\n  const user = ANONYMOUS_USER;\r\n  const roles = [ANONYMOUS_ID];\r\n  store.dispatch(setUserRole([user]));\r\n  authenticateFormio(user, roles);\r\n};\r\n\r\nconst authenticateFormio = (user, roles) => {\r\n  \r\n  const FORMIO_TOKEN = jwt.sign(\r\n    {\r\n      external: true,\r\n      form: {\r\n        _id: USER_RESOURCE_FORM_ID, // form.io form Id of user resource\r\n      },\r\n      user: {\r\n        _id: user, // keep it like that\r\n        roles: roles,\r\n      },\r\n    },\r\n    FORMIO_JWT_SECRET\r\n  ); // TODO Move JWT secret key to COME From ENV\r\n  //TODO remove this token from local Storage on logout and try to move to redux store as well\r\n  localStorage.setItem(\"formioToken\", FORMIO_TOKEN);\r\n};\r\n\r\n\r\nconst KeycloakData= _kc;\r\n\r\nconst doLogin = KeycloakData.login;\r\nconst doLogout = KeycloakData.logout;\r\nconst getToken = () => KeycloakData.token;\r\n\r\nconst UserService ={\r\n  initKeycloak,\r\n  userLogout,\r\n  getToken,\r\n  getFormioToken,\r\n  authenticateAnonymousUser\r\n};\r\n\r\nexport default UserService;\r\n"]},"metadata":{},"sourceType":"module"}