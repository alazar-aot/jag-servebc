{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _slicedToArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\Insights\\\\Insights.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Select from 'react-select';\nimport NoData from './nodashboard';\nimport { Route, Redirect } from \"react-router\";\nimport { fetchDashboardsList, fetchDashboardDetails } from \"../../apiManager/services/insightServices\";\nimport { setInsightDetailLoader, setInsightDashboardListLoader } from \"../../actions/insightActions\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport Loading from \"../../containers/Loading\";\nimport { fetchdashboards } from \"../../apiManager/services/dashboardsService\";\nimport { SpinnerSVG } from \"../../containers/SpinnerSVG\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar Insights = /*#__PURE__*/React.memo(_c = _s(function (props) {\n  _s();\n\n  var getDashboardsList = props.getDashboardsList,\n      getDashboardDetail = props.getDashboardDetail,\n      dashboards = props.dashboards,\n      activeDashboard = props.activeDashboard,\n      isInsightLoading = props.isInsightLoading,\n      isDashboardLoading = props.isDashboardLoading,\n      getDashboards = props.getDashboards,\n      dashboardsFromRedash = props.dashboardsFromRedash;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dashboardSelected = _useState2[0],\n      setDashboardSelected = _useState2[1];\n\n  useEffect(function () {\n    getDashboardsList(dashboardsFromRedash);\n  }, [getDashboardsList, dashboardsFromRedash]);\n  useEffect(function () {\n    getDashboards();\n  }, [getDashboards]);\n  useEffect(function () {\n    if (dashboards.length > 0) {\n      setDashboardSelected(dashboards[0]);\n    }\n  }, [dashboards]);\n  useEffect(function () {\n    if (dashboardSelected) {\n      getDashboardDetail(dashboardSelected.value);\n    }\n  }, [dashboardSelected, getDashboardDetail]);\n\n  var NoPublicUrlMessage = function NoPublicUrlMessage() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-100 col-12 text-center div-middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-tachometer fa-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" No Public url found \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, _this);\n  };\n\n  if (isDashboardLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mb-4\",\n      id: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insights mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            \"data-testid\": \"Insight\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"insights-title\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-lightbulb-o fa-lg\",\n                \"aria-hidden\": \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 13\n              }, _this), \" Insights\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              className: \"line-hr\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app-title-container mt-3\",\n                \"data-testid\": \"Insight\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"insight-title\",\n                  \"data-testid\": \"Dashboard\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-bars mr-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 19\n                  }, _this), \" Dashboard\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-3 mb-2\",\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    options: dashboards,\n                    onChange: setDashboardSelected,\n                    placeholder: \"Select Dashboard\",\n                    value: dashboardSelected\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 17\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 15\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 13\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n            active: isInsightLoading || !activeDashboard.name,\n            styles: {\n              overlay: function overlay(base) {\n                return _objectSpread(_objectSpread({}, base), {}, {\n                  background: 'rgba(255, 255, 255)'\n                });\n              }\n            },\n            spinner: /*#__PURE__*/_jsxDEV(SpinnerSVG, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, _this),\n            className: \"col-12\",\n            children: dashboards.length > 0 ? activeDashboard.public_url ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              title: \"dashboard\",\n              style: {\n                width: '100%',\n                height: 'auto',\n                overflow: 'visible',\n                border: 'none',\n                minHeight: '100vh'\n              },\n              src: activeDashboard.public_url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 45\n            }, _this) : /*#__PURE__*/_jsxDEV(NoPublicUrlMessage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 22\n            }, _this) : /*#__PURE__*/_jsxDEV(NoData, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/insights/:notAvailable\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Redirect, {\n        exact: true,\n        to: \"/404\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 48\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n}, \"JiLm3qdupnV1Tt0AvZU6TYLzWl4=\"));\n_c2 = Insights;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isDashboardLoading: state.insights.isDashboardLoading,\n    isInsightLoading: state.insights.isInsightLoading,\n    dashboards: state.insights.dashboardsList,\n    activeDashboard: state.insights.dashboardDetail,\n    dashboardsFromRedash: state.dashboardReducer.dashboards\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getDashboardsList: function getDashboardsList(dashboardsFromRedash) {\n      dispatch(setInsightDashboardListLoader(true));\n      dispatch(fetchDashboardsList(dashboardsFromRedash));\n    },\n    getDashboardDetail: function getDashboardDetail(dashboardId) {\n      dispatch(setInsightDetailLoader(true));\n      dispatch(fetchDashboardDetails(dashboardId));\n    },\n    getDashboards: function getDashboards() {\n      dispatch(setInsightDashboardListLoader(true));\n      dispatch(fetchdashboards());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Insights);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Insights$React.memo\");\n$RefreshReg$(_c2, \"Insights\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/components/Insights/Insights.js"],"names":["React","useEffect","useState","connect","Select","NoData","Route","Redirect","fetchDashboardsList","fetchDashboardDetails","setInsightDetailLoader","setInsightDashboardListLoader","LoadingOverlay","Loading","fetchdashboards","SpinnerSVG","Insights","memo","props","getDashboardsList","getDashboardDetail","dashboards","activeDashboard","isInsightLoading","isDashboardLoading","getDashboards","dashboardsFromRedash","dashboardSelected","setDashboardSelected","length","value","NoPublicUrlMessage","name","overlay","base","background","public_url","width","height","overflow","border","minHeight","mapStateToProps","state","insights","dashboardsList","dashboardDetail","dashboardReducer","mapDispatchToProps","dispatch","dashboardId"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Select from 'react-select'\r\nimport NoData from './nodashboard';\r\nimport { Route, Redirect } from \"react-router\";\r\nimport {fetchDashboardsList, fetchDashboardDetails} from \"../../apiManager/services/insightServices\";\r\nimport {setInsightDetailLoader, setInsightDashboardListLoader} from \"../../actions/insightActions\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport Loading from \"../../containers/Loading\";\r\nimport { fetchdashboards } from \"../../apiManager/services/dashboardsService\";\r\nimport { SpinnerSVG } from \"../../containers/SpinnerSVG\";\r\n\r\nconst Insights = React.memo((props) => {\r\n  const {getDashboardsList, getDashboardDetail, dashboards, activeDashboard, isInsightLoading, isDashboardLoading,getDashboards,dashboardsFromRedash} = props;\r\n  const [dashboardSelected, setDashboardSelected] = useState(null);\r\n\r\n  useEffect(() => {\r\n      getDashboardsList(dashboardsFromRedash);\r\n  }, [getDashboardsList,dashboardsFromRedash]);\r\n\r\n  useEffect(()=>{\r\n    getDashboards();\r\n  },[getDashboards])\r\n\r\n  useEffect(()=>{\r\n    if(dashboards.length>0){\r\n      setDashboardSelected(dashboards[0]);\r\n    }\r\n  },[dashboards])\r\n  useEffect(() => {\r\n    if(dashboardSelected){\r\n      getDashboardDetail(dashboardSelected.value);\r\n    }\r\n  }, [dashboardSelected, getDashboardDetail]);\r\n\r\nconst NoPublicUrlMessage = ()=>(\r\n  <div className=\"h-100 col-12 text-center div-middle\">\r\n      <i className=\"fa fa-tachometer fa-lg\"/>\r\n      <br></br>\r\n      <br></br>\r\n      <label> No Public url found </label>\r\n    </div>\r\n)\r\n  if (isDashboardLoading) {\r\n    return <Loading />;\r\n  }\r\n  return (\r\n    <>\r\n    <div className=\"container mb-4\" id=\"main\">\r\n      <div className=\"insights mb-2\">\r\n        <div className=\"row \">\r\n          <div className=\"col-12\"  data-testid=\"Insight\">\r\n            <h1 className=\"insights-title\">\r\n            <i className=\"fa fa-lightbulb-o fa-lg\" aria-hidden=\"true\"/> Insights\r\n            </h1>\r\n            <hr className=\"line-hr\"/>\r\n            <div className=\"col-12\">\r\n              <div className=\"app-title-container mt-3\"  data-testid=\"Insight\">\r\n                <h3 className=\"insight-title\" data-testid=\"Dashboard\">\r\n                  <i className=\"fa fa-bars mr-1\"/> Dashboard\r\n                </h3>\r\n\r\n                <div className=\"col-3 mb-2\">\r\n                  <Select\r\n                    options={dashboards}\r\n                    onChange={setDashboardSelected}\r\n                    placeholder='Select Dashboard'\r\n                    value={dashboardSelected}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <LoadingOverlay active={isInsightLoading || !activeDashboard.name} styles={{\r\n        overlay: (base) => ({\r\n          ...base,\r\n          background: 'rgba(255, 255, 255)'\r\n        })\r\n      }} spinner={<SpinnerSVG />} className=\"col-12\">\r\n            {dashboards.length > 0 ?\r\n             ( activeDashboard.public_url ? <iframe\r\n                  title=\"dashboard\"\r\n                  style={{\r\n                    width: '100%',\r\n                    height: 'auto',\r\n                    overflow: 'visible',\r\n                    border: 'none',\r\n                    minHeight: '100vh',\r\n                  }}\r\n                  src={activeDashboard.public_url}\r\n                  />:<NoPublicUrlMessage />)\r\n              :\r\n              <NoData/>\r\n            }\r\n          </LoadingOverlay>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <Route path={\"/insights/:notAvailable\"}> <Redirect exact to='/404'/></Route>\r\n    </>\r\n  );\r\n});\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isDashboardLoading: state.insights.isDashboardLoading,\r\n    isInsightLoading: state.insights.isInsightLoading,\r\n    dashboards: state.insights.dashboardsList,\r\n    activeDashboard: state.insights.dashboardDetail,\r\n    dashboardsFromRedash:state.dashboardReducer.dashboards,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getDashboardsList: (dashboardsFromRedash) => {\r\n      dispatch(setInsightDashboardListLoader(true));\r\n      dispatch(\r\n      fetchDashboardsList(dashboardsFromRedash)\r\n      )\r\n    },\r\n    getDashboardDetail: (dashboardId) => {\r\n      dispatch(setInsightDetailLoader(true));\r\n      dispatch(fetchDashboardDetails(dashboardId))\r\n    },\r\n    getDashboards:()=>{\r\n      dispatch(setInsightDashboardListLoader(true)); \r\n      dispatch(fetchdashboards())\r\n    }\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Insights);\r\n"]},"metadata":{},"sourceType":"module"}