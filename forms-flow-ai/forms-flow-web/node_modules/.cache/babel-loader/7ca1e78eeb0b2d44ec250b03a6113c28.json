{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\ServiceFlow\\\\filter\\\\ServiceTaskFilterListDropDown.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React\n/*{useEffect}*/\nfrom \"react\";\nimport { NavDropdown } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSelectedBPMFilter, setSelectedTaskID } from \"../../../actions/bpmTaskActions\";\nimport { Link } from \"react-router-dom\";\n/*import {Link} from \"react-router-dom\";*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ServiceFlowFilterListDropDown = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var dispatch = useDispatch();\n  var filterList = useSelector(function (state) {\n    return state.bpmTasks.filterList;\n  });\n  var isFilterLoading = useSelector(function (state) {\n    return state.bpmTasks.isFilterLoading;\n  });\n  var selectedFilter = useSelector(function (state) {\n    return state.bpmTasks.selectedFilter;\n  });\n\n  var changeFilterSelection = function changeFilterSelection(filter) {\n    dispatch(setSelectedBPMFilter(filter));\n    dispatch(setSelectedTaskID(null));\n  };\n\n  var renderFilterList = function renderFilterList() {\n    if (filterList.length) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: filterList.map(function (filter, index) {\n          return /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n            as: Link,\n            to: \"/task\",\n            className: \"main-nav nav-item \".concat((filter === null || filter === void 0 ? void 0 : filter.id) === (selectedFilter === null || selectedFilter === void 0 ? void 0 : selectedFilter.id) ? \"active-tab\" : \"\"),\n            onClick: function onClick() {\n              return changeFilterSelection(filter);\n            },\n            children: [filter === null || filter === void 0 ? void 0 : filter.name, \" \", \"(\".concat(filter.itemCount || 0, \")\")]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false);\n    } else {\n      return /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n        className: \"not-selected mt-2 ml-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-info-circle mr-2 mt-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, _this), \"No Filters Found\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, _this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isFilterLoading ? /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }, _this) : renderFilterList()\n  }, void 0, false);\n}, \"qjWwYewPpnnzvX7fs8mv3dNqlAM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n}));\n_c2 = ServiceFlowFilterListDropDown;\nexport default ServiceFlowFilterListDropDown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ServiceFlowFilterListDropDown$React.memo\");\n$RefreshReg$(_c2, \"ServiceFlowFilterListDropDown\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/components/ServiceFlow/filter/ServiceTaskFilterListDropDown.js"],"names":["React","NavDropdown","useDispatch","useSelector","setSelectedBPMFilter","setSelectedTaskID","Link","ServiceFlowFilterListDropDown","memo","dispatch","filterList","state","bpmTasks","isFilterLoading","selectedFilter","changeFilterSelection","filter","renderFilterList","length","map","index","id","name","itemCount"],"mappings":";;;;AAAA,OAAOA;AAAM;AAAb,KAAkC,OAAlC;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,oBAAR,EAA8BC,iBAA9B,QAAsD,iCAAtD;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA;;;;AAGA,IAAMC,6BAA6B,gBAAGP,KAAK,CAACQ,IAAN,SAAW,YAAM;AAAA;;AACrD,MAAMC,QAAQ,GAAEP,WAAW,EAA3B;AACA,MAAMQ,UAAU,GAAGP,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAGA,KAAK,CAACC,QAAN,CAAeF,UAAlB;AAAA,GAAN,CAA9B;AACA,MAAMG,eAAe,GAAGV,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAGA,KAAK,CAACC,QAAN,CAAeC,eAAlB;AAAA,GAAN,CAAnC;AACA,MAAMC,cAAc,GAACX,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAEA,KAAK,CAACC,QAAN,CAAeE,cAAjB;AAAA,GAAN,CAAhC;;AACA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,MAAD,EAAU;AACtCP,IAAAA,QAAQ,CAACL,oBAAoB,CAACY,MAAD,CAArB,CAAR;AACAP,IAAAA,QAAQ,CAACJ,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACD,GAHD;;AAMA,MAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAIP,UAAU,CAACQ,MAAf,EAAuB;AACrB,0BACE;AAAA,kBACGR,UAAU,CAACS,GAAX,CAAe,UAACH,MAAD,EAAQI,KAAR;AAAA,8BACd,QAAC,WAAD,CAAa,IAAb;AAAkB,YAAA,EAAE,EAAEd,IAAtB;AAA4B,YAAA,EAAE,EAAC,OAA/B;AAAuC,YAAA,SAAS,8BAAuB,CAAAU,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEK,EAAR,OAAeP,cAAf,aAAeA,cAAf,uBAAeA,cAAc,CAAEO,EAA/B,IAAoC,YAApC,GAAmD,EAA1E,CAAhD;AAC8B,YAAA,OAAO,EAAE;AAAA,qBAAIN,qBAAqB,CAACC,MAAD,CAAzB;AAAA,aADvC;AAAA,uBAEGA,MAFH,aAEGA,MAFH,uBAEGA,MAAM,CAAEM,IAFX,kBAEuBN,MAAM,CAACO,SAAP,IAAoB,CAF3C;AAAA,aACuBH,KADvB;AAAA;AAAA;AAAA;AAAA,mBADc;AAAA,SAAf;AADH,uBADF;AAWD,KAZD,MAYO;AACL,0BACI,QAAC,WAAD,CAAa,IAAb;AAAkB,QAAA,SAAS,EAAC,wBAA5B;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,iBADF;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ;AAMD;AACF,GArBD;;AAsBA,sBAAQ;AAAA,cACLP,eAAe,gBAAE,QAAC,WAAD,CAAa,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAF,GAAmDI,gBAAgB;AAD7E,mBAAR;AAGD,CApCqC;AAAA,UACpBf,WADoB,EAEjBC,WAFiB,EAGZA,WAHY,EAIfA,WAJe;AAAA,GAAtC;MAAMI,6B;AAsCN,eAAeA,6BAAf","sourcesContent":["import React /*{useEffect}*/ from \"react\";\r\nimport {NavDropdown} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSelectedBPMFilter, setSelectedTaskID} from \"../../../actions/bpmTaskActions\";\r\nimport {Link} from \"react-router-dom\";\r\n/*import {Link} from \"react-router-dom\";*/\r\n\r\n\r\nconst ServiceFlowFilterListDropDown = React.memo(() => {\r\n  const dispatch= useDispatch();\r\n  const filterList = useSelector(state=> state.bpmTasks.filterList);\r\n  const isFilterLoading = useSelector(state=> state.bpmTasks.isFilterLoading);\r\n  const selectedFilter=useSelector(state=>state.bpmTasks.selectedFilter);\r\n  const changeFilterSelection = (filter)=>{\r\n    dispatch(setSelectedBPMFilter(filter));\r\n    dispatch(setSelectedTaskID(null));\r\n  }\r\n\r\n\r\n  const renderFilterList = () => {\r\n    if (filterList.length) {\r\n      return (\r\n        <>\r\n          {filterList.map((filter,index)=> (\r\n            <NavDropdown.Item as={Link} to='/task' className={`main-nav nav-item ${filter?.id === selectedFilter?.id ? \"active-tab\" : \"\"}`}\r\n                              key={index} onClick={()=>changeFilterSelection(filter)}>\r\n              {filter?.name} {`(${ filter.itemCount || 0})`}\r\n            </NavDropdown.Item>\r\n            )\r\n          )}\r\n        </>\r\n      )\r\n    } else {\r\n      return (\r\n          <NavDropdown.Item className=\"not-selected mt-2 ml-1\">\r\n            <i className=\"fa fa-info-circle mr-2 mt-1\"/>\r\n            No Filters Found\r\n          </NavDropdown.Item>\r\n      )\r\n    }\r\n  }\r\n  return  <>\r\n    {isFilterLoading? <NavDropdown.Item>Loading...</NavDropdown.Item>: renderFilterList()}\r\n    </>\r\n});\r\n\r\nexport default ServiceFlowFilterListDropDown;\r\n"]},"metadata":{},"sourceType":"module"}