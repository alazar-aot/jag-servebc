{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/* istanbul ignore file */\nimport { httpDELETERequest, httpGETRequest, httpPOSTRequest, httpPUTRequest } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport { setProcessStatusLoading, setProcessList, setProcessActivityLoadError, setProcessLoadError, setAllProcessList, setFormProcessesData, setFormProcessLoadError, setProcessActivityData, setProcessDiagramXML, setProcessDiagramLoading, setFormPreviosData, setApplicationCountResponse, setUnPublishApiError, setResetProcess } from \"../../actions/processActions\";\nimport { setApplicationCount } from \"../../actions/processActions\";\nimport { replaceUrl } from \"../../helper/helper\";\nimport UserService from \"../../services/UserService\";\nimport { toast } from \"react-toastify\";\nexport var getProcessStatusList = function getProcessStatusList(processId, taskId) {\n  return function (dispatch) {\n    dispatch(setProcessStatusLoading(true));\n    dispatch(setProcessLoadError(false));\n    var apiUrlProcessId = replaceUrl(API.PROCESS_STATE, \"<process_key>\", processId);\n    var apiURLWithtaskId = replaceUrl(apiUrlProcessId, \"<task_key>\", taskId);\n    httpGETRequest(apiURLWithtaskId).then(function (res) {\n      if (res.data) {\n        dispatch(setProcessStatusLoading(false));\n        dispatch(setProcessLoadError(false));\n        dispatch(setProcessList(res.data.status));\n      } else {\n        dispatch(setProcessStatusLoading(false));\n        dispatch(setProcessList([]));\n        dispatch(setProcessLoadError(true));\n      }\n    }).catch(function (error) {\n      dispatch(setProcessStatusLoading(false));\n      dispatch(setProcessLoadError(true));\n    });\n  };\n};\n/**\r\n *\r\n * @param  {...any} rest\r\n */\n\nexport var fetchAllBpmProcesses = function fetchAllBpmProcesses() {\n  var done = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : function () {};\n  return function (dispatch) {\n    httpGETRequest(API.PROCESSES, {}, UserService.getToken(), true).then(function (res) {\n      if (res.data) {\n        dispatch(setAllProcessList(res.data.process));\n        done(null, res.data);\n      } else {\n        dispatch(setAllProcessList([]));\n        dispatch(setProcessLoadError(true));\n      }\n    }).catch(function (error) {\n      // dispatch(setProcessStatusLoading(false));\n      dispatch(setProcessLoadError(true));\n    });\n  };\n};\n/**\r\n *\r\n * @param  {...any} rest\r\n */\n\nexport var getFormProcesses = function getFormProcesses(formId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    httpGETRequest(\"\".concat(API.FORM_PROCESSES, \"/\").concat(formId), {}, UserService.getToken(), true).then(function (res) {\n      if (res.data) {\n        dispatch(getApplicationCount(res.data.id));\n        dispatch(setFormPreviosData(res.data));\n        dispatch(setFormProcessesData(res.data)); // need to check api and put exact respose\n\n        done(null, res.data);\n      } else {\n        dispatch(setFormPreviosData([]));\n        dispatch(setFormProcessesData([]));\n        dispatch(setProcessLoadError(true));\n        done('no data', null);\n      }\n    }).catch(function (error) {\n      // dispatch(setProcessStatusLoading(false));\n      dispatch(setFormProcessLoadError(true));\n    });\n  };\n};\nexport var getApplicationCount = function getApplicationCount(mapperId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var apiUrlClaimTask;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              apiUrlClaimTask = replaceUrl(API.GET_FORM_COUNT, \"<mapper id>\", mapperId);\n              _context.next = 3;\n              return httpGETRequest(apiUrlClaimTask).then(function (res) {\n                var _res$data;\n\n                var applicationCount = +((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.value);\n                dispatch(setApplicationCount(applicationCount));\n                dispatch(setApplicationCountResponse(true));\n                done(null, res);\n              }).catch(function (error) {\n                // dispatch(setProcessStatusLoading(false));\n                dispatch(setApplicationCount(0));\n                dispatch(setApplicationCountResponse(true));\n                done('no data', null);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var saveFormProcessMapper = function saveFormProcessMapper(data) {\n  var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var done = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : function () {};\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (update) {\n                httpPUTRequest(\"\".concat(API.FORM, \"/\").concat(data.id), data).then( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            if (res.data) {\n                              // dispatch(setFormProcessesData(res.data));\n                              done(null, res.data);\n                            } else {\n                              dispatch(setFormProcessesData([]));\n                              done(null, []);\n                            } // dispatch(setFormProcessesData([]));\n\n\n                          case 1:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()).catch(function (error) {\n                  dispatch(getFormProcesses(data.formId));\n                  dispatch(setFormProcessesData([]));\n                  toast.error(\"Form process failed\");\n                  console.log(\"Error\", error);\n                  dispatch(setFormProcessLoadError(true));\n                  done(error);\n                });\n              } else {\n                httpPOSTRequest(\"\".concat(API.FORM), data).then( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(res) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (res.data) {\n                              dispatch(getApplicationCount(res.data.id));\n                              dispatch(setFormProcessesData(res.data));\n                              done(null, res.data);\n                            } else {\n                              dispatch(setFormProcessesData([]));\n                              done(null, []);\n                            }\n\n                          case 1:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x4) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()).catch(function (error) {\n                  dispatch(getFormProcesses(data.formId));\n                  toast.error(\"Form process failed\");\n                  console.log(\"Error\", error);\n                  dispatch(setFormProcessLoadError(true));\n                  done(error);\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n/**\r\n *\r\n * @param  {...any} rest\r\n */\n\nexport var getProcessActivities = function getProcessActivities(process_instance_id) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var apiUrlProcessActivities = replaceUrl(API.PROCESS_ACTIVITIES, \"<process_instance_id>\", process_instance_id);\n  return function (dispatch) {\n    httpGETRequest(apiUrlProcessActivities, {}, UserService.getToken(), true).then(function (res) {\n      if (res.data) {\n        dispatch(setProcessActivityData(res.data.childActivityInstances));\n        dispatch(setProcessActivityLoadError(false));\n      } else {\n        dispatch(setProcessActivityData(null));\n        dispatch(setProcessActivityLoadError(true));\n      }\n\n      done(null, res.data);\n    }).catch(function (error) {\n      done(error);\n      dispatch(setProcessActivityData(null));\n      dispatch(setProcessActivityLoadError(true));\n    });\n  };\n};\nexport var fetchDiagram = function fetchDiagram(process_key) {\n  var url = replaceUrl(API.PROCESSES_XML, \"<process_key>\", process_key);\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    httpGETRequest(url, {}, UserService.getToken(), true).then(function (res) {\n      if (res.data && res.data.bpmn20Xml) {\n        dispatch(setProcessDiagramXML(res.data.bpmn20Xml)); // console.log('res.data.bpmn20Xml>>',res.data.bpmn20Xml);\n      } else {\n        dispatch(setProcessDiagramXML(\"\"));\n      }\n\n      dispatch(setProcessDiagramLoading(false));\n      done(null, res.data);\n    }).catch(function (error) {\n      dispatch(setProcessDiagramXML(\"\"));\n      dispatch(setProcessDiagramLoading(false));\n      done(error);\n    });\n  };\n};\nexport var resetFormProcessData = function resetFormProcessData() {\n  return function (dispatch) {\n    dispatch(setResetProcess());\n  };\n};\nexport var unPublishForm = function unPublishForm(mapperId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  var url = replaceUrl(API.UNPUBLISH_FORMS, \"<mapper id>\", mapperId);\n  return function (dispatch) {\n    httpDELETERequest(url).then(function (res) {\n      toast.success(\"Form deleted successfully\");\n      dispatch(resetFormProcessData());\n      done(null, res.data);\n    }).catch(function (error) {\n      toast.error(\"Form unpublishing Failed\");\n      console.log(\"error\", error);\n      dispatch(setUnPublishApiError(true));\n      done(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/apiManager/services/processServices.js"],"names":["httpDELETERequest","httpGETRequest","httpPOSTRequest","httpPUTRequest","API","setProcessStatusLoading","setProcessList","setProcessActivityLoadError","setProcessLoadError","setAllProcessList","setFormProcessesData","setFormProcessLoadError","setProcessActivityData","setProcessDiagramXML","setProcessDiagramLoading","setFormPreviosData","setApplicationCountResponse","setUnPublishApiError","setResetProcess","setApplicationCount","replaceUrl","UserService","toast","getProcessStatusList","processId","taskId","dispatch","apiUrlProcessId","PROCESS_STATE","apiURLWithtaskId","then","res","data","status","catch","error","fetchAllBpmProcesses","done","length","PROCESSES","getToken","process","getFormProcesses","formId","FORM_PROCESSES","getApplicationCount","id","mapperId","apiUrlClaimTask","GET_FORM_COUNT","applicationCount","value","saveFormProcessMapper","update","FORM","console","log","getProcessActivities","process_instance_id","apiUrlProcessActivities","PROCESS_ACTIVITIES","childActivityInstances","fetchDiagram","process_key","url","PROCESSES_XML","bpmn20Xml","resetFormProcessData","unPublishForm","UNPUBLISH_FORMS","success"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\n import { httpDELETERequest, httpGETRequest,httpPOSTRequest, httpPUTRequest } from \"../httpRequestHandler\";\r\n import API from \"../endpoints\";\r\n import {\r\n   setProcessStatusLoading,\r\n   setProcessList,\r\n   setProcessActivityLoadError,\r\n   setProcessLoadError,\r\n   setAllProcessList,\r\n   setFormProcessesData,\r\n   setFormProcessLoadError,\r\n   setProcessActivityData,\r\n   setProcessDiagramXML,\r\n   setProcessDiagramLoading,\r\n   setFormPreviosData,\r\n   setApplicationCountResponse,\r\n   setUnPublishApiError,\r\n   setResetProcess\r\n } from \"../../actions/processActions\";\r\n import { setApplicationCount } from \"../../actions/processActions\";\r\n import { replaceUrl } from \"../../helper/helper\";\r\n import UserService from \"../../services/UserService\";\r\n import { toast } from \"react-toastify\";\r\n export const getProcessStatusList = (processId, taskId) => {\r\n   return (dispatch) => {\r\n     dispatch(setProcessStatusLoading(true));\r\n     dispatch(setProcessLoadError(false));\r\n     const apiUrlProcessId = replaceUrl(\r\n       API.PROCESS_STATE,\r\n       \"<process_key>\",\r\n       processId\r\n     );\r\n \r\n     const apiURLWithtaskId = replaceUrl(apiUrlProcessId, \"<task_key>\", taskId);\r\n \r\n     httpGETRequest(apiURLWithtaskId)\r\n       .then((res) => {\r\n         if (res.data) {\r\n           dispatch(setProcessStatusLoading(false));\r\n           dispatch(setProcessLoadError(false));\r\n           dispatch(setProcessList(res.data.status));\r\n         } else {\r\n           dispatch(setProcessStatusLoading(false));\r\n           dispatch(setProcessList([]));\r\n           dispatch(setProcessLoadError(true));\r\n         }\r\n       })\r\n       .catch((error) => {\r\n         dispatch(setProcessStatusLoading(false));\r\n         dispatch(setProcessLoadError(true));\r\n       });\r\n   };\r\n };\r\n \r\n /**\r\n  *\r\n  * @param  {...any} rest\r\n  */\r\n export const fetchAllBpmProcesses = (...rest) => {\r\n   const done = rest.length ? rest[0] : () => {};\r\n   return (dispatch) => {\r\n     httpGETRequest(API.PROCESSES, {}, UserService.getToken(), true)\r\n       .then((res) => {\r\n         if (res.data) {\r\n           dispatch(setAllProcessList(res.data.process));\r\n           done(null, res.data);\r\n         } else {\r\n           dispatch(setAllProcessList([]));\r\n           dispatch(setProcessLoadError(true));\r\n         }\r\n       })\r\n       .catch((error) => {\r\n         // dispatch(setProcessStatusLoading(false));\r\n         dispatch(setProcessLoadError(true));\r\n       });\r\n   };\r\n };\r\n \r\n /**\r\n  *\r\n  * @param  {...any} rest\r\n  */\r\n export const getFormProcesses = (formId, ...rest) => {\r\n   const done = rest.length ? rest[0] : () => {\r\n   };\r\n   return (dispatch) => {\r\n     httpGETRequest(\r\n       `${API.FORM_PROCESSES}/${formId}`,\r\n       {},\r\n       UserService.getToken(),\r\n       true\r\n     )\r\n       .then((res) => {\r\n         if (res.data) {\r\n           dispatch(getApplicationCount(res.data.id));\r\n           dispatch(setFormPreviosData(res.data));\r\n           dispatch(setFormProcessesData(res.data));\r\n          // need to check api and put exact respose\r\n          done(null, res.data);\r\n         } else {\r\n           dispatch(setFormPreviosData([]))\r\n           dispatch(setFormProcessesData([]));\r\n           dispatch(setProcessLoadError(true));\r\n          done('no data', null);\r\n         }\r\n       })\r\n       .catch((error) => {\r\n         // dispatch(setProcessStatusLoading(false));\r\n         dispatch(setFormProcessLoadError(true));\r\n       });\r\n   };\r\n };\r\n \r\n export const getApplicationCount = (mapperId,...rest)=>{\r\n  const done = rest.length ? rest[0] : () => {};\r\n   return async(dispatch) => {\r\n     let apiUrlClaimTask = replaceUrl(\r\n       API.GET_FORM_COUNT,\r\n       \"<mapper id>\",\r\n        mapperId\r\n     );\r\n      await httpGETRequest(apiUrlClaimTask).then((res)=>{\r\n         const applicationCount = +res.data?.value;\r\n         dispatch(setApplicationCount(applicationCount));\r\n         dispatch(setApplicationCountResponse(true));\r\n        done(null,res)\r\n       })\r\n       .catch((error) => {\r\n        // dispatch(setProcessStatusLoading(false));\r\n        dispatch(setApplicationCount(0));\r\n        dispatch(setApplicationCountResponse(true));\r\n        done('no data', null);\r\n      });\r\n   }\r\n }\r\n \r\n export const saveFormProcessMapper = (data, update = false, ...rest) => {\r\n   const done = rest.length ? rest[0] : () => {};\r\n   return  async (dispatch) => {\r\n     if (update) {\r\n       httpPUTRequest(`${API.FORM}/${data.id}`, data).then(async(res) => {\r\n         if(res.data){\r\n        // dispatch(setFormProcessesData(res.data));\r\n         done(null, res.data);\r\n         }\r\n         else{\r\n          dispatch(setFormProcessesData([]));\r\n          done(null, []);\r\n         }\r\n         // dispatch(setFormProcessesData([]));\r\n       })\r\n       .catch((error) => {\r\n         dispatch(getFormProcesses(data.formId));\r\n         dispatch(setFormProcessesData([]));\r\n         toast.error(\"Form process failed\");\r\n         console.log(\"Error\", error);\r\n         dispatch(setFormProcessLoadError(true));\r\n         done(error);\r\n       });\r\n     } else {\r\n        httpPOSTRequest(`${API.FORM}`, data).then(async(res) => {\r\n\r\n         if(res.data){  \r\n           dispatch(getApplicationCount(res.data.id));\r\n           dispatch(setFormProcessesData(res.data));\r\n           done(null, res.data);\r\n         }\r\n         else{\r\n          dispatch(setFormProcessesData([]));\r\n          done(null, []);\r\n         }\r\n       })\r\n       .catch((error) => {\r\n         dispatch(getFormProcesses(data.formId));\r\n         toast.error(\"Form process failed\");\r\n         console.log(\"Error\", error);\r\n         dispatch(setFormProcessLoadError(true));\r\n         done(error);\r\n       });\r\n     }\r\n     \r\n \r\n   };\r\n };\r\n \r\n /**\r\n  *\r\n  * @param  {...any} rest\r\n  */\r\n export const getProcessActivities = (process_instance_id, ...rest) => {\r\n   const done = rest.length ? rest[0] : () => {};\r\n   const apiUrlProcessActivities= replaceUrl(\r\n     API.PROCESS_ACTIVITIES,\r\n     \"<process_instance_id>\",\r\n     process_instance_id\r\n   );\r\n   return (dispatch) => {\r\n     httpGETRequest(\r\n       apiUrlProcessActivities,\r\n       {},\r\n       UserService.getToken(),\r\n       true\r\n     )\r\n       .then((res) => {\r\n         if (res.data) {\r\n           dispatch(setProcessActivityData(res.data.childActivityInstances));\r\n           dispatch(setProcessActivityLoadError(false));\r\n         } else {\r\n           dispatch(setProcessActivityData(null));\r\n           dispatch(setProcessActivityLoadError(true));\r\n         }\r\n         done(null,res.data);\r\n       })\r\n       .catch((error) => {\r\n         done(error);\r\n         dispatch(setProcessActivityData(null));\r\n         dispatch(setProcessActivityLoadError(true));\r\n       });\r\n   };\r\n };\r\n \r\n export const fetchDiagram = (process_key, ...rest) => {\r\n   const url =replaceUrl(API.PROCESSES_XML,\"<process_key>\",process_key)\r\n   const done = rest.length ? rest[0] : () => {};\r\n   return (dispatch) => {\r\n     httpGETRequest(\r\n       url,\r\n       {},\r\n       UserService.getToken(),\r\n       true\r\n     )\r\n     .then((res) => {\r\n       if (res.data && res.data.bpmn20Xml) {\r\n         dispatch(setProcessDiagramXML(res.data.bpmn20Xml));\r\n         // console.log('res.data.bpmn20Xml>>',res.data.bpmn20Xml);\r\n       } else {\r\n         dispatch(setProcessDiagramXML(\"\"));\r\n       }\r\n       dispatch(setProcessDiagramLoading(false));\r\n       done(null,res.data);\r\n     })\r\n     .catch((error) => {\r\n         dispatch(setProcessDiagramXML(\"\"));\r\n         dispatch(setProcessDiagramLoading(false));\r\n         done(error);\r\n       });\r\n   };\r\n };\r\n\r\n export const resetFormProcessData = ()=>{\r\n  return(dispatch)=>{\r\n    dispatch(setResetProcess())\r\n  }\r\n }\r\n \r\n \r\n export const unPublishForm = (mapperId, ...rest) =>{\r\n   const done = rest.length ? rest[0] : () => {};\r\n   const url = replaceUrl(API.UNPUBLISH_FORMS,\"<mapper id>\",mapperId)\r\n   return(dispatch) =>{\r\n     httpDELETERequest(url).then((res)=>{\r\n      toast.success(`Form deleted successfully`);\r\n      dispatch(resetFormProcessData());\r\n      done(null,res.data);\r\n     })\r\n     .catch((error)=>{\r\n       toast.error(\"Form unpublishing Failed\");\r\n       console.log(\"error\",error)\r\n       dispatch(setUnPublishApiError(true));\r\n       done(error);\r\n     })\r\n   }\r\n }"]},"metadata":{},"sourceType":"module"}