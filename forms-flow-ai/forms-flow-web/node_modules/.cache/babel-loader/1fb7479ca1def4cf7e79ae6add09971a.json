{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\ServiceFlow\\\\list\\\\search\\\\TaskFilterSearchType.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Filter_Search_Types } from \"../../constants/taskConstants\";\nimport TaskFilterDropdown from \"./TaskFilterDropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TaskFilterSearchType = /*#__PURE__*/React.memo(_c = _s(function (_ref) {\n  _s();\n\n  var filter = _ref.filter,\n      index = _ref.index,\n      handleFilterUpdate = _ref.handleFilterUpdate;\n  var createSearchNode = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showFilterItems = _useState2[0],\n      setShowFilterItems = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    var _createSearchNode$cur;\n\n    if (createSearchNode !== null && createSearchNode !== void 0 && (_createSearchNode$cur = createSearchNode.current) !== null && _createSearchNode$cur !== void 0 && _createSearchNode$cur.contains(e.target)) {\n      return;\n    } // outside click\n\n\n    setShowFilterItems(false);\n  };\n\n  useEffect(function () {\n    // add when mounted\n    document.addEventListener(\"mousedown\", handleClick); // return function to be called when unmounted\n\n    return function () {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  var handleFilterSelect = function handleFilterSelect(filterToUpdate) {\n    handleFilterUpdate(filterToUpdate, index);\n    setShowFilterItems(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"click-element mr-1 list-span\",\n    title: \"Type\",\n    ref: createSearchNode,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: function onClick() {\n        return setShowFilterItems(true);\n      },\n      children: [filter.label, \" \", filter.type === Filter_Search_Types.VARIABLES ? ' :' : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this), showFilterItems ? /*#__PURE__*/_jsxDEV(TaskFilterDropdown, {\n      onFilterSelect: handleFilterSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 24\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n}, \"X0Pzkdx+dYjiHExviGSH2YZpeGM=\"));\n_c2 = TaskFilterSearchType;\nexport default TaskFilterSearchType;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskFilterSearchType$React.memo\");\n$RefreshReg$(_c2, \"TaskFilterSearchType\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/components/ServiceFlow/list/search/TaskFilterSearchType.js"],"names":["React","useEffect","useRef","useState","Filter_Search_Types","TaskFilterDropdown","TaskFilterSearchType","memo","filter","index","handleFilterUpdate","createSearchNode","showFilterItems","setShowFilterItems","handleClick","e","current","contains","target","document","addEventListener","removeEventListener","handleFilterSelect","filterToUpdate","label","type","VARIABLES"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,mBAAR,QAAkC,+BAAlC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAGA,IAAMC,oBAAoB,gBAAGN,KAAK,CAACO,IAAN,SAAW,gBAAyC;AAAA;;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,MAAxBC,kBAAwB,QAAxBA,kBAAwB;AAC/E,MAAMC,gBAAgB,GAAGT,MAAM,EAA/B;;AACA,kBAA6CC,QAAQ,CAAC,KAAD,CAArD;AAAA;AAAA,MAAOS,eAAP;AAAA,MAAwBC,kBAAxB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,CAAC,EAAI;AAAA;;AACvB,QAAIJ,gBAAJ,aAAIA,gBAAJ,wCAAIA,gBAAgB,CAAEK,OAAtB,kDAAI,sBAA2BC,QAA3B,CAAoCF,CAAC,CAACG,MAAtC,CAAJ,EAAmD;AACjD;AACD,KAHsB,CAIvB;;;AACAL,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAND;;AAQAZ,EAAAA,SAAS,CAAC,YAAM;AACd;AACAkB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,WAAvC,EAFc,CAGd;;AACA,WAAO,YAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,WAA1C;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,MAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,cAAD,EAAoB;AAC7Cb,IAAAA,kBAAkB,CAACa,cAAD,EAAgBd,KAAhB,CAAlB;AACAI,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAHD;;AAKA,sBACE;AAAM,IAAA,SAAS,EAAC,8BAAhB;AAA+C,IAAA,KAAK,EAAC,MAArD;AAA6D,IAAA,GAAG,EAAEF,gBAAlE;AAAA,4BACE;AAAM,MAAA,OAAO,EAAE;AAAA,eAAIE,kBAAkB,CAAC,IAAD,CAAtB;AAAA,OAAf;AAAA,iBAA8CL,MAAM,CAACgB,KAArD,OAA6DhB,MAAM,CAACiB,IAAP,KAAgBrB,mBAAmB,CAACsB,SAApC,GAA8C,IAA9C,GAAmD,IAAhH;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGd,eAAe,gBAAC,QAAC,kBAAD;AAAoB,MAAA,cAAc,EAAEU;AAApC;AAAA;AAAA;AAAA;AAAA,aAAD,GAA2D,IAF7E;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,CAhC4B,kCAA7B;MAAMhB,oB;AAkCN,eAAeA,oBAAf","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Filter_Search_Types} from \"../../constants/taskConstants\";\r\nimport TaskFilterDropdown from \"./TaskFilterDropdown\";\r\n\r\n\r\nconst TaskFilterSearchType = React.memo(({filter, index, handleFilterUpdate}) => {\r\n  const createSearchNode = useRef();\r\n  const [showFilterItems, setShowFilterItems]= useState(false);\r\n\r\n  const handleClick = e => {\r\n    if (createSearchNode?.current?.contains(e.target)) {\r\n      return;\r\n    }\r\n    // outside click\r\n    setShowFilterItems(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, []);\r\n\r\n  const handleFilterSelect = (filterToUpdate) => {\r\n    handleFilterUpdate(filterToUpdate,index);\r\n    setShowFilterItems(false);\r\n  };\r\n\r\n  return (\r\n    <span className=\"click-element mr-1 list-span\" title=\"Type\"  ref={createSearchNode}>\r\n      <span onClick={()=>setShowFilterItems(true)}>{filter.label} {filter.type === Filter_Search_Types.VARIABLES?' :':null}</span>\r\n      {showFilterItems?<TaskFilterDropdown onFilterSelect={handleFilterSelect}/>:null}\r\n              </span>)\r\n\r\n})\r\n\r\nexport default TaskFilterSearchType;\r\n"]},"metadata":{},"sourceType":"module"}