{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _inherits from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\customFormioComponents\\\\TextAreaWithAnalytics\\\\TextAreaWithAnalytics.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ReactComponent } from 'react-formio';\nimport settingsForm from './TextAreaWithAnalytics.settingsForm';\nimport SentimentAnalytics from \"./TextAreaWithAnalyticsInputComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TextAreaWithAnalytics = /*#__PURE__*/function (_ReactComponent) {\n  _inherits(TextAreaWithAnalytics, _ReactComponent);\n\n  var _super = _createSuper(TextAreaWithAnalytics);\n\n  function TextAreaWithAnalytics() {\n    _classCallCheck(this, TextAreaWithAnalytics);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextAreaWithAnalytics, [{\n    key: \"attachReact\",\n    value:\n    /**\r\n     * This function is called when the DIV has been rendered and added to the DOM. You can now instantiate the react component.\r\n     *\r\n     * @param DOMElement\r\n     * #returns ReactInstance\r\n     */\n    function attachReact(element) {\n      var _this = this;\n\n      var instance;\n      return ReactDOM.render( /*#__PURE__*/_jsxDEV(SentimentAnalytics, {\n        ref: function ref(refer) {\n          instance = refer;\n        },\n        component: this.component // These are the component settings if you want to use them to render the component.\n        ,\n        value: this.dataValue // The starting value of the component.\n        ,\n        data: this.data,\n        name: this.name,\n        onChange: this.updateValue,\n        disabled: this.disabled // The onChange event to call when the value changes.\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), element, function () {\n        return _this.reactInstance = instance;\n      });\n    }\n    /**\r\n     * Automatically detach any react components.\r\n     *\r\n     * @param element\r\n     */\n\n  }, {\n    key: \"detachReact\",\n    value: function detachReact(element) {\n      if (element) {\n        ReactDOM.unmountComponentAtNode(element);\n      }\n    }\n  }], [{\n    key: \"builderInfo\",\n    get:\n    /**\r\n     * This function tells the form builder about your component. It's name, icon and what group it should be in.\r\n     *\r\n     * @returns {{title: string, icon: string, group: string, documentation: string, weight: number, schema: *}}\r\n     */\n    function get() {\n      return {\n        title: 'Text Area With Analytics',\n        icon: 'area-chart',\n        group: 'basic',\n        documentation: '',\n        //TODO\n        weight: 110,\n        schema: TextAreaWithAnalytics.schema()\n      };\n    }\n    /**\r\n     * This function is the default settings for the component. At a minimum you want to set the type to the registered\r\n     * type of your component (i.e. when you call Components.setComponent('type', MyComponent) these types should match.\r\n     *\r\n     * @param sources\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      return ReactComponent.schema({\n        type: 'textAreaWithAnalytics',\n        label: 'Text Area With Analytics'\n      });\n    }\n    /*\r\n     * Defines the settingsForm when editing a component in the builder.\r\n     */\n\n  }]);\n\n  return TextAreaWithAnalytics;\n}(ReactComponent);\n\nTextAreaWithAnalytics.editForm = settingsForm;\nexport { TextAreaWithAnalytics as default };","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/customFormioComponents/TextAreaWithAnalytics/TextAreaWithAnalytics.js"],"names":["React","ReactDOM","ReactComponent","settingsForm","SentimentAnalytics","TextAreaWithAnalytics","element","instance","render","refer","component","dataValue","data","name","updateValue","disabled","reactInstance","unmountComponentAtNode","title","icon","group","documentation","weight","schema","type","label","editForm"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,kBAAP,MAA+B,uCAA/B;;;IAGqBC,qB;;;;;;;;;;;;;;AAoCnB;AACF;AACA;AACA;AACA;AACA;AACE,yBAAaC,OAAb,EAAsB;AAAA;;AACpB,UAAIC,QAAJ;AACA,aAAON,QAAQ,CAACO,MAAT,eACL,QAAC,kBAAD;AACE,QAAA,GAAG,EAAE,aAACC,KAAD,EAAW;AAACF,UAAAA,QAAQ,GAAGE,KAAX;AAAkB,SADrC;AAEE,QAAA,SAAS,EAAE,KAAKC,SAFlB,CAE6B;AAF7B;AAGE,QAAA,KAAK,EAAE,KAAKC,SAHd,CAGyB;AAHzB;AAIE,QAAA,IAAI,EAAE,KAAKC,IAJb;AAKE,QAAA,IAAI,EAAE,KAAKC,IALb;AAME,QAAA,QAAQ,EAAE,KAAKC,WANjB;AAOE,QAAA,QAAQ,EAAE,KAAKC,QAPjB,CAQE;;AARF;AAAA;AAAA;AAAA;AAAA,cADK,EAWLT,OAXK,EAWG;AAAA,eAAO,KAAI,CAACU,aAAL,GAAqBT,QAA5B;AAAA,OAXH,CAAP;AAaD;AAED;AACF;AACA;AACA;AACA;;;;WACE,qBAAYD,OAAZ,EAAqB;AACnB,UAAIA,OAAJ,EAAa;AACXL,QAAAA,QAAQ,CAACgB,sBAAT,CAAgCX,OAAhC;AACD;AACF;;;;AAnED;AACF;AACA;AACA;AACA;AACE,mBAAyB;AACvB,aAAO;AACLY,QAAAA,KAAK,EAAE,0BADF;AAELC,QAAAA,IAAI,EAAE,YAFD;AAGLC,QAAAA,KAAK,EAAE,OAHF;AAILC,QAAAA,aAAa,EAAE,EAJV;AAIc;AACnBC,QAAAA,MAAM,EAAE,GALH;AAMLC,QAAAA,MAAM,EAAElB,qBAAqB,CAACkB,MAAtB;AANH,OAAP;AAQD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAgB;AACd,aAAOrB,cAAc,CAACqB,MAAf,CAAsB;AAC3BC,QAAAA,IAAI,EAAE,uBADqB;AAE3BC,QAAAA,KAAK,EAAE;AAFoB,OAAtB,CAAP;AAID;AAED;AACF;AACA;;;;;EAjCmDvB,c;;AAA9BG,qB,CAkCZqB,Q,GAAWvB,Y;SAlCCE,qB","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ReactComponent } from 'react-formio';\r\nimport settingsForm from './TextAreaWithAnalytics.settingsForm';\r\nimport SentimentAnalytics from \"./TextAreaWithAnalyticsInputComponent\";\r\n\r\n\r\nexport default class TextAreaWithAnalytics extends ReactComponent {\r\n  /**\r\n   * This function tells the form builder about your component. It's name, icon and what group it should be in.\r\n   *\r\n   * @returns {{title: string, icon: string, group: string, documentation: string, weight: number, schema: *}}\r\n   */\r\n  static get builderInfo() {\r\n    return {\r\n      title: 'Text Area With Analytics',\r\n      icon: 'area-chart',\r\n      group: 'basic',\r\n      documentation: '', //TODO\r\n      weight: 110,\r\n      schema: TextAreaWithAnalytics.schema()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This function is the default settings for the component. At a minimum you want to set the type to the registered\r\n   * type of your component (i.e. when you call Components.setComponent('type', MyComponent) these types should match.\r\n   *\r\n   * @param sources\r\n   * @returns {*}\r\n   */\r\n  static schema() {\r\n    return ReactComponent.schema({\r\n      type: 'textAreaWithAnalytics',\r\n      label: 'Text Area With Analytics',\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Defines the settingsForm when editing a component in the builder.\r\n   */\r\n  static editForm = settingsForm;\r\n\r\n  /**\r\n   * This function is called when the DIV has been rendered and added to the DOM. You can now instantiate the react component.\r\n   *\r\n   * @param DOMElement\r\n   * #returns ReactInstance\r\n   */\r\n  attachReact (element) {\r\n    let instance;\r\n    return ReactDOM.render(\r\n      <SentimentAnalytics\r\n        ref={(refer) => {instance = refer;}}\r\n        component={this.component} // These are the component settings if you want to use them to render the component.\r\n        value={this.dataValue} // The starting value of the component.\r\n        data={this.data}\r\n        name={this.name}\r\n        onChange={this.updateValue}\r\n        disabled={this.disabled}\r\n        // The onChange event to call when the value changes.\r\n      />,\r\n      element,() => (this.reactInstance = instance)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Automatically detach any react components.\r\n   *\r\n   * @param element\r\n   */\r\n  detachReact(element) {\r\n    if (element) {\r\n      ReactDOM.unmountComponentAtNode(element);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}