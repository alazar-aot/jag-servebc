{"ast":null,"code":"/* istanbul ignore file */\nimport ACTION_CONSTANTS from './actionConstants';\nexport var setBPMTaskLoader = function setBPMTaskLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_BPM_TASK_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskDetailLoader = function setBPMTaskDetailLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_BPM_TASK_DETAIL_LOADING,\n      payload: data\n    });\n  };\n};\nexport var updateBPMTaskGroups = function updateBPMTaskGroups(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.SET_TASK_GROUP,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskGroupsLoading = function setBPMTaskGroupsLoading(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_TASK_GROUP_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskDetailUpdating = function setBPMTaskDetailUpdating(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_BPM_TASK_DETAIL_UPDATING,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskUpdateLoader = function setBPMTaskUpdateLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_BPM_TASK_UPDATING,\n      payload: data\n    });\n  };\n}; //TODO Update set to get on below cases\n\nexport var setBPMTaskList = function setBPMTaskList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_LIST_TASKS,\n      payload: data\n    });\n  };\n};\nexport var setBPMProcessList = function setBPMProcessList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_PROCESS_LIST,\n      payload: data\n    });\n  };\n};\nexport var setBPMUserList = function setBPMUserList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_USER_LIST,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskCount = function setBPMTaskCount(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_TASKS_COUNT,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskListActivePage = function setBPMTaskListActivePage(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_TASK_LIST_ACTIVE_PAGE,\n      payload: data\n    });\n  };\n};\nexport var setBPMTaskDetail = function setBPMTaskDetail(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_TASK_DETAIL,\n      payload: data\n    });\n  };\n};\nexport var setBPMFilterLoader = function setBPMFilterLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_BPM_FILTERS_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setBPMFilterList = function setBPMFilterList(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_FILTER_LIST,\n      payload: data\n    });\n  };\n};\nexport var setSelectedBPMFilter = function setSelectedBPMFilter(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.BPM_SELECTED_FILTER,\n      payload: data\n    });\n  };\n};\nexport var setSelectedTaskID = function setSelectedTaskID(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.SELECTED_TASK_ID,\n      payload: data\n    });\n  };\n};\nexport var setFilterListSortParams = function setFilterListSortParams(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_FILTER_LIST_SORT_PARAMS,\n      payload: data\n    });\n  };\n};\nexport var setFilterListSearchParams = function setFilterListSearchParams(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_FILTER_LIST_SEARCH_PARAMS,\n      payload: data\n    });\n  };\n};\nexport var setFilterListParams = function setFilterListParams(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_LIST_PARAMS,\n      payload: data\n    });\n  };\n};\nexport var setSearchQueryType = function setSearchQueryType(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_SEARCH_QUERY_TYPE,\n      payload: data\n    });\n  };\n};\nexport var setIsVariableNameIgnoreCase = function setIsVariableNameIgnoreCase(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_VARIABLE_NAME_IGNORE_CASE,\n      payload: data\n    });\n  };\n};\nexport var setIsVariableValueIgnoreCase = function setIsVariableValueIgnoreCase(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.UPDATE_VARIABLE_VALUE_IGNORE_CASE,\n      payload: data\n    });\n  };\n};\nexport var reloadTaskFormSubmission = function reloadTaskFormSubmission(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.RELOAD_TASK_FORM_SUBMISSION,\n      payload: data\n    });\n  };\n};\nexport var serviceActionError = function serviceActionError(data) {\n  return function (dispatch) {\n    //TODO update to a common file\n    dispatch({\n      type: ACTION_CONSTANTS.ERROR,\n      payload: 'Error Handling API'\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/actions/bpmTaskActions.js"],"names":["ACTION_CONSTANTS","setBPMTaskLoader","data","dispatch","type","IS_BPM_TASK_LOADING","payload","setBPMTaskDetailLoader","IS_BPM_TASK_DETAIL_LOADING","updateBPMTaskGroups","SET_TASK_GROUP","setBPMTaskGroupsLoading","IS_TASK_GROUP_LOADING","setBPMTaskDetailUpdating","IS_BPM_TASK_DETAIL_UPDATING","setBPMTaskUpdateLoader","IS_BPM_TASK_UPDATING","setBPMTaskList","BPM_LIST_TASKS","setBPMProcessList","BPM_PROCESS_LIST","setBPMUserList","BPM_USER_LIST","setBPMTaskCount","BPM_TASKS_COUNT","setBPMTaskListActivePage","BPM_TASK_LIST_ACTIVE_PAGE","setBPMTaskDetail","BPM_TASK_DETAIL","setBPMFilterLoader","IS_BPM_FILTERS_LOADING","setBPMFilterList","BPM_FILTER_LIST","setSelectedBPMFilter","BPM_SELECTED_FILTER","setSelectedTaskID","SELECTED_TASK_ID","setFilterListSortParams","UPDATE_FILTER_LIST_SORT_PARAMS","setFilterListSearchParams","UPDATE_FILTER_LIST_SEARCH_PARAMS","setFilterListParams","UPDATE_LIST_PARAMS","setSearchQueryType","UPDATE_SEARCH_QUERY_TYPE","setIsVariableNameIgnoreCase","UPDATE_VARIABLE_NAME_IGNORE_CASE","setIsVariableValueIgnoreCase","UPDATE_VARIABLE_VALUE_IGNORE_CASE","reloadTaskFormSubmission","RELOAD_TASK_FORM_SUBMISSION","serviceActionError","ERROR"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport ACTION_CONSTANTS from './actionConstants'\r\n\r\nexport const setBPMTaskLoader = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_BPM_TASK_LOADING,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMTaskDetailLoader = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_BPM_TASK_DETAIL_LOADING,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const updateBPMTaskGroups = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.SET_TASK_GROUP,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const setBPMTaskGroupsLoading = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_TASK_GROUP_LOADING,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const setBPMTaskDetailUpdating = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_BPM_TASK_DETAIL_UPDATING,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMTaskUpdateLoader = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_BPM_TASK_UPDATING,\r\n    payload:data\r\n  })\r\n}\r\n\r\n//TODO Update set to get on below cases\r\n\r\nexport const setBPMTaskList = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_LIST_TASKS,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const setBPMProcessList = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_PROCESS_LIST,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const setBPMUserList = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_USER_LIST,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMTaskCount = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_TASKS_COUNT,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMTaskListActivePage = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_TASK_LIST_ACTIVE_PAGE,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMTaskDetail = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_TASK_DETAIL,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMFilterLoader = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.IS_BPM_FILTERS_LOADING,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setBPMFilterList = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_FILTER_LIST,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setSelectedBPMFilter = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.BPM_SELECTED_FILTER,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setSelectedTaskID = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.SELECTED_TASK_ID,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setFilterListSortParams = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_FILTER_LIST_SORT_PARAMS,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setFilterListSearchParams = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_FILTER_LIST_SEARCH_PARAMS,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setFilterListParams = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_LIST_PARAMS,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setSearchQueryType = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_SEARCH_QUERY_TYPE,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setIsVariableNameIgnoreCase = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_VARIABLE_NAME_IGNORE_CASE,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const setIsVariableValueIgnoreCase = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.UPDATE_VARIABLE_VALUE_IGNORE_CASE,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const reloadTaskFormSubmission = (data) => dispatch =>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.RELOAD_TASK_FORM_SUBMISSION,\r\n    payload:data\r\n  })\r\n}\r\n\r\nexport const serviceActionError = (data) => dispatch => {\r\n  //TODO update to a common file\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.ERROR,\r\n    payload: 'Error Handling API'\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}