{"ast":null,"code":"/* istanbul ignore file */\nimport moment from \"moment\";\nexport var taskSubmissionFormatter = function taskSubmissionFormatter(taskSubmissionData) {\n  var res = {};\n  taskSubmissionData.forEach(function (taskSubmission) {\n    return res[taskSubmission.name] = taskSubmission.value;\n  });\n  return res;\n};\nexport var taskDetailVariableDataFormatter = function taskDetailVariableDataFormatter(taskVariableData) {\n  var res = {};\n\n  for (var variable in taskVariableData) {\n    res[variable] = taskVariableData[variable].value;\n  }\n\n  return res;\n};\nexport var insightDashboardFormatter = function insightDashboardFormatter(dashboardsData) {\n  var dashboards = dashboardsData.map(function (dashboard) {\n    return {\n      value: dashboard.id,\n      label: dashboard.name\n    };\n  });\n  return dashboards;\n};\nexport var addApplicationDetailsToFormComponent = function addApplicationDetailsToFormComponent(formObjData) {\n  var applicationStatusComponent = formObjData.components.find(function (component) {\n    return component.key === \"applicationStatus\";\n  });\n\n  if (!applicationStatusComponent) {\n    formObjData.components.unshift({\n      input: true,\n      tableView: true,\n      key: \"applicationStatus\",\n      title: \"Application Status\"\n    });\n    formObjData.components.unshift({\n      input: true,\n      tableView: true,\n      key: \"applicationId\",\n      title: \"Application Id\"\n    });\n  }\n\n  return formObjData;\n};\nexport var getRelevantApplications = function getRelevantApplications(applications, submissionData) {\n  //TODO UPDATE SUBMISSIONS VIEW\n  submissionData.submissions = submissionData.submissions.map(function (submission) {\n    var applicationData = applications.find(function (application) {\n      return application.submissionId === submission._id;\n    });\n\n    if (applicationData) {\n      submission.data.applicationId = applicationData.id;\n      submission.data.applicationStatus = applicationData.applicationStatus;\n      return submission;\n    } else {\n      return null;\n    }\n  }).filter(function (submission) {\n    return submission;\n  });\n  return submissionData;\n};\nexport var getLocalDateTime = function getLocalDateTime(date) {\n  return date ? new Date(date.replace(' ', 'T') + 'Z').toLocaleString() : \"-\";\n};\nexport var getProcessDataFromList = function getProcessDataFromList(processList, processId, dataKey) {\n  var process = processList.find(function (process) {\n    return process.id === processId;\n  });\n  return process && process[dataKey];\n};\nexport var getUserNamefromList = function getUserNamefromList(userList, userId) {\n  var user = userList.find(function (user) {\n    return user.id === userId;\n  });\n  return user ? \"\".concat(user.firstName, \" \").concat(user.lastName) : userId;\n}; //formURl is of https://base-url/form/:formId/submission/:submissionId\n// formURl is of https://base-url/public/form/:formId/submission/:submissionId\n\nexport var getFormIdSubmissionIdFromURL = function getFormIdSubmissionIdFromURL(formUrl) {\n  var formString = \"/form/\";\n  var submissionString = \"/submission/\";\n  var firstPositionOfString = formUrl.indexOf(\"/form/\");\n  var lastPositionOfString = formUrl.indexOf(\"/submission\");\n  var formId = formUrl.substring(firstPositionOfString + formString.length, lastPositionOfString);\n  var firstPositionOfSubmissionString = formUrl.indexOf(submissionString) + submissionString.length;\n  var submissionId = formUrl.substring(firstPositionOfSubmissionString);\n  return {\n    formId: formId,\n    submissionId: submissionId\n  };\n};\nexport var getFormUrl = function getFormUrl(formId, submissionId) {\n  return \"\".concat(window.location.origin, \"/form/\").concat(formId, \"/submission/\").concat(submissionId);\n};\nexport var getISODateTime = function getISODateTime(date) {\n  if (date) {\n    return moment(date).format('YYYY-MM-DD[T]HH:mm:ss.SSSZZ');\n  } else {\n    return null;\n  }\n};\nexport var getFormattedDateAndTime = function getFormattedDateAndTime(date) {\n  return new Date(date).toLocaleDateString('en-us', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  });\n};\nexport var getSearchText = function getSearchText(query) {\n  //  Function Extracts text from /text/i \n  var searchText = \"\";\n\n  if (query !== \"\") {\n    var searchString = \"/\";\n    var firstPosition = query.indexOf('/');\n    var lastPosition = query.indexOf('/i');\n    searchText = query.substring(firstPosition + searchString.length, lastPosition);\n  }\n\n  return searchText;\n};\nexport var getFormattedProcess = function getFormattedProcess(application) {\n  var processData = {\n    processName: application.processName,\n    formProcessMapperId: application.formProcessMapperId,\n    processKey: application.processKey\n  };\n  return processData;\n};\nexport var checkIsObjectId = function checkIsObjectId(data) {\n  // Condition to check if the data is a mongoDb object Id or not \n  return data.length === 24 && !isNaN(Number('0x' + data));\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/apiManager/services/formatterService.js"],"names":["moment","taskSubmissionFormatter","taskSubmissionData","res","forEach","taskSubmission","name","value","taskDetailVariableDataFormatter","taskVariableData","variable","insightDashboardFormatter","dashboardsData","dashboards","map","dashboard","id","label","addApplicationDetailsToFormComponent","formObjData","applicationStatusComponent","components","find","component","key","unshift","input","tableView","title","getRelevantApplications","applications","submissionData","submissions","submission","applicationData","application","submissionId","_id","data","applicationId","applicationStatus","filter","getLocalDateTime","date","Date","replace","toLocaleString","getProcessDataFromList","processList","processId","dataKey","process","getUserNamefromList","userList","userId","user","firstName","lastName","getFormIdSubmissionIdFromURL","formUrl","formString","submissionString","firstPositionOfString","indexOf","lastPositionOfString","formId","substring","length","firstPositionOfSubmissionString","getFormUrl","window","location","origin","getISODateTime","format","getFormattedDateAndTime","toLocaleDateString","weekday","year","month","day","hour","minute","hour12","getSearchText","query","searchText","searchString","firstPosition","lastPosition","getFormattedProcess","processData","processName","formProcessMapperId","processKey","checkIsObjectId","isNaN","Number"],"mappings":"AAAC;AACD,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,kBAAD,EAAuB;AAC5D,MAAMC,GAAG,GAAG,EAAZ;AACAD,EAAAA,kBAAkB,CAACE,OAAnB,CAA2B,UAAAC,cAAc;AAAA,WAAIF,GAAG,CAACE,cAAc,CAACC,IAAhB,CAAH,GAA2BD,cAAc,CAACE,KAA9C;AAAA,GAAzC;AACA,SAAOJ,GAAP;AACD,CAJM;AAOP,OAAO,IAAMK,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,gBAAD,EAAqB;AAClE,MAAMN,GAAG,GAAG,EAAZ;;AACA,OAAI,IAAIO,QAAR,IAAoBD,gBAApB,EAAqC;AACnCN,IAAAA,GAAG,CAACO,QAAD,CAAH,GAAgBD,gBAAgB,CAACC,QAAD,CAAhB,CAA2BH,KAA3C;AACD;;AACD,SAAOJ,GAAP;AACD,CANM;AAQP,OAAO,IAAMQ,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,cAAD,EAAmB;AAC1D,MAAMC,UAAU,GAAGD,cAAc,CAACE,GAAf,CAAmB,UAAAC,SAAS,EAAI;AACjD,WAAQ;AAACR,MAAAA,KAAK,EAACQ,SAAS,CAACC,EAAjB;AAAqBC,MAAAA,KAAK,EAACF,SAAS,CAACT;AAArC,KAAR;AACD,GAFkB,CAAnB;AAGA,SAAOO,UAAP;AACD,CALM;AAQP,OAAO,IAAMK,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACC,WAAD,EAAiB;AAClE,MAAMC,0BAA0B,GAAGD,WAAW,CAACE,UAAZ,CAAuBC,IAAvB,CAA4B,UAAAC,SAAS;AAAA,WAAIA,SAAS,CAACC,GAAV,KAAkB,mBAAtB;AAAA,GAArC,CAAnC;;AACA,MAAG,CAACJ,0BAAJ,EAA+B;AAC7BD,IAAAA,WAAW,CAACE,UAAZ,CAAuBI,OAAvB,CAA+B;AAACC,MAAAA,KAAK,EAAC,IAAP;AAAYC,MAAAA,SAAS,EAAE,IAAvB;AAA6BH,MAAAA,GAAG,EAAC,mBAAjC;AAAsDI,MAAAA,KAAK,EAAC;AAA5D,KAA/B;AACAT,IAAAA,WAAW,CAACE,UAAZ,CAAuBI,OAAvB,CAA+B;AAACC,MAAAA,KAAK,EAAC,IAAP;AAAYC,MAAAA,SAAS,EAAE,IAAvB;AAA4BH,MAAAA,GAAG,EAAC,eAAhC;AAAiDI,MAAAA,KAAK,EAAC;AAAvD,KAA/B;AACD;;AACF,SAAOT,WAAP;AACD,CAPM;AASP,OAAO,IAAMU,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,YAAD,EAAeC,cAAf,EAAkC;AACvE;AACAA,EAAAA,cAAc,CAACC,WAAf,GAA6BD,cAAc,CAACC,WAAf,CAA2BlB,GAA3B,CAAgC,UAAAmB,UAAU,EAAI;AACzE,QAAMC,eAAe,GAAGJ,YAAY,CAACR,IAAb,CAAkB,UAAAa,WAAW;AAAA,aAAIA,WAAW,CAACC,YAAZ,KAA6BH,UAAU,CAACI,GAA5C;AAAA,KAA7B,CAAxB;;AACA,QAAGH,eAAH,EAAmB;AACjBD,MAAAA,UAAU,CAACK,IAAX,CAAgBC,aAAhB,GAAgCL,eAAe,CAAClB,EAAhD;AACAiB,MAAAA,UAAU,CAACK,IAAX,CAAgBE,iBAAhB,GAAoCN,eAAe,CAACM,iBAApD;AACA,aAAOP,UAAP;AACD,KAJD,MAIM;AACJ,aAAO,IAAP;AACD;AACF,GAT4B,EAS1BQ,MAT0B,CASnB,UAAAR,UAAU;AAAA,WAAEA,UAAF;AAAA,GATS,CAA7B;AAUA,SAAOF,cAAP;AACD,CAbM;AAgBP,OAAO,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACxC,SAAOA,IAAI,GAAC,IAAIC,IAAJ,CAASD,IAAI,CAACE,OAAL,CAAa,GAAb,EAAiB,GAAjB,IAAsB,GAA/B,EAAoCC,cAApC,EAAD,GAAuD,GAAlE;AACD,CAFM;AAIP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,WAAD,EAAaC,SAAb,EAAuBC,OAAvB,EAAmC;AACvE,MAAMC,OAAO,GAAGH,WAAW,CAAC1B,IAAZ,CAAiB,UAAA6B,OAAO;AAAA,WAAEA,OAAO,CAACnC,EAAR,KAAaiC,SAAf;AAAA,GAAxB,CAAhB;AACA,SAAOE,OAAO,IAAIA,OAAO,CAACD,OAAD,CAAzB;AACD,CAHM;AAKP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAUC,MAAV,EAAqB;AACtD,MAAMC,IAAI,GAAGF,QAAQ,CAAC/B,IAAT,CAAc,UAAAiC,IAAI;AAAA,WAAEA,IAAI,CAACvC,EAAL,KAAUsC,MAAZ;AAAA,GAAlB,CAAb;AACA,SAAOC,IAAI,aAAIA,IAAI,CAACC,SAAT,cAAsBD,IAAI,CAACE,QAA3B,IAAuCH,MAAlD;AACD,CAHM,C,CAKP;AACC;;AACD,OAAO,IAAMI,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,OAAD,EAAa;AACvD,MAAIC,UAAU,GAAG,QAAjB;AACA,MAAIC,gBAAgB,GAAG,cAAvB;AACA,MAAIC,qBAAqB,GAAGH,OAAO,CAACI,OAAR,CAAgB,QAAhB,CAA5B;AACA,MAAIC,oBAAoB,GAAGL,OAAO,CAACI,OAAR,CAAgB,aAAhB,CAA3B;AACA,MAAME,MAAM,GAAGN,OAAO,CAACO,SAAR,CAAkBJ,qBAAqB,GAACF,UAAU,CAACO,MAAnD,EAA0DH,oBAA1D,CAAf;AACA,MAAII,+BAA+B,GAAGT,OAAO,CAACI,OAAR,CAAgBF,gBAAhB,IAAoCA,gBAAgB,CAACM,MAA3F;AACA,MAAM/B,YAAY,GAAGuB,OAAO,CAACO,SAAR,CAAkBE,+BAAlB,CAArB;AACA,SAAO;AAACH,IAAAA,MAAM,EAANA,MAAD;AAAQ7B,IAAAA,YAAY,EAAZA;AAAR,GAAP;AACD,CATM;AAWP,OAAO,IAAMiC,UAAU,GAAG,SAAbA,UAAa,CAACJ,MAAD,EAAS7B,YAAT,EAA0B;AAClD,mBAAUkC,MAAM,CAACC,QAAP,CAAgBC,MAA1B,mBAAyCP,MAAzC,yBAA8D7B,YAA9D;AACD,CAFM;AAIP,OAAO,IAAMqC,cAAc,GAAC,SAAfA,cAAe,CAAC9B,IAAD,EAAQ;AAChC,MAAGA,IAAH,EAAQ;AACN,WAAO3C,MAAM,CAAC2C,IAAD,CAAN,CAAa+B,MAAb,CAAoB,6BAApB,CAAP;AACD,GAFD,MAEK;AACH,WAAO,IAAP;AACD;AACJ,CANM;AAQP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAChC,IAAD,EAAQ;AAC7C,SAAO,IAAIC,IAAJ,CAASD,IAAT,EAAeiC,kBAAf,CAAkC,OAAlC,EAA4C;AAACC,IAAAA,OAAO,EAAE,MAAV;AAAkBC,IAAAA,IAAI,EAAE,SAAxB;AAAmCC,IAAAA,KAAK,EAAE,MAA1C;AAAkDC,IAAAA,GAAG,EAAE,SAAvD;AAAiEC,IAAAA,IAAI,EAAE,SAAvE;AAAkFC,IAAAA,MAAM,EAAE,SAA1F;AAAqGC,IAAAA,MAAM,EAAE;AAA7G,GAA5C,CAAP;AACD,CAFM;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AACtC;AACC,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAGD,KAAK,KAAK,EAAb,EAAgB;AACd,QAAIE,YAAY,GAAG,GAAnB;AACA,QAAIC,aAAa,GAAGH,KAAK,CAACtB,OAAN,CAAc,GAAd,CAApB;AACA,QAAI0B,YAAY,GAAGJ,KAAK,CAACtB,OAAN,CAAc,IAAd,CAAnB;AACDuB,IAAAA,UAAU,GAAGD,KAAK,CAACnB,SAAN,CAAgBsB,aAAa,GAAGD,YAAY,CAACpB,MAA7C,EAAoDsB,YAApD,CAAb;AACA;;AACD,SAAOH,UAAP;AACF,CAVM;AAYP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACvD,WAAD,EAAe;AAChD,MAAMwD,WAAW,GAAG;AAClBC,IAAAA,WAAW,EAACzD,WAAW,CAACyD,WADN;AAElBC,IAAAA,mBAAmB,EAAC1D,WAAW,CAAC0D,mBAFd;AAGlBC,IAAAA,UAAU,EAAC3D,WAAW,CAAC2D;AAHL,GAApB;AAKA,SAAOH,WAAP;AACD,CAPM;AASP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACzD,IAAD,EAAU;AACvC;AACA,SAAOA,IAAI,CAAC6B,MAAL,KAAgB,EAAhB,IAAsB,CAAC6B,KAAK,CAACC,MAAM,CAAC,OAAO3D,IAAR,CAAP,CAAnC;AACD,CAHM","sourcesContent":[" /* istanbul ignore file */\r\nimport moment from \"moment\";\r\n\r\nexport const taskSubmissionFormatter = (taskSubmissionData) =>{\r\n  const res = {};\r\n  taskSubmissionData.forEach(taskSubmission => res[taskSubmission.name] = taskSubmission.value);\r\n  return res;\r\n}\r\n\r\n\r\nexport const taskDetailVariableDataFormatter = (taskVariableData) =>{\r\n  const res = {};\r\n  for(let variable in taskVariableData){\r\n    res[variable] = taskVariableData[variable].value;\r\n  }\r\n  return res;\r\n}\r\n\r\nexport const insightDashboardFormatter = (dashboardsData) =>{\r\n  const dashboards = dashboardsData.map(dashboard => {\r\n    return  {value:dashboard.id, label:dashboard.name}\r\n  });\r\n  return dashboards;\r\n}\r\n\r\n\r\nexport const addApplicationDetailsToFormComponent = (formObjData) => {\r\n   const applicationStatusComponent = formObjData.components.find(component => component.key === \"applicationStatus\");\r\n   if(!applicationStatusComponent){\r\n     formObjData.components.unshift({input:true,tableView: true, key:\"applicationStatus\", title:\"Application Status\"})\r\n     formObjData.components.unshift({input:true,tableView: true,key:\"applicationId\", title:\"Application Id\"})\r\n   }\r\n  return formObjData;\r\n}\r\n\r\nexport const getRelevantApplications = (applications, submissionData) => {\r\n  //TODO UPDATE SUBMISSIONS VIEW\r\n  submissionData.submissions = submissionData.submissions.map( submission => {\r\n    const applicationData = applications.find(application => application.submissionId === submission._id);\r\n    if(applicationData){\r\n      submission.data.applicationId = applicationData.id;\r\n      submission.data.applicationStatus = applicationData.applicationStatus;\r\n      return submission;\r\n    }else {\r\n      return null;\r\n    }\r\n  }).filter(submission=>submission);\r\n  return submissionData;\r\n}\r\n\r\n\r\nexport const getLocalDateTime = (date) => {\r\n  return date?new Date(date.replace(' ','T')+'Z').toLocaleString(): \"-\";\r\n}\r\n\r\nexport const getProcessDataFromList = (processList,processId,dataKey) => {\r\n  const process = processList.find(process=>process.id===processId);\r\n  return process && process[dataKey] ;\r\n}\r\n\r\nexport const getUserNamefromList = (userList,userId) => {\r\n  const user = userList.find(user=>user.id===userId);\r\n  return user?`${user.firstName} ${user.lastName}`: userId;\r\n}\r\n\r\n//formURl is of https://base-url/form/:formId/submission/:submissionId\r\n // formURl is of https://base-url/public/form/:formId/submission/:submissionId\r\nexport const getFormIdSubmissionIdFromURL = (formUrl) => {\r\n  let formString = \"/form/\"\r\n  let submissionString = \"/submission/\"\r\n  let firstPositionOfString = formUrl.indexOf(\"/form/\")\r\n  let lastPositionOfString = formUrl.indexOf(\"/submission\")\r\n  const formId = formUrl.substring(firstPositionOfString+formString.length,lastPositionOfString)\r\n  let firstPositionOfSubmissionString = formUrl.indexOf(submissionString) + submissionString.length\r\n  const submissionId = formUrl.substring(firstPositionOfSubmissionString)\r\n  return {formId,submissionId};\r\n}\r\n\r\nexport const getFormUrl = (formId, submissionId) => {\r\n  return `${window.location.origin}/form/${formId}/submission/${submissionId}`;\r\n}\r\n\r\nexport const getISODateTime=(date)=>{\r\n    if(date){\r\n      return moment(date).format('YYYY-MM-DD[T]HH:mm:ss.SSSZZ');\r\n    }else{\r\n      return null\r\n    }\r\n};\r\n\r\nexport const getFormattedDateAndTime = (date)=>{\r\n  return new Date(date).toLocaleDateString('en-us',  {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',hour: '2-digit', minute: '2-digit', hour12: true});\r\n};\r\n\r\nexport const getSearchText = (query) => {\r\n  //  Function Extracts text from /text/i \r\n   let searchText = \"\"\r\n   if(query !== \"\"){\r\n     let searchString = \"/\"\r\n     let firstPosition = query.indexOf('/')\r\n     let lastPosition = query.indexOf('/i')\r\n    searchText = query.substring(firstPosition + searchString.length,lastPosition)\r\n   }\r\n   return searchText;\r\n}\r\n\r\nexport const getFormattedProcess = (application)=>{\r\n  const processData = {\r\n    processName:application.processName,\r\n    formProcessMapperId:application.formProcessMapperId,\r\n    processKey:application.processKey\r\n  }\r\n  return processData;\r\n}\r\n\r\nexport const checkIsObjectId = (data) => {\r\n  // Condition to check if the data is a mongoDb object Id or not \r\n  return data.length === 24 && !isNaN(Number('0x' + data));\r\n}"]},"metadata":{},"sourceType":"module"}