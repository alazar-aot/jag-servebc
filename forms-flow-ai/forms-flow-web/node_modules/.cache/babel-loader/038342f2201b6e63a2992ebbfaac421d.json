{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\forms-flow-master\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport { httpGETRequest } from \"../httpRequestHandler\";\nimport API from \"../endpoints\";\nimport { setApplicationHistoryList, serviceActionError, setUpdateHistoryLoader } from \"../../actions/taskApplicationHistoryActions\";\nimport UserService from \"../../services/UserService\";\nimport { replaceUrl } from \"../../helper/helper\";\nexport var fetchApplicationAuditHistoryList = function fetchApplicationAuditHistoryList(applicationId) {\n  var done = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : function () {};\n  return function (dispatch) {\n    var apiUrlAppHistory = replaceUrl(API.GET_APPLICATION_HISTORY_API, \"<application_id>\", applicationId);\n    httpGETRequest(apiUrlAppHistory, {}, UserService.getToken(), true).then(function (res) {\n      if (res.data) {\n        var applications = res.data.applications;\n        var data = applications.map(function (app) {\n          return _objectSpread({}, app);\n        });\n        dispatch(setApplicationHistoryList(data));\n        dispatch(setUpdateHistoryLoader(false));\n        done(null, res.data);\n      } else {\n        dispatch(serviceActionError(res));\n        dispatch(setUpdateHistoryLoader(false));\n      }\n    }).catch(function (error) {\n      dispatch(serviceActionError(error));\n      dispatch(setUpdateHistoryLoader(false));\n      done(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/apiManager/services/applicationAuditServices.js"],"names":["httpGETRequest","API","setApplicationHistoryList","serviceActionError","setUpdateHistoryLoader","UserService","replaceUrl","fetchApplicationAuditHistoryList","applicationId","done","dispatch","apiUrlAppHistory","GET_APPLICATION_HISTORY_API","getToken","then","res","data","applications","map","app","catch","error"],"mappings":";AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SACEC,yBADF,EAEEC,kBAFF,EAGEC,sBAHF,QAIO,6CAJP;AAKA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAGA,OAAO,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACC,aAAD,EAA4B;AAC1E,MAAMC,IAAI,GAAG,wGAAwB,YAAM,CAAE,CAA7C;AACA,SAAO,UAACC,QAAD,EAAc;AACnB,QAAMC,gBAAgB,GAAGL,UAAU,CACjCL,GAAG,CAACW,2BAD6B,EAEjC,kBAFiC,EAGjCJ,aAHiC,CAAnC;AAMCR,IAAAA,cAAc,CAACW,gBAAD,EAAmB,EAAnB,EAAuBN,WAAW,CAACQ,QAAZ,EAAvB,EAA8C,IAA9C,CAAd,CACEC,IADF,CACO,UAACC,GAAD,EAAS;AACb,UAAIA,GAAG,CAACC,IAAR,EAAc;AACd,YAAMC,YAAY,GAAGF,GAAG,CAACC,IAAJ,CAASC,YAA9B;AACA,YAAID,IAAI,GAAGC,YAAY,CAACC,GAAb,CAAiB,UAACC,GAAD,EAAS;AACnC,mCAAYA,GAAZ;AACD,SAFU,CAAX;AAGAT,QAAAA,QAAQ,CAACR,yBAAyB,CAACc,IAAD,CAA1B,CAAR;AACAN,QAAAA,QAAQ,CAACN,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACAK,QAAAA,IAAI,CAAC,IAAD,EAAOM,GAAG,CAACC,IAAX,CAAJ;AACD,OARC,MAQK;AACLN,QAAAA,QAAQ,CAACP,kBAAkB,CAACY,GAAD,CAAnB,CAAR;AACAL,QAAAA,QAAQ,CAACN,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACD;AACA,KAdF,EAeEgB,KAfF,CAeQ,UAACC,KAAD,EAAW;AAChBX,MAAAA,QAAQ,CAACP,kBAAkB,CAACkB,KAAD,CAAnB,CAAR;AACAX,MAAAA,QAAQ,CAACN,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACAK,MAAAA,IAAI,CAACY,KAAD,CAAJ;AACD,KAnBF;AAoBF,GA3BD;AA4BD,CA9BM","sourcesContent":["import { httpGETRequest } from \"../httpRequestHandler\";\r\nimport API from \"../endpoints\";\r\nimport {\r\n  setApplicationHistoryList,\r\n  serviceActionError,\r\n  setUpdateHistoryLoader\r\n} from \"../../actions/taskApplicationHistoryActions\";\r\nimport UserService from \"../../services/UserService\";\r\nimport { replaceUrl } from \"../../helper/helper\";\r\n\r\n\r\nexport const fetchApplicationAuditHistoryList = (applicationId, ...rest) => {\r\n  const done = rest.length ? rest[0] : () => {};\r\n  return (dispatch) => {\r\n    const apiUrlAppHistory = replaceUrl(\r\n      API.GET_APPLICATION_HISTORY_API,\r\n      \"<application_id>\",\r\n      applicationId\r\n    );\r\n\r\n     httpGETRequest(apiUrlAppHistory, {}, UserService.getToken(),true)\r\n      .then((res) => {\r\n        if (res.data) {\r\n        const applications = res.data.applications;\r\n        let data = applications.map((app) => {\r\n          return { ...app};\r\n        });\r\n        dispatch(setApplicationHistoryList(data));\r\n        dispatch(setUpdateHistoryLoader(false))\r\n        done(null, res.data);\r\n      } else {\r\n        dispatch(serviceActionError(res));\r\n        dispatch(setUpdateHistoryLoader(false));\r\n      }\r\n      })\r\n      .catch((error) => {\r\n        dispatch(serviceActionError(error));\r\n        dispatch(setUpdateHistoryLoader(false))\r\n        done(error);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}