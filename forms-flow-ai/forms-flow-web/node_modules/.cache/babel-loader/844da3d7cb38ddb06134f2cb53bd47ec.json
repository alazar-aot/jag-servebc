{"ast":null,"code":"/* istanbul ignore file */\nimport ACTION_CONSTANTS from \"./actionConstants\";\nexport var setMetricsSubmissionCount = function setMetricsSubmissionCount(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.METRICS_SUBMISSIONS,\n      payload: data\n    });\n  };\n};\nexport var setMetricsLoader = function setMetricsLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_METRICS_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setMetricsSubmissionStatusCount = function setMetricsSubmissionStatusCount(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.METRICS_SUBMISSIONS_STATUS,\n      payload: data\n    });\n  };\n};\nexport var setMetricsStatusLoader = function setMetricsStatusLoader(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.IS_METRICS_STATUS_LOADING,\n      payload: data\n    });\n  };\n};\nexport var setSelectedMetricsId = function setSelectedMetricsId(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.SELECTED_METRICS_ID,\n      payload: data\n    });\n  };\n};\nexport var setMetricsLoadError = function setMetricsLoadError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.METRICS_LOAD_ERROR,\n      payload: data\n    });\n  };\n};\nexport var setMetricsStatusLoadError = function setMetricsStatusLoadError(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.METRICS_STATUS_LOAD_ERROR,\n      payload: data\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/actions/metricsActions.js"],"names":["ACTION_CONSTANTS","setMetricsSubmissionCount","data","dispatch","type","METRICS_SUBMISSIONS","payload","setMetricsLoader","IS_METRICS_LOADING","setMetricsSubmissionStatusCount","METRICS_SUBMISSIONS_STATUS","setMetricsStatusLoader","IS_METRICS_STATUS_LOADING","setSelectedMetricsId","SELECTED_METRICS_ID","setMetricsLoadError","METRICS_LOAD_ERROR","setMetricsStatusLoadError","METRICS_STATUS_LOAD_ERROR"],"mappings":"AAAC;AACD,OAAOA,gBAAP,MAA6B,mBAA7B;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AAC/DA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACK,mBADhB;AAEPC,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GALwC;AAAA,CAAlC;AAOP,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AACtDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACQ,kBADhB;AAEPF,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GAL+B;AAAA,CAAzB;AAOP,OAAO,IAAMO,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACP,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AACrEA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACU,0BADhB;AAEPJ,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GAL8C;AAAA,CAAxC;AAMP,OAAO,IAAMS,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACT,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AAC5DA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACY,yBADhB;AAEPN,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GALqC;AAAA,CAA/B;AAMP,OAAO,IAAMW,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AAC1DA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACc,mBADhB;AAEPR,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GALmC;AAAA,CAA7B;AAOP,OAAO,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACb,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AACzDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACgB,kBADhB;AAEPV,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GALkC;AAAA,CAA5B;AAMP,OAAO,IAAMe,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACf,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AAC/DA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBAAgB,CAACkB,yBADhB;AAEPZ,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAID,GALwC;AAAA,CAAlC","sourcesContent":[" /* istanbul ignore file */\r\nimport ACTION_CONSTANTS from \"./actionConstants\";\r\n\r\nexport const setMetricsSubmissionCount = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.METRICS_SUBMISSIONS,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setMetricsLoader = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_METRICS_LOADING,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setMetricsSubmissionStatusCount = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.METRICS_SUBMISSIONS_STATUS,\r\n    payload: data,\r\n  });\r\n};\r\nexport const setMetricsStatusLoader = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.IS_METRICS_STATUS_LOADING,\r\n    payload: data,\r\n  });\r\n};\r\nexport const setSelectedMetricsId = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.SELECTED_METRICS_ID,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setMetricsLoadError = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.METRICS_LOAD_ERROR,\r\n    payload: data,\r\n  });\r\n};\r\nexport const setMetricsStatusLoadError = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: ACTION_CONSTANTS.METRICS_STATUS_LOAD_ERROR,\r\n    payload: data,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}