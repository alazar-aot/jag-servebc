{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport ACTION_CONSTANTS from \"../actions/actionConstants\";\nexport var initialState = {\n  dashboards: [{\n    id: '',\n    name: '',\n    approvedGroups: []\n  }],\n  isloading: true,\n  iserror: false,\n  groups: [],\n  isDashUpdated: false,\n  isGroupUpdated: false,\n  updateError: false\n};\n\nvar dashboards = function dashboards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ACTION_CONSTANTS.DASHBOARDS_LIST:\n      var _dashboards = action.payload.results.map(function (result) {\n        return {\n          'id': result.id,\n          name: result.name\n        };\n      });\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dashboards: _dashboards,\n        isDashUpdated: true\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_LIST_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        iserror: true,\n        error: action.payload\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_LIST_GROUPS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        groups: action.payload,\n        isGroupUpdated: true,\n        updateError: false\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_MAP_FROM_GROUPS:\n      var dashboardsFromState = _toConsumableArray(action.payload.dashboards);\n\n      var groups = _toConsumableArray(action.payload.groups);\n\n      var _iterator = _createForOfIteratorHelper(dashboardsFromState),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dashboard = _step.value;\n          var res = checkDashboardIngroups(dashboard, groups);\n          dashboard.approvedGroups = res;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dashboards: dashboardsFromState,\n        isloading: false\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_CLEAN_UP:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isDashUpdated: false,\n        isGroupUpdated: false,\n        isloading: true\n      });\n    // fetch the fresh data after update\n\n    case ACTION_CONSTANTS.DASHBOARDS_INITIATE_UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isloading: true,\n        isDashUpdated: false,\n        isGroupUpdated: false\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_UPDATE_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updateError: true,\n        error: action.payload,\n        isloading: false\n      });\n\n    case ACTION_CONSTANTS.DASHBOARDS_HIDE_UPDATE_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updateError: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport var checkDashboardIngroups = function checkDashboardIngroups(dashboard, groups) {\n  var approvedGroups = [];\n\n  var _iterator2 = _createForOfIteratorHelper(groups),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var group = _step2.value;\n      var dashboardIdsInGroupsArray = group.dashboards.map(function (item) {\n        return Number(Object.keys(item)[0]);\n      });\n\n      if (dashboardIdsInGroupsArray.includes(dashboard.id)) {\n        approvedGroups.push({\n          name: group.name,\n          id: group.id\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return approvedGroups;\n};\nexport default dashboards;","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/modules/dashboardReducer.js"],"names":["ACTION_CONSTANTS","initialState","dashboards","id","name","approvedGroups","isloading","iserror","groups","isDashUpdated","isGroupUpdated","updateError","state","action","type","DASHBOARDS_LIST","payload","results","map","result","DASHBOARDS_LIST_ERROR","error","DASHBOARDS_LIST_GROUPS","DASHBOARDS_MAP_FROM_GROUPS","dashboardsFromState","dashboard","res","checkDashboardIngroups","DASHBOARDS_CLEAN_UP","DASHBOARDS_INITIATE_UPDATE","DASHBOARDS_UPDATE_ERROR","DASHBOARDS_HIDE_UPDATE_ERROR","group","dashboardIdsInGroupsArray","item","Number","Object","keys","includes","push"],"mappings":"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","sourcesContent":["import ACTION_CONSTANTS from \"../actions/actionConstants\";\r\n\r\n\r\nexport const initialState = {\r\n    dashboards:[\r\n        {\r\n            id:'',\r\n            name:'',\r\n            approvedGroups:[],\r\n        }        \r\n    ],\r\n    isloading:true,\r\n    iserror:false,\r\n    groups: [],\r\n    isDashUpdated:false,\r\n    isGroupUpdated:false,\r\n    updateError:false\r\n\t\t\r\n}\r\n\r\n\r\nconst dashboards = (state=initialState,action)=>{\r\n    switch(action.type){\r\n       \r\n        case ACTION_CONSTANTS.DASHBOARDS_LIST:\r\n            let dashboards = action.payload.results.map(result=>({'id':result.id,name:result.name}));\r\n            return {...state,dashboards:dashboards,isDashUpdated:true};\r\n\r\n        case ACTION_CONSTANTS.DASHBOARDS_LIST_ERROR:\r\n            return {...state,iserror:true,error:action.payload}\r\n\r\n        case ACTION_CONSTANTS.DASHBOARDS_LIST_GROUPS:\r\n            \r\n            return {...state,groups:action.payload,isGroupUpdated:true,updateError:false}\r\n\r\n        case ACTION_CONSTANTS.DASHBOARDS_MAP_FROM_GROUPS:\r\n\r\n            let dashboardsFromState = [...action.payload.dashboards];\r\n            let groups = [...action.payload.groups];\r\n            for(let dashboard of dashboardsFromState){\r\n               let res =  checkDashboardIngroups(dashboard,groups)\r\n               dashboard.approvedGroups = res;\r\n            }\r\n\r\n            return {...state,dashboards:dashboardsFromState,isloading:false}\r\n        \r\n        case ACTION_CONSTANTS.DASHBOARDS_CLEAN_UP:\r\n            return {...state,isDashUpdated:false,isGroupUpdated:false,isloading:true}\r\n\r\n        // fetch the fresh data after update\r\n        case ACTION_CONSTANTS.DASHBOARDS_INITIATE_UPDATE:\r\n            return {...state,isloading:true,isDashUpdated:false,isGroupUpdated:false}\r\n        \r\n        case ACTION_CONSTANTS.DASHBOARDS_UPDATE_ERROR:\r\n            return {...state,updateError:true,error:action.payload,isloading:false}\r\n        \r\n        case ACTION_CONSTANTS.DASHBOARDS_HIDE_UPDATE_ERROR:\r\n            return {...state,updateError:false}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const checkDashboardIngroups = (dashboard,groups)=>{\r\n    let approvedGroups = [];\r\n\r\n    for (let group of groups){\r\n        let dashboardIdsInGroupsArray = group.dashboards.map(item=> Number(Object.keys(item)[0]));\r\n        if(dashboardIdsInGroupsArray.includes(dashboard.id )){\r\n            approvedGroups.push({name:group.name,id:group.id})\r\n        }\r\n    }\r\n \r\n    return approvedGroups;\r\n   \r\n}\r\nexport default dashboards;\r\n"]},"metadata":{},"sourceType":"module"}