{"ast":null,"code":"/* istanbul ignore file */\nimport ACTION_CONSTANTS from \"./actionConstants\"; //updates the dashboards state \n\nexport var setDashboards = function setDashboards(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_LIST,\n      payload: data\n    });\n  };\n}; // handles the error cases\n\nexport var dashboardErrorHandler = function dashboardErrorHandler(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_LIST_ERROR,\n      payload: data\n    });\n  };\n}; // updates the groups state \n\nexport var setGroups = function setGroups(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_LIST_GROUPS,\n      payload: data\n    });\n  };\n};\nexport var updateErrorHandler = function updateErrorHandler(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_UPDATE_ERROR,\n      payload: data\n    });\n  };\n};\nexport var initiateUpdate = function initiateUpdate() {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_INITIATE_UPDATE,\n      payload: null\n    });\n  };\n}; // maps the dashboards with the groups and update the state\n\nexport var updateDashboardFromGroups = function updateDashboardFromGroups(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_MAP_FROM_GROUPS,\n      payload: {\n        dashboards: data.dashboards,\n        groups: data.groups\n      }\n    });\n  };\n};\nexport var hideUpdateError = function hideUpdateError() {\n  return function (dispatch) {\n    dispatch({\n      type: ACTION_CONSTANTS.DASHBOARDS_HIDE_UPDATE_ERROR,\n      payload: null\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/forms-flow-master/forms-flow-ai/forms-flow-web/src/actions/dashboardActions.js"],"names":["ACTION_CONSTANTS","setDashboards","data","dispatch","type","DASHBOARDS_LIST","payload","dashboardErrorHandler","DASHBOARDS_LIST_ERROR","setGroups","DASHBOARDS_LIST_GROUPS","updateErrorHandler","DASHBOARDS_UPDATE_ERROR","initiateUpdate","DASHBOARDS_INITIATE_UPDATE","updateDashboardFromGroups","DASHBOARDS_MAP_FROM_GROUPS","dashboards","groups","hideUpdateError","DASHBOARDS_HIDE_UPDATE_ERROR"],"mappings":"AAAC;AACD,OAAOA,gBAAP,MAA6B,mBAA7B,C,CAEA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,SAAQ,UAAAC,QAAQ,EAAE;AAC3CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACK,eADf;AAEPC,MAAAA,OAAO,EAACJ;AAFD,KAAD,CAAR;AAID,GAL0B;AAAA,CAAtB,C,CAMP;;AACE,OAAO,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACL,IAAD;AAAA,SAAU,UAAAC,QAAQ,EAAE;AACrDA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACJ,gBAAgB,CAACQ,qBADjB;AAELF,MAAAA,OAAO,EAACJ;AAFH,KAAD,CAAR;AAIH,GALoC;AAAA,CAA9B,C,CAOT;;AACA,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACP,IAAD;AAAA,SAAQ,UAAAC,QAAQ,EAAE;AACzCA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACU,sBADf;AAEPJ,MAAAA,OAAO,EAACJ;AAFD,KAAD,CAAR;AAID,GALwB;AAAA,CAAlB;AAQP,OAAO,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACT,IAAD;AAAA,SAAQ,UAAAC,QAAQ,EAAE;AAClDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACY,uBADf;AAEPN,MAAAA,OAAO,EAACJ;AAFD,KAAD,CAAR;AAID,GALiC;AAAA,CAA3B;AAQP,OAAO,IAAMW,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAI,UAAAV,QAAQ,EAAE;AAC1CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACc,0BADf;AAEPR,MAAAA,OAAO,EAAC;AAFD,KAAD,CAAR;AAID,GAL6B;AAAA,CAAvB,C,CAOP;;AAEA,OAAO,IAAMS,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACb,IAAD;AAAA,SAAQ,UAAAC,QAAQ,EAAE;AACzDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACgB,0BADf;AAEPV,MAAAA,OAAO,EAAC;AACNW,QAAAA,UAAU,EAACf,IAAI,CAACe,UADV;AAENC,QAAAA,MAAM,EAAChB,IAAI,CAACgB;AAFN;AAFD,KAAD,CAAR;AAOD,GARwC;AAAA,CAAlC;AAUP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAI,UAAAhB,QAAQ,EAAE;AAC3CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,gBAAgB,CAACoB,4BADf;AAEPd,MAAAA,OAAO,EAAC;AAFD,KAAD,CAAR;AAID,GAL8B;AAAA,CAAxB","sourcesContent":[" /* istanbul ignore file */\r\nimport ACTION_CONSTANTS from \"./actionConstants\"\r\n\r\n//updates the dashboards state \r\nexport const setDashboards = (data)=>dispatch=>{\r\n    dispatch({\r\n      type:ACTION_CONSTANTS.DASHBOARDS_LIST,\r\n      payload:data\r\n    })\r\n  }\r\n// handles the error cases\r\n  export const dashboardErrorHandler = (data) => dispatch=>{\r\n      dispatch({\r\n          type:ACTION_CONSTANTS.DASHBOARDS_LIST_ERROR,\r\n          payload:data\r\n      })\r\n  }\r\n\r\n// updates the groups state \r\nexport const setGroups = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.DASHBOARDS_LIST_GROUPS,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const updateErrorHandler = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.DASHBOARDS_UPDATE_ERROR,\r\n    payload:data\r\n  })\r\n}\r\n\r\n\r\nexport const initiateUpdate = ()=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.DASHBOARDS_INITIATE_UPDATE,\r\n    payload:null\r\n  })\r\n}\r\n\r\n// maps the dashboards with the groups and update the state\r\n\r\nexport const updateDashboardFromGroups = (data)=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.DASHBOARDS_MAP_FROM_GROUPS,\r\n    payload:{\r\n      dashboards:data.dashboards,\r\n      groups:data.groups\r\n    }\r\n  })\r\n}\r\n\r\nexport const hideUpdateError = ()=>dispatch=>{\r\n  dispatch({\r\n    type:ACTION_CONSTANTS.DASHBOARDS_HIDE_UPDATE_ERROR,\r\n    payload:null\r\n  })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}