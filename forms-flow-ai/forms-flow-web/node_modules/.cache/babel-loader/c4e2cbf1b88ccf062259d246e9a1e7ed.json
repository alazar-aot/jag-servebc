{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\src\\\\components\\\\ServiceFlow\\\\details\\\\TaskHeader.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Row, Col } from \"react-bootstrap\"; // import {\n//   getISODateTime,\n//   getProcessDataFromList,\n//   getFormattedDateAndTime\n// } from \"../../../apiManager/services/formatterService\";\n\nimport { useDispatch, useSelector } from \"react-redux\"; // import DatePicker from \"react-datepicker\";\n// import moment from \"moment\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./../ServiceFlow.scss\";\nimport AddGroupModal from \"./AddGroupModal\";\nimport { claimBPMTask, fetchServiceTaskList, getBPMTaskDetail, unClaimBPMTask, updateAssigneeBPMTask // updateBPMTask\n} from \"../../../apiManager/services/bpmTaskServices\";\nimport { setBPMTaskDetailUpdating } from \"../../../actions/bpmTaskActions\"; //import UserSelection from \"./UserSelection\";\n\nimport UserSelectionDebounce from \"./UserSelectionDebounce\";\nimport SocketIOService from \"../../../services/SocketIOService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar TaskHeader = /*#__PURE__*/React.memo(_c = _s(function () {\n  _s();\n\n  var task = useSelector(function (state) {\n    return state.bpmTasks.taskDetail;\n  });\n  var taskId = useSelector(function (state) {\n    return state.bpmTasks.taskId;\n  }); // const processList = useSelector((state) => state.bpmTasks.processList);\n\n  var username = useSelector(function (state) {\n    var _state$user, _state$user$userDetai;\n\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$userDetai = _state$user.userDetail) === null || _state$user$userDetai === void 0 ? void 0 : _state$user$userDetai.preferred_username) || '';\n  });\n  var taskGroups = useSelector(function (state) {\n    return state.bpmTasks.taskGroups;\n  });\n  var selectedFilter = useSelector(function (state) {\n    return state.bpmTasks.selectedFilter;\n  });\n  var reqData = useSelector(function (state) {\n    return state.bpmTasks.listReqParams;\n  });\n  var firstResult = useSelector(function (state) {\n    return state.bpmTasks.firstResult;\n  }); // const [followUpDate, setFollowUpDate] = useState(null);\n  // const [dueDate, setDueDate] = useState(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setModal = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isEditAssignee = _useState4[0],\n      setIsEditAssignee = _useState4[1];\n\n  var dispatch = useDispatch(); // useEffect(()=>{\n  //   const followUp= task?.followUp ? new Date(task?.followUp):null;\n  //   setFollowUpDate(followUp);\n  // },[task?.followUp])\n  // useEffect(()=>{\n  //   const due= task?.due ? new Date(task?.due): null;\n  //   setDueDate(due);\n  // },[task?.due]);\n\n  var onClaim = function onClaim() {\n    dispatch(setBPMTaskDetailUpdating(true));\n    dispatch(claimBPMTask(taskId, username, function (err, response) {\n      if (!err) {\n        if (!SocketIOService.isConnected()) {\n          if (selectedFilter) {\n            dispatch(getBPMTaskDetail(taskId));\n            dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\n          } else {\n            dispatch(setBPMTaskDetailUpdating(false));\n          }\n        }\n      } else {\n        dispatch(setBPMTaskDetailUpdating(false));\n      }\n    }));\n  };\n\n  var onChangeClaim = function onChangeClaim(userId) {\n    setIsEditAssignee(false);\n\n    if (userId && userId !== task.assignee) {\n      dispatch(setBPMTaskDetailUpdating(true));\n      dispatch(updateAssigneeBPMTask(taskId, userId, function (err, response) {\n        if (!err) {\n          if (!SocketIOService.isConnected()) {\n            if (selectedFilter) {\n              dispatch(getBPMTaskDetail(taskId));\n              dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\n            }\n          }\n        } else {\n          dispatch(setBPMTaskDetailUpdating(false));\n        }\n      }));\n    }\n  };\n\n  var onUnClaimTask = function onUnClaimTask() {\n    dispatch(setBPMTaskDetailUpdating(true));\n    dispatch(unClaimBPMTask(taskId, function (err, response) {\n      if (!err) {\n        if (!SocketIOService.isConnected()) {\n          if (selectedFilter) {\n            dispatch(getBPMTaskDetail(taskId));\n            dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\n          }\n        }\n      } else {\n        dispatch(setBPMTaskDetailUpdating(false));\n      }\n    }));\n  }; // const onFollowUpDateUpdate = (followUpDate)=>{\n  //   setFollowUpDate(followUpDate);\n  //   dispatch(setBPMTaskDetailUpdating(true));\n  //   const updatedTask = {...task, ...{followUp:followUpDate?getISODateTime(followUpDate):null}};\n  //   dispatch(updateBPMTask(taskId,updatedTask,(err,response)=>{\n  //     if(!err){\n  //       if(!SocketIOService.isConnected()) {\n  //         dispatch(getBPMTaskDetail(taskId));\n  //         dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\n  //       }\n  //     }else{\n  //       dispatch(setBPMTaskDetailUpdating(false));\n  //     }\n  //   }))\n  // };\n  // const onDueDateUpdate = (dueDate)=>{\n  //   setDueDate(dueDate);\n  //   dispatch(setBPMTaskDetailUpdating(true));\n  //   const updatedTask = {...task, ...{due:dueDate?getISODateTime(dueDate):null}};\n  //   dispatch(updateBPMTask(taskId,updatedTask,(err,response)=>{\n  //     if(!err){\n  //       if(!SocketIOService.isConnected()) {\n  //         dispatch(getBPMTaskDetail(taskId));\n  //         dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\n  //       }\n  //     }else{\n  //       dispatch(setBPMTaskDetailUpdating(false));\n  //     }\n  //   }))\n  // };\n  // const FollowUpDateInput= React.forwardRef(({ value, onClick }, ref) =>{\n  //  return    <div onClick={onClick} ref={ref}>\n  //     <i className=\"fa fa-calendar mr-1\"/>{\" \"}\n  //     {followUpDate\n  //       ? <span className=\"mr-4\">{moment(followUpDate).fromNow()}</span>\n  //       : \"Set follow-up Date\"}\n  //   </div>\n  // });\n  // const DueDateInput=React.forwardRef(({ value, onClick }, ref) =>{\n  //   return    <div onClick={onClick} ref={ref}>\n  //    <i className=\"fa fa-bell mr-1\"/>{\" \"}\n  //     {dueDate ? <span className=\"mr-4\">{moment(dueDate).fromNow()}</span> : \"Set Due date\"}\n  //   </div>\n  // });\n  // const getGroups = (groups)=>{\n  //   return groups?.map(group=>group.groupId).join(\", \");\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddGroupModal, {\n      modalOpen: showModal,\n      onClose: function onClose() {\n        return setModal(false);\n      },\n      groups: taskGroups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"ml-0 task-header\",\n      children: task === null || task === void 0 ? void 0 : task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"ml-0\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        \"data-title\": \"Application Id\",\n        className: \"application-id\",\n        children: [\" Application ID# \", task === null || task === void 0 ? void 0 : task.applicationId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"actionable\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        className: \"right-side\",\n        children: isEditAssignee ? task !== null && task !== void 0 && task.assignee ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(UserSelectionDebounce, {\n            onClose: function onClose() {\n              return setIsEditAssignee(false);\n            },\n            currentUser: task.assignee,\n            onChangeClaim: onChangeClaim\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 44\n        }, _this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          \"data-testid\": \"clam-btn\",\n          onClick: onClaim,\n          children: \" Process Submission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-user mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }, _this), task !== null && task !== void 0 && task.assignee ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"change-tooltip\",\n              onClick: function onClick() {\n                return setIsEditAssignee(true);\n              },\n              \"dat-title\": \"Click to Change Assignee\",\n              children: task.assignee\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-times ml-1\",\n              onClick: onUnClaimTask,\n              \"dat-title\": \"Reset Assignee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 30\n          }, _this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            \"data-testid\": \"clam-btn\",\n            onClick: onClaim,\n            children: \" Process Submission\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n}, \"wSasKnw+m3HqEcLRjUvvv92sf/Q=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n}));\n_c2 = TaskHeader;\nexport default TaskHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskHeader$React.memo\");\n$RefreshReg$(_c2, \"TaskHeader\");","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/components/ServiceFlow/details/TaskHeader.js"],"names":["React","useState","Row","Col","useDispatch","useSelector","AddGroupModal","claimBPMTask","fetchServiceTaskList","getBPMTaskDetail","unClaimBPMTask","updateAssigneeBPMTask","setBPMTaskDetailUpdating","UserSelectionDebounce","SocketIOService","TaskHeader","memo","task","state","bpmTasks","taskDetail","taskId","username","user","userDetail","preferred_username","taskGroups","selectedFilter","reqData","listReqParams","firstResult","showModal","setModal","isEditAssignee","setIsEditAssignee","dispatch","onClaim","err","response","isConnected","id","onChangeClaim","userId","assignee","onUnClaimTask","name","applicationId"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n// import {\r\n//   getISODateTime,\r\n//   getProcessDataFromList,\r\n//   getFormattedDateAndTime\r\n// } from \"../../../apiManager/services/formatterService\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n// import DatePicker from \"react-datepicker\";\r\n// import moment from \"moment\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./../ServiceFlow.scss\";\r\nimport AddGroupModal from \"./AddGroupModal\";\r\nimport {\r\n  claimBPMTask,\r\n  fetchServiceTaskList,\r\n  getBPMTaskDetail,\r\n  unClaimBPMTask, updateAssigneeBPMTask,\r\n  // updateBPMTask\r\n} from \"../../../apiManager/services/bpmTaskServices\";\r\nimport {setBPMTaskDetailUpdating} from \"../../../actions/bpmTaskActions\";\r\n//import UserSelection from \"./UserSelection\";\r\nimport UserSelectionDebounce from \"./UserSelectionDebounce\";\r\nimport SocketIOService from \"../../../services/SocketIOService\";\r\n\r\nconst TaskHeader = React.memo(() => {\r\n  const task = useSelector(state => state.bpmTasks.taskDetail);\r\n  const taskId = useSelector((state) => state.bpmTasks.taskId);\r\n  // const processList = useSelector((state) => state.bpmTasks.processList);\r\n  const username = useSelector((state) => state.user?.userDetail?.preferred_username || '');\r\n  const taskGroups = useSelector(state=>state.bpmTasks.taskGroups);\r\n  const selectedFilter=useSelector(state=>state.bpmTasks.selectedFilter);\r\n  const reqData = useSelector(state => state.bpmTasks.listReqParams);\r\n  const firstResult = useSelector(state=> state.bpmTasks.firstResult);\r\n  // const [followUpDate, setFollowUpDate] = useState(null);\r\n  // const [dueDate, setDueDate] = useState(null);\r\n  const [showModal, setModal] = useState(false);\r\n  const [isEditAssignee, setIsEditAssignee]=useState(false);\r\n  const dispatch= useDispatch();\r\n\r\n  // useEffect(()=>{\r\n  //   const followUp= task?.followUp ? new Date(task?.followUp):null;\r\n  //   setFollowUpDate(followUp);\r\n  // },[task?.followUp])\r\n\r\n  // useEffect(()=>{\r\n  //   const due= task?.due ? new Date(task?.due): null;\r\n  //   setDueDate(due);\r\n  // },[task?.due]);\r\n\r\n  const onClaim = () => {\r\n    dispatch(setBPMTaskDetailUpdating(true));\r\n    dispatch(claimBPMTask(taskId,username,(err,response)=>{\r\n      if(!err){\r\n        if(!SocketIOService.isConnected()){\r\n          if(selectedFilter){\r\n            dispatch(getBPMTaskDetail(taskId));\r\n            dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\r\n          }else{\r\n            dispatch(setBPMTaskDetailUpdating(false));\r\n          }\r\n        }\r\n      }else{\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n      }\r\n    }));\r\n  }\r\n  const onChangeClaim = (userId) => {\r\n    setIsEditAssignee(false);\r\n   if(userId && userId!==task.assignee){\r\n     dispatch(setBPMTaskDetailUpdating(true));\r\n     dispatch(updateAssigneeBPMTask(taskId,userId,(err,response)=>{\r\n       if(!err){\r\n         if(!SocketIOService.isConnected()){\r\n         if(selectedFilter){\r\n           dispatch(getBPMTaskDetail(taskId));\r\n           dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\r\n         }\r\n         }\r\n       }else{\r\n         dispatch(setBPMTaskDetailUpdating(false));\r\n       }\r\n     }));\r\n   }\r\n  }\r\n\r\n  const onUnClaimTask = () =>{\r\n    dispatch(setBPMTaskDetailUpdating(true));\r\n    dispatch(unClaimBPMTask(taskId,(err,response)=>{\r\n      if(!err){\r\n        if(!SocketIOService.isConnected()){\r\n        if(selectedFilter){\r\n          dispatch(getBPMTaskDetail(taskId));\r\n          dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\r\n        }\r\n        }\r\n      }else{\r\n        dispatch(setBPMTaskDetailUpdating(false));\r\n      }\r\n    }));\r\n  }\r\n\r\n  // const onFollowUpDateUpdate = (followUpDate)=>{\r\n  //   setFollowUpDate(followUpDate);\r\n  //   dispatch(setBPMTaskDetailUpdating(true));\r\n  //   const updatedTask = {...task, ...{followUp:followUpDate?getISODateTime(followUpDate):null}};\r\n  //   dispatch(updateBPMTask(taskId,updatedTask,(err,response)=>{\r\n  //     if(!err){\r\n  //       if(!SocketIOService.isConnected()) {\r\n  //         dispatch(getBPMTaskDetail(taskId));\r\n  //         dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\r\n  //       }\r\n  //     }else{\r\n  //       dispatch(setBPMTaskDetailUpdating(false));\r\n  //     }\r\n  //   }))\r\n  // };\r\n\r\n  // const onDueDateUpdate = (dueDate)=>{\r\n  //   setDueDate(dueDate);\r\n  //   dispatch(setBPMTaskDetailUpdating(true));\r\n  //   const updatedTask = {...task, ...{due:dueDate?getISODateTime(dueDate):null}};\r\n  //   dispatch(updateBPMTask(taskId,updatedTask,(err,response)=>{\r\n  //     if(!err){\r\n  //       if(!SocketIOService.isConnected()) {\r\n  //         dispatch(getBPMTaskDetail(taskId));\r\n  //         dispatch(fetchServiceTaskList(selectedFilter.id, firstResult, reqData));\r\n  //       }\r\n  //     }else{\r\n  //       dispatch(setBPMTaskDetailUpdating(false));\r\n  //     }\r\n  //   }))\r\n  // };\r\n\r\n  // const FollowUpDateInput= React.forwardRef(({ value, onClick }, ref) =>{\r\n  //  return    <div onClick={onClick} ref={ref}>\r\n  //     <i className=\"fa fa-calendar mr-1\"/>{\" \"}\r\n  //     {followUpDate\r\n  //       ? <span className=\"mr-4\">{moment(followUpDate).fromNow()}</span>\r\n  //       : \"Set follow-up Date\"}\r\n  //   </div>\r\n  // });\r\n\r\n\r\n\r\n  // const DueDateInput=React.forwardRef(({ value, onClick }, ref) =>{\r\n  //   return    <div onClick={onClick} ref={ref}>\r\n  //    <i className=\"fa fa-bell mr-1\"/>{\" \"}\r\n  //     {dueDate ? <span className=\"mr-4\">{moment(dueDate).fromNow()}</span> : \"Set Due date\"}\r\n  //   </div>\r\n  // });\r\n\r\n  // const getGroups = (groups)=>{\r\n  //   return groups?.map(group=>group.groupId).join(\", \");\r\n  // }\r\n\r\n  return (\r\n    <>\r\n    <AddGroupModal modalOpen={showModal} onClose={()=>setModal(false)} groups={taskGroups}/>\r\n      <Row className=\"ml-0 task-header\">{task?.name}</Row>\r\n      {/* <Row className=\"ml-0 task-name\" >\r\n      <span className=\"application-id\" dat-title={\"Process Name\"}> {getProcessDataFromList(processList, task?.processDefinitionId, \"name\")}</span>\r\n      </Row> */}\r\n      <Row className=\"ml-0\" >\r\n      <span data-title=\"Application Id\" className=\"application-id\"> Application ID# {task?.applicationId}</span>\r\n      </Row>\r\n      <Row className=\"actionable\">\r\n      {/*   <Col sm={followUpDate?2:\"auto\"} data-title={followUpDate?getFormattedDateAndTime(followUpDate):'Set FollowUp Date'} className='date-container'>\r\n          <DatePicker\r\n            selected={followUpDate}\r\n            onChange={onFollowUpDateUpdate}\r\n            showTimeSelect\r\n            isClearable\r\n            popperPlacement=\"bottom-start\"\r\n            popperModifiers={{\r\n              offset: {\r\n                enabled: true,\r\n                offset: \"5px, 10px\"\r\n              },\r\n              preventOverflow: {\r\n                enabled: true,\r\n                escapeWithReference: false,\r\n                boundariesElement: \"viewport\"\r\n              }\r\n            }}\r\n            customInput={<FollowUpDateInput/>}\r\n          />\r\n        </Col>\r\n        <Col sm={dueDate?2:\"auto\"} data-title={dueDate?getFormattedDateAndTime(dueDate):'Set Due Date'} className='date-container'>\r\n          <DatePicker\r\n            selected={dueDate}\r\n            onChange={onDueDateUpdate}\r\n            showTimeSelect\r\n            isClearable\r\n            shouldCloseOnSelect\r\n            popperPlacement=\"bottom-start\"\r\n            popperModifiers={{\r\n              offset: {\r\n                enabled: true,\r\n                offset: \"5px, 10px\"\r\n              },\r\n              preventOverflow: {\r\n                enabled: true,\r\n                escapeWithReference: false,\r\n                boundariesElement: \"viewport\"\r\n              }\r\n            }}\r\n            customInput={<DueDateInput/>}\r\n          />\r\n        </Col>\r\n        <Col className=\"center-position\" sm={4} onClick={()=>setModal(true)} dat-title={\"groups\"}>\r\n          <i className=\"fa fa-group mr-1\"/>\r\n          { taskGroups.length === 0? <span>Add groups</span>:<span className=\"group-align\">{getGroups(taskGroups)}</span>}\r\n        </Col> */}\r\n        <Col className=\"right-side\">\r\n          {isEditAssignee?(task?.assignee? <span>\r\n              <UserSelectionDebounce onClose={()=>setIsEditAssignee(false)}\r\n                             currentUser={task.assignee}\r\n                             onChangeClaim={onChangeClaim}/></span>:\r\n            <span data-testid=\"clam-btn\" onClick={onClaim}> Process Submission</span>):\r\n            (<>\r\n          <i className=\"fa fa-user mr-1\" />\r\n          {task?.assignee ? (<span>\r\n              <span className=\"change-tooltip\" onClick={()=>setIsEditAssignee(true)} dat-title=\"Click to Change Assignee\">{task.assignee}</span>\r\n              <i className=\"fa fa-times ml-1\" onClick={onUnClaimTask} dat-title=\"Reset Assignee\"/></span>) :\r\n              <span data-testid=\"clam-btn\" onClick={onClaim}> Process Submission</span>\r\n            }\r\n            </>)\r\n          }\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TaskHeader;\r\n"]},"metadata":{},"sourceType":"module"}