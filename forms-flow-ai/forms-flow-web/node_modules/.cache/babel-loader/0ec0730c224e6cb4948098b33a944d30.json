{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Devin\\\\AOT_Projects\\\\jag-servebc\\\\forms-flow-ai\\\\forms-flow-web\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\n\n/* istanbul ignore file */\nimport { FILTER_OPERATOR_TYPES, Filter_Search_Types, MAX_RESULTS, QUERY_TYPES } from \"../../components/ServiceFlow/constants/taskConstants\";\n\nvar getProcessedParamObject = function getProcessedParamObject(searchOption) {\n  var option = {};\n\n  if (searchOption.operator === FILTER_OPERATOR_TYPES.EQUAL) {\n    option[searchOption.key] = searchOption.value;\n  } else if (searchOption.operator === FILTER_OPERATOR_TYPES.LIKE) {\n    option[\"\".concat(searchOption.key, \"Like\")] = \"%\".concat(searchOption.value, \"%\");\n  } else if (searchOption.operator === FILTER_OPERATOR_TYPES.BEFORE) {\n    option[\"\".concat(searchOption.key, \"Before\")] = searchOption.value;\n  } else if (searchOption.operator === FILTER_OPERATOR_TYPES.AFTER) {\n    option[\"\".concat(searchOption.key, \"After\")] = searchOption.value;\n  }\n\n  return option;\n};\n\nvar getVariableOperator = function getVariableOperator(operator) {\n  switch (operator) {\n    case \"=\":\n      return 'eq';\n\n    case \">\":\n      return \"gt\";\n\n    case \">=\":\n      return \"gteq\";\n\n    case \"!=\":\n      return \"neq\";\n\n    case \"<\":\n      return \"lt\";\n\n    case \"<=\":\n      return \"lteq\";\n\n    case \"like\":\n      return \"like\";\n\n    default:\n  }\n};\n\nexport var getFormattedParams = function getFormattedParams(searchOptionList, searchQueryType, variableNameIgnoreCase, variableValueIgnoreCase) {\n  var resultList = {};\n  var paramList = {};\n  var isParamsHasValue = false;\n\n  if (searchOptionList.length === 0) {\n    return paramList;\n  }\n\n  paramList = {\n    processVariables: [],\n    taskVariables: []\n  };\n  searchOptionList.forEach(function (searchOption) {\n    switch (searchOption.type) {\n      case Filter_Search_Types.VARIABLES:\n        if (searchOption.value !== (undefined || null || '') && searchOption.name) {\n          isParamsHasValue = true;\n          paramList[searchOption.key].push({\n            name: searchOption.name,\n            operator: getVariableOperator(searchOption.operator),\n            value: searchOption.operator === \"like\" ? \"%\".concat(searchOption.value, \"%\") : searchOption.value\n          });\n        }\n\n        break;\n\n      case Filter_Search_Types.STRING:\n      case Filter_Search_Types.NORMAL:\n      case Filter_Search_Types.DATE:\n        if (searchOption.value) {\n          isParamsHasValue = true;\n          var param = getProcessedParamObject(searchOption);\n          paramList = _objectSpread(_objectSpread({}, paramList), param);\n        }\n\n        break;\n\n      default:\n    }\n  });\n  var isVariableType = isVariableTypeAvailable(searchOptionList);\n\n  if (isVariableType) {\n    paramList = _objectSpread(_objectSpread({}, paramList), {\n      variableNamesIgnoreCase: variableNameIgnoreCase,\n      variableValuesIgnoreCase: variableValueIgnoreCase\n    });\n  }\n\n  if (searchQueryType === QUERY_TYPES.ALL) {\n    resultList = paramList;\n  } else if (searchQueryType === QUERY_TYPES.ANY) {\n    resultList = {\n      orQueries: [paramList]\n    };\n  }\n\n  return isParamsHasValue ? resultList : {};\n};\nexport var isVariableTypeAvailable = function isVariableTypeAvailable(filterSelections) {\n  return filterSelections.some(function (filter) {\n    return filter.type === Filter_Search_Types.VARIABLES;\n  });\n};\nexport var getFirstResultIndex = function getFirstResultIndex(activePage) {\n  return activePage * MAX_RESULTS - MAX_RESULTS;\n};","map":{"version":3,"sources":["C:/Users/Devin/AOT_Projects/jag-servebc/forms-flow-ai/forms-flow-web/src/apiManager/services/taskSearchParamsFormatterService.js"],"names":["FILTER_OPERATOR_TYPES","Filter_Search_Types","MAX_RESULTS","QUERY_TYPES","getProcessedParamObject","searchOption","option","operator","EQUAL","key","value","LIKE","BEFORE","AFTER","getVariableOperator","getFormattedParams","searchOptionList","searchQueryType","variableNameIgnoreCase","variableValueIgnoreCase","resultList","paramList","isParamsHasValue","length","processVariables","taskVariables","forEach","type","VARIABLES","undefined","name","push","STRING","NORMAL","DATE","param","isVariableType","isVariableTypeAvailable","variableNamesIgnoreCase","variableValuesIgnoreCase","ALL","ANY","orQueries","filterSelections","some","filter","getFirstResultIndex","activePage"],"mappings":"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","sourcesContent":[" /* istanbul ignore file */\r\nimport {\r\n  FILTER_OPERATOR_TYPES,\r\n  Filter_Search_Types, MAX_RESULTS,\r\n  QUERY_TYPES\r\n} from \"../../components/ServiceFlow/constants/taskConstants\";\r\n\r\n\r\nconst getProcessedParamObject = (searchOption) => {\r\n  const option= {};\r\n  if(searchOption.operator===FILTER_OPERATOR_TYPES.EQUAL) {\r\n    option[searchOption.key] = searchOption.value;\r\n  }\r\n  else if(searchOption.operator===FILTER_OPERATOR_TYPES.LIKE){\r\n    option[`${searchOption.key}Like`] = `%${searchOption.value}%`;\r\n  }else if(searchOption.operator===FILTER_OPERATOR_TYPES.BEFORE){\r\n    option[`${searchOption.key}Before`] = searchOption.value;\r\n  }else if(searchOption.operator===FILTER_OPERATOR_TYPES.AFTER){\r\n    option[`${searchOption.key}After`] = searchOption.value;\r\n  }\r\n\r\n  return option;\r\n}\r\n\r\nconst getVariableOperator = (operator)=>{\r\n switch(operator){\r\n   case \"=\":\r\n     return 'eq';\r\n   case \">\":\r\n     return \"gt\";\r\n   case \">=\":\r\n     return \"gteq\";\r\n   case \"!=\":\r\n     return \"neq\";\r\n   case \"<\":\r\n     return \"lt\";\r\n   case \"<=\":\r\n     return \"lteq\";\r\n   case \"like\":\r\n     return \"like\";\r\n   default:\r\n }\r\n}\r\n\r\nexport const getFormattedParams = (searchOptionList, searchQueryType, variableNameIgnoreCase, variableValueIgnoreCase)=>{\r\n  let resultList={};\r\n  let paramList={};\r\n  let isParamsHasValue=false;\r\n  if(searchOptionList.length===0){\r\n  return paramList;\r\n  }\r\n  paramList={processVariables: [],taskVariables:[]};\r\n\r\n  searchOptionList.forEach((searchOption)=>{\r\n    switch(searchOption.type){\r\n      case Filter_Search_Types.VARIABLES:\r\n        if(searchOption.value!==(undefined||null||'') && searchOption.name){\r\n          isParamsHasValue=true;\r\n          paramList[searchOption.key].push({name: searchOption.name, operator: getVariableOperator(searchOption.operator), value: searchOption.operator===\"like\"?`%${searchOption.value}%`:searchOption.value})\r\n        }\r\n        break;\r\n      case Filter_Search_Types.STRING:\r\n      case Filter_Search_Types.NORMAL:\r\n      case Filter_Search_Types.DATE:\r\n        if(searchOption.value){\r\n          isParamsHasValue=true;\r\n          let param= getProcessedParamObject(searchOption);\r\n          paramList ={...paramList,...param}\r\n        }\r\n        break;\r\n      default:\r\n      }\r\n    });\r\n\r\n\r\n  const isVariableType = isVariableTypeAvailable(searchOptionList);\r\n  if(isVariableType){\r\n    paramList={...paramList,...{variableNamesIgnoreCase: variableNameIgnoreCase,\r\n        variableValuesIgnoreCase: variableValueIgnoreCase}}\r\n  }\r\n  if(searchQueryType===QUERY_TYPES.ALL){\r\n    resultList=paramList;\r\n  }else if(searchQueryType===QUERY_TYPES.ANY){\r\n    resultList={orQueries:[paramList]}\r\n  }\r\n  return isParamsHasValue?resultList:{};\r\n}\r\n\r\nexport const isVariableTypeAvailable = (filterSelections)=>{\r\n  return filterSelections.some(filter=>filter.type===Filter_Search_Types.VARIABLES);\r\n}\r\n\r\nexport const getFirstResultIndex = (activePage) => {\r\n return activePage * MAX_RESULTS - MAX_RESULTS;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}